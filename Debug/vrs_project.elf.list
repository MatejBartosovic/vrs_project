
vrs_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000078c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008c8  080008d0  000108d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080008c8  080008c8  000108c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080008cc  080008cc  000108cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000108d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080008d0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  080008d0  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003842  00000000  00000000  000108f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008da  00000000  00000000  0001413b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005a0  00000000  00000000  00014a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000528  00000000  00000000  00014fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001a13  00000000  00000000  000154e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000177e  00000000  00000000  00016ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00018671  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000017d8  00000000  00000000  000186f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00019ec8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	080008b0 	.word	0x080008b0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	080008b0 	.word	0x080008b0

0800017c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b087      	sub	sp, #28
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000186:	2300      	movs	r3, #0
 8000188:	617b      	str	r3, [r7, #20]
 800018a:	2300      	movs	r3, #0
 800018c:	613b      	str	r3, [r7, #16]
 800018e:	2300      	movs	r3, #0
 8000190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000192:	2300      	movs	r3, #0
 8000194:	617b      	str	r3, [r7, #20]
 8000196:	e07e      	b.n	8000296 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000198:	2201      	movs	r2, #1
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	fa02 f303 	lsl.w	r3, r2, r3
 80001a0:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	693b      	ldr	r3, [r7, #16]
 80001a8:	4013      	ands	r3, r2
 80001aa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d16d      	bne.n	8000290 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	2103      	movs	r1, #3
 80001be:	fa01 f303 	lsl.w	r3, r1, r3
 80001c2:	43db      	mvns	r3, r3
 80001c4:	401a      	ands	r2, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	791b      	ldrb	r3, [r3, #4]
 80001d2:	4619      	mov	r1, r3
 80001d4:	697b      	ldr	r3, [r7, #20]
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	fa01 f303 	lsl.w	r3, r1, r3
 80001dc:	431a      	orrs	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	791b      	ldrb	r3, [r3, #4]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d003      	beq.n	80001f2 <GPIO_Init+0x76>
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	791b      	ldrb	r3, [r3, #4]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d136      	bne.n	8000260 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	689a      	ldr	r2, [r3, #8]
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	2103      	movs	r1, #3
 80001fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000200:	43db      	mvns	r3, r3
 8000202:	401a      	ands	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	689a      	ldr	r2, [r3, #8]
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	795b      	ldrb	r3, [r3, #5]
 8000210:	4619      	mov	r1, r3
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	fa01 f303 	lsl.w	r3, r1, r3
 800021a:	431a      	orrs	r2, r3
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	889b      	ldrh	r3, [r3, #4]
 8000224:	b29a      	uxth	r2, r3
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	b29b      	uxth	r3, r3
 800022a:	2101      	movs	r1, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	b29b      	uxth	r3, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	b29b      	uxth	r3, r3
 8000236:	4013      	ands	r3, r2
 8000238:	b29a      	uxth	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	889b      	ldrh	r3, [r3, #4]
 8000242:	b29b      	uxth	r3, r3
 8000244:	b21a      	sxth	r2, r3
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	799b      	ldrb	r3, [r3, #6]
 800024a:	4619      	mov	r1, r3
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	b29b      	uxth	r3, r3
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	b21b      	sxth	r3, r3
 8000256:	4313      	orrs	r3, r2
 8000258:	b21b      	sxth	r3, r3
 800025a:	b29a      	uxth	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	68da      	ldr	r2, [r3, #12]
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	b29b      	uxth	r3, r3
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	2103      	movs	r1, #3
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	43db      	mvns	r3, r3
 8000272:	401a      	ands	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	68da      	ldr	r2, [r3, #12]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	79db      	ldrb	r3, [r3, #7]
 8000280:	4619      	mov	r1, r3
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	3301      	adds	r3, #1
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	2b0f      	cmp	r3, #15
 800029a:	f67f af7d 	bls.w	8000198 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800029e:	bf00      	nop
 80002a0:	371c      	adds	r7, #28
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	807b      	strh	r3, [r7, #2]
 80002b4:	4613      	mov	r3, r2
 80002b6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80002c0:	787a      	ldrb	r2, [r7, #1]
 80002c2:	887b      	ldrh	r3, [r7, #2]
 80002c4:	f003 0307 	and.w	r3, r3, #7
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	fa02 f303 	lsl.w	r3, r2, r3
 80002ce:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80002d0:	887b      	ldrh	r3, [r7, #2]
 80002d2:	08db      	lsrs	r3, r3, #3
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	08db      	lsrs	r3, r3, #3
 80002dc:	b29b      	uxth	r3, r3
 80002de:	461a      	mov	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3208      	adds	r2, #8
 80002e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002e8:	887b      	ldrh	r3, [r7, #2]
 80002ea:	f003 0307 	and.w	r3, r3, #7
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	210f      	movs	r1, #15
 80002f2:	fa01 f303 	lsl.w	r3, r1, r3
 80002f6:	43db      	mvns	r3, r3
 80002f8:	ea02 0103 	and.w	r1, r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f100 0208 	add.w	r2, r0, #8
 8000302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000306:	887b      	ldrh	r3, [r7, #2]
 8000308:	08db      	lsrs	r3, r3, #3
 800030a:	b29b      	uxth	r3, r3
 800030c:	461a      	mov	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3208      	adds	r2, #8
 8000312:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	4313      	orrs	r3, r2
 800031a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	08db      	lsrs	r3, r3, #3
 8000320:	b29b      	uxth	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3208      	adds	r2, #8
 8000328:	68b9      	ldr	r1, [r7, #8]
 800032a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d006      	beq.n	8000358 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800034a:	4909      	ldr	r1, [pc, #36]	; (8000370 <RCC_AHBPeriphClockCmd+0x38>)
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <RCC_AHBPeriphClockCmd+0x38>)
 800034e:	69da      	ldr	r2, [r3, #28]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4313      	orrs	r3, r2
 8000354:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000356:	e006      	b.n	8000366 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000358:	4905      	ldr	r1, [pc, #20]	; (8000370 <RCC_AHBPeriphClockCmd+0x38>)
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <RCC_AHBPeriphClockCmd+0x38>)
 800035c:	69da      	ldr	r2, [r3, #28]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	43db      	mvns	r3, r3
 8000362:	4013      	ands	r3, r2
 8000364:	61cb      	str	r3, [r1, #28]
  }
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40023800 	.word	0x40023800

08000374 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000386:	4909      	ldr	r1, [pc, #36]	; (80003ac <RCC_APB1PeriphClockCmd+0x38>)
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <RCC_APB1PeriphClockCmd+0x38>)
 800038a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4313      	orrs	r3, r2
 8000390:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000392:	e006      	b.n	80003a2 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000394:	4905      	ldr	r1, [pc, #20]	; (80003ac <RCC_APB1PeriphClockCmd+0x38>)
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <RCC_APB1PeriphClockCmd+0x38>)
 8000398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	43db      	mvns	r3, r3
 800039e:	4013      	ands	r3, r2
 80003a0:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40023800 	.word	0x40023800

080003b0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003ca:	d00b      	beq.n	80003e4 <TIM_TimeBaseInit+0x34>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <TIM_TimeBaseInit+0x90>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d007      	beq.n	80003e4 <TIM_TimeBaseInit+0x34>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <TIM_TimeBaseInit+0x94>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d003      	beq.n	80003e4 <TIM_TimeBaseInit+0x34>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a1a      	ldr	r2, [pc, #104]	; (8000448 <TIM_TimeBaseInit+0x98>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d108      	bne.n	80003f6 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80003e4:	89fb      	ldrh	r3, [r7, #14]
 80003e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80003ea:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	885a      	ldrh	r2, [r3, #2]
 80003f0:	89fb      	ldrh	r3, [r7, #14]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a14      	ldr	r2, [pc, #80]	; (800044c <TIM_TimeBaseInit+0x9c>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d00c      	beq.n	8000418 <TIM_TimeBaseInit+0x68>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a13      	ldr	r2, [pc, #76]	; (8000450 <TIM_TimeBaseInit+0xa0>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d008      	beq.n	8000418 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000406:	89fb      	ldrh	r3, [r7, #14]
 8000408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800040c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	891a      	ldrh	r2, [r3, #8]
 8000412:	89fb      	ldrh	r3, [r7, #14]
 8000414:	4313      	orrs	r3, r2
 8000416:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	89fa      	ldrh	r2, [r7, #14]
 800041c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	881a      	ldrh	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2201      	movs	r2, #1
 8000432:	829a      	strh	r2, [r3, #20]
}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40000400 	.word	0x40000400
 8000444:	40000800 	.word	0x40000800
 8000448:	40000c00 	.word	0x40000c00
 800044c:	40001000 	.word	0x40001000
 8000450:	40001400 	.word	0x40001400

08000454 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	b29b      	uxth	r3, r3
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	b29a      	uxth	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000476:	e007      	b.n	8000488 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	b29b      	uxth	r3, r3
 800047e:	f023 0301 	bic.w	r3, r3, #1
 8000482:	b29a      	uxth	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	801a      	strh	r2, [r3, #0]
  }
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	81fb      	strh	r3, [r7, #14]
 80004a2:	2300      	movs	r3, #0
 80004a4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	8c1b      	ldrh	r3, [r3, #32]
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	f023 0301 	bic.w	r3, r3, #1
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c1b      	ldrh	r3, [r3, #32]
 80004ba:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	8b1b      	ldrh	r3, [r3, #24]
 80004c0:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 80004c2:	89fb      	ldrh	r3, [r7, #14]
 80004c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004c8:	81fb      	strh	r3, [r7, #14]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80004ca:	89fb      	ldrh	r3, [r7, #14]
 80004cc:	f023 0303 	bic.w	r3, r3, #3
 80004d0:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	881a      	ldrh	r2, [r3, #0]
 80004d6:	89fb      	ldrh	r3, [r7, #14]
 80004d8:	4313      	orrs	r3, r2
 80004da:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80004dc:	89bb      	ldrh	r3, [r7, #12]
 80004de:	f023 0302 	bic.w	r3, r3, #2
 80004e2:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	891a      	ldrh	r2, [r3, #8]
 80004e8:	89bb      	ldrh	r3, [r7, #12]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	885a      	ldrh	r2, [r3, #2]
 80004f2:	89bb      	ldrh	r3, [r7, #12]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	685a      	ldr	r2, [r3, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	89fa      	ldrh	r2, [r7, #14]
 8000504:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	89ba      	ldrh	r2, [r7, #12]
 800050a:	841a      	strh	r2, [r3, #32]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	8b1b      	ldrh	r3, [r3, #24]
 800052c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800052e:	89fb      	ldrh	r3, [r7, #14]
 8000530:	f023 0308 	bic.w	r3, r3, #8
 8000534:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000536:	89fa      	ldrh	r2, [r7, #14]
 8000538:	887b      	ldrh	r3, [r7, #2]
 800053a:	4313      	orrs	r3, r2
 800053c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	89fa      	ldrh	r2, [r7, #14]
 8000542:	831a      	strh	r2, [r3, #24]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  int i = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
  *  To reconfigure the default setting of SystemInit() function, refer to
  *  system_stm32l1xx.c file
  */

  /* TODO - Add your application code here */
  vystupinitGPIO();
 800055a:	f000 f845 	bl	80005e8 <_Z14vystupinitGPIOv>
  InitializeTimer();
 800055e:	f000 f807 	bl	8000570 <_Z15InitializeTimerv>
  InitializePWMChannel();
 8000562:	f000 f825 	bl	80005b0 <_Z20InitializePWMChannelv>

  /* Infinite loop */
  while (1)
  {
	i++;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3301      	adds	r3, #1
 800056a:	607b      	str	r3, [r7, #4]
  vystupinitGPIO();
  InitializeTimer();
  InitializePWMChannel();

  /* Infinite loop */
  while (1)
 800056c:	e7fb      	b.n	8000566 <main+0x16>
 800056e:	bf00      	nop

08000570 <_Z15InitializeTimerv>:




void InitializeTimer()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000576:	2101      	movs	r1, #1
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff fefb 	bl	8000374 <RCC_APB1PeriphClockCmd>

    TIM_TimeBaseInitTypeDef timerInitStructure;
    timerInitStructure.TIM_Prescaler = 32-1;
 800057e:	231f      	movs	r3, #31
 8000580:	80bb      	strh	r3, [r7, #4]
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000582:	2300      	movs	r3, #0
 8000584:	80fb      	strh	r3, [r7, #6]
    timerInitStructure.TIM_Period = 20000-1;
 8000586:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800058a:	60bb      	str	r3, [r7, #8]
    timerInitStructure.TIM_ClockDivision = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000598:	f7ff ff0a 	bl	80003b0 <TIM_TimeBaseInit>
    TIM_Cmd(TIM2, ENABLE);
 800059c:	2101      	movs	r1, #1
 800059e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005a2:	f7ff ff57 	bl	8000454 <TIM_Cmd>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop

080005b0 <_Z20InitializePWMChannelv>:

void InitializePWMChannel()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
    TIM_OCInitTypeDef outputChannelInit ;
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 80005b6:	2360      	movs	r3, #96	; 0x60
 80005b8:	80bb      	strh	r3, [r7, #4]
    outputChannelInit.TIM_Pulse = 1700;
 80005ba:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80005be:	60bb      	str	r3, [r7, #8]
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 80005c0:	2301      	movs	r3, #1
 80005c2:	80fb      	strh	r3, [r7, #6]
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
 80005c4:	2300      	movs	r3, #0
 80005c6:	81bb      	strh	r3, [r7, #12]

    TIM_OC1Init(TIM2, &outputChannelInit);
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4619      	mov	r1, r3
 80005cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005d0:	f7ff ff60 	bl	8000494 <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80005d4:	2108      	movs	r1, #8
 80005d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005da:	f7ff ff9d 	bl	8000518 <TIM_OC1PreloadConfig>

}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop

080005e8 <_Z14vystupinitGPIOv>:

void vystupinitGPIO()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80005ee:	2101      	movs	r1, #1
 80005f0:	2001      	movs	r0, #1
 80005f2:	f7ff fea1 	bl	8000338 <RCC_AHBPeriphClockCmd>

    GPIO_InitTypeDef gpioStructure;
    gpioStructure.GPIO_Pin = GPIO_Pin_2;
 80005f6:	2304      	movs	r3, #4
 80005f8:	603b      	str	r3, [r7, #0]
    gpioStructure.GPIO_Mode = GPIO_Mode_AF;
 80005fa:	2302      	movs	r3, #2
 80005fc:	713b      	strb	r3, [r7, #4]
    gpioStructure.GPIO_OType = GPIO_OType_PP;
 80005fe:	2300      	movs	r3, #0
 8000600:	71bb      	strb	r3, [r7, #6]
    gpioStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8000602:	2301      	movs	r3, #1
 8000604:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000606:	2303      	movs	r3, #3
 8000608:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOA, &gpioStructure);
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <_Z14vystupinitGPIOv+0x40>)
 8000610:	f7ff fdb4 	bl	800017c <GPIO_Init>

    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_TIM2);
 8000614:	2201      	movs	r2, #1
 8000616:	2102      	movs	r1, #2
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <_Z14vystupinitGPIOv+0x40>)
 800061a:	f7ff fe45 	bl	80002a8 <GPIO_PinAFConfig>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40020000 	.word	0x40020000

0800062c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800062c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000664 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000630:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000632:	e003      	b.n	800063c <LoopCopyDataInit>

08000634 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000636:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000638:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800063a:	3104      	adds	r1, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000640:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000642:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000644:	d3f6      	bcc.n	8000634 <CopyDataInit>
  ldr r2, =_sbss
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000648:	e002      	b.n	8000650 <LoopFillZerobss>

0800064a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800064c:	f842 3b04 	str.w	r3, [r2], #4

08000650 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000652:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000654:	d3f9      	bcc.n	800064a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000656:	f000 f841 	bl	80006dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065a:	f000 f903 	bl	8000864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff ff77 	bl	8000550 <main>
  bx lr
 8000662:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000664:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000668:	080008d0 	.word	0x080008d0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000670:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000674:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000678:	2000001c 	.word	0x2000001c

0800067c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_IRQHandler>
	...

08000680 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000690:	e7fe      	b.n	8000690 <HardFault_Handler+0x4>
 8000692:	bf00      	nop

08000694 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>
 800069a:	bf00      	nop

0800069c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80006a0:	e7fe      	b.n	80006a0 <BusFault_Handler+0x4>
 80006a2:	bf00      	nop

080006a4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80006a8:	e7fe      	b.n	80006a8 <UsageFault_Handler+0x4>
 80006aa:	bf00      	nop

080006ac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80006e0:	4a15      	ldr	r2, [pc, #84]	; (8000738 <SystemInit+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <SystemInit+0x5c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ea:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80006ec:	4912      	ldr	r1, [pc, #72]	; (8000738 <SystemInit+0x5c>)
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <SystemInit+0x5c>)
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <SystemInit+0x60>)
 80006f4:	4013      	ands	r3, r2
 80006f6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80006f8:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <SystemInit+0x5c>)
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <SystemInit+0x5c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000702:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000706:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000708:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <SystemInit+0x5c>)
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <SystemInit+0x5c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000712:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000714:	4a08      	ldr	r2, [pc, #32]	; (8000738 <SystemInit+0x5c>)
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <SystemInit+0x5c>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800071e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SystemInit+0x5c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000726:	f000 f80d 	bl	8000744 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <SystemInit+0x64>)
 800072c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000730:	609a      	str	r2, [r3, #8]
#endif
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	88ffc00c 	.word	0x88ffc00c
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000752:	4a41      	ldr	r2, [pc, #260]	; (8000858 <SetSysClock+0x114>)
 8000754:	4b40      	ldr	r3, [pc, #256]	; (8000858 <SetSysClock+0x114>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800075e:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <SetSysClock+0x114>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000766:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d103      	bne.n	800077c <SetSysClock+0x38>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800077a:	d1f0      	bne.n	800075e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800077c:	4b36      	ldr	r3, [pc, #216]	; (8000858 <SetSysClock+0x114>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000784:	2b00      	cmp	r3, #0
 8000786:	d002      	beq.n	800078e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000788:	2301      	movs	r3, #1
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	e001      	b.n	8000792 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d15a      	bne.n	800084e <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000798:	4a30      	ldr	r2, [pc, #192]	; (800085c <SetSysClock+0x118>)
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <SetSysClock+0x118>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80007a4:	4a2d      	ldr	r2, [pc, #180]	; (800085c <SetSysClock+0x118>)
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <SetSysClock+0x118>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80007b0:	4a2a      	ldr	r2, [pc, #168]	; (800085c <SetSysClock+0x118>)
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <SetSysClock+0x118>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80007bc:	4a26      	ldr	r2, [pc, #152]	; (8000858 <SetSysClock+0x114>)
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <SetSysClock+0x114>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SetSysClock+0x11c>)
 80007ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ce:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80007d0:	bf00      	nop
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <SetSysClock+0x11c>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f9      	bne.n	80007d2 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <SetSysClock+0x114>)
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <SetSysClock+0x114>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <SetSysClock+0x114>)
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <SetSysClock+0x114>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80007ee:	4a1a      	ldr	r2, [pc, #104]	; (8000858 <SetSysClock+0x114>)
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <SetSysClock+0x114>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <SetSysClock+0x114>)
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <SetSysClock+0x114>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000800:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <SetSysClock+0x114>)
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <SetSysClock+0x114>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 800080c:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <SetSysClock+0x114>)
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <SetSysClock+0x114>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000818:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800081a:	bf00      	nop
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <SetSysClock+0x114>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000828:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <SetSysClock+0x114>)
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <SetSysClock+0x114>)
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	f023 0303 	bic.w	r3, r3, #3
 8000832:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <SetSysClock+0x114>)
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <SetSysClock+0x114>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	f043 0303 	orr.w	r3, r3, #3
 800083e:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000840:	bf00      	nop
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SetSysClock+0x114>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f003 030c 	and.w	r3, r3, #12
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d1f9      	bne.n	8000842 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	40023800 	.word	0x40023800
 800085c:	40023c00 	.word	0x40023c00
 8000860:	40007000 	.word	0x40007000

08000864 <__libc_init_array>:
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <__libc_init_array+0x3c>)
 8000866:	b570      	push	{r4, r5, r6, lr}
 8000868:	461e      	mov	r6, r3
 800086a:	4c0e      	ldr	r4, [pc, #56]	; (80008a4 <__libc_init_array+0x40>)
 800086c:	2500      	movs	r5, #0
 800086e:	1ae4      	subs	r4, r4, r3
 8000870:	10a4      	asrs	r4, r4, #2
 8000872:	42a5      	cmp	r5, r4
 8000874:	d004      	beq.n	8000880 <__libc_init_array+0x1c>
 8000876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800087a:	4798      	blx	r3
 800087c:	3501      	adds	r5, #1
 800087e:	e7f8      	b.n	8000872 <__libc_init_array+0xe>
 8000880:	f000 f816 	bl	80008b0 <_init>
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <__libc_init_array+0x44>)
 8000886:	4c09      	ldr	r4, [pc, #36]	; (80008ac <__libc_init_array+0x48>)
 8000888:	461e      	mov	r6, r3
 800088a:	1ae4      	subs	r4, r4, r3
 800088c:	10a4      	asrs	r4, r4, #2
 800088e:	2500      	movs	r5, #0
 8000890:	42a5      	cmp	r5, r4
 8000892:	d004      	beq.n	800089e <__libc_init_array+0x3a>
 8000894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000898:	4798      	blx	r3
 800089a:	3501      	adds	r5, #1
 800089c:	e7f8      	b.n	8000890 <__libc_init_array+0x2c>
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	080008c8 	.word	0x080008c8
 80008a4:	080008c8 	.word	0x080008c8
 80008a8:	080008c8 	.word	0x080008c8
 80008ac:	080008cc 	.word	0x080008cc

080008b0 <_init>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	bf00      	nop
 80008b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b6:	bc08      	pop	{r3}
 80008b8:	469e      	mov	lr, r3
 80008ba:	4770      	bx	lr

080008bc <_fini>:
 80008bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008be:	bf00      	nop
 80008c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c2:	bc08      	pop	{r3}
 80008c4:	469e      	mov	lr, r3
 80008c6:	4770      	bx	lr
