
vrs_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  080039b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000290  200000a8  08003a58  000200a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000338  08003a58  00020338  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008a5b  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e17  00000000  00000000  00028b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b28  00000000  00000000  0002a948  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a10  00000000  00000000  0002b470  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000445a  00000000  00000000  0002be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000382b  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00033b05  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000032a0  00000000  00000000  00033b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  00036e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  00036e60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a8 	.word	0x200000a8
 800015c:	00000000 	.word	0x00000000
 8000160:	080036fc 	.word	0x080036fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ac 	.word	0x200000ac
 800017c:	080036fc 	.word	0x080036fc

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <__aeabi_d2f>:
 8000a64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a6c:	bf24      	itt	cs
 8000a6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a76:	d90d      	bls.n	8000a94 <__aeabi_d2f+0x30>
 8000a78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a98:	d121      	bne.n	8000ade <__aeabi_d2f+0x7a>
 8000a9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9e:	bfbc      	itt	lt
 8000aa0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa4:	4770      	bxlt	lr
 8000aa6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aae:	f1c2 0218 	rsb	r2, r2, #24
 8000ab2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aba:	fa20 f002 	lsr.w	r0, r0, r2
 8000abe:	bf18      	it	ne
 8000ac0:	f040 0001 	orrne.w	r0, r0, #1
 8000ac4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000acc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad0:	ea40 000c 	orr.w	r0, r0, ip
 8000ad4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000adc:	e7cc      	b.n	8000a78 <__aeabi_d2f+0x14>
 8000ade:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae2:	d107      	bne.n	8000af4 <__aeabi_d2f+0x90>
 8000ae4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae8:	bf1e      	ittt	ne
 8000aea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af2:	4770      	bxne	lr
 8000af4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000afc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_frsub>:
 8000b04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b08:	e002      	b.n	8000b10 <__addsf3>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_fsub>:
 8000b0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b10 <__addsf3>:
 8000b10:	0042      	lsls	r2, r0, #1
 8000b12:	bf1f      	itttt	ne
 8000b14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b18:	ea92 0f03 	teqne	r2, r3
 8000b1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b24:	d06a      	beq.n	8000bfc <__addsf3+0xec>
 8000b26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2e:	bfc1      	itttt	gt
 8000b30:	18d2      	addgt	r2, r2, r3
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	4048      	eorgt	r0, r1
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	bfb8      	it	lt
 8000b3a:	425b      	neglt	r3, r3
 8000b3c:	2b19      	cmp	r3, #25
 8000b3e:	bf88      	it	hi
 8000b40:	4770      	bxhi	lr
 8000b42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4249      	negne	r1, r1
 8000b62:	ea92 0f03 	teq	r2, r3
 8000b66:	d03f      	beq.n	8000be8 <__addsf3+0xd8>
 8000b68:	f1a2 0201 	sub.w	r2, r2, #1
 8000b6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b70:	eb10 000c 	adds.w	r0, r0, ip
 8000b74:	f1c3 0320 	rsb	r3, r3, #32
 8000b78:	fa01 f103 	lsl.w	r1, r1, r3
 8000b7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b80:	d502      	bpl.n	8000b88 <__addsf3+0x78>
 8000b82:	4249      	negs	r1, r1
 8000b84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b8c:	d313      	bcc.n	8000bb6 <__addsf3+0xa6>
 8000b8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b92:	d306      	bcc.n	8000ba2 <__addsf3+0x92>
 8000b94:	0840      	lsrs	r0, r0, #1
 8000b96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9a:	f102 0201 	add.w	r2, r2, #1
 8000b9e:	2afe      	cmp	r2, #254	; 0xfe
 8000ba0:	d251      	bcs.n	8000c46 <__addsf3+0x136>
 8000ba2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000baa:	bf08      	it	eq
 8000bac:	f020 0001 	biceq.w	r0, r0, #1
 8000bb0:	ea40 0003 	orr.w	r0, r0, r3
 8000bb4:	4770      	bx	lr
 8000bb6:	0049      	lsls	r1, r1, #1
 8000bb8:	eb40 0000 	adc.w	r0, r0, r0
 8000bbc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc4:	d1ed      	bne.n	8000ba2 <__addsf3+0x92>
 8000bc6:	fab0 fc80 	clz	ip, r0
 8000bca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bce:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd6:	bfaa      	itet	ge
 8000bd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bdc:	4252      	neglt	r2, r2
 8000bde:	4318      	orrge	r0, r3
 8000be0:	bfbc      	itt	lt
 8000be2:	40d0      	lsrlt	r0, r2
 8000be4:	4318      	orrlt	r0, r3
 8000be6:	4770      	bx	lr
 8000be8:	f092 0f00 	teq	r2, #0
 8000bec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf0:	bf06      	itte	eq
 8000bf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bf6:	3201      	addeq	r2, #1
 8000bf8:	3b01      	subne	r3, #1
 8000bfa:	e7b5      	b.n	8000b68 <__addsf3+0x58>
 8000bfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c04:	bf18      	it	ne
 8000c06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0a:	d021      	beq.n	8000c50 <__addsf3+0x140>
 8000c0c:	ea92 0f03 	teq	r2, r3
 8000c10:	d004      	beq.n	8000c1c <__addsf3+0x10c>
 8000c12:	f092 0f00 	teq	r2, #0
 8000c16:	bf08      	it	eq
 8000c18:	4608      	moveq	r0, r1
 8000c1a:	4770      	bx	lr
 8000c1c:	ea90 0f01 	teq	r0, r1
 8000c20:	bf1c      	itt	ne
 8000c22:	2000      	movne	r0, #0
 8000c24:	4770      	bxne	lr
 8000c26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2a:	d104      	bne.n	8000c36 <__addsf3+0x126>
 8000c2c:	0040      	lsls	r0, r0, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	4770      	bx	lr
 8000c36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3a:	bf3c      	itt	cc
 8000c3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c40:	4770      	bxcc	lr
 8000c42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4e:	4770      	bx	lr
 8000c50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c54:	bf16      	itet	ne
 8000c56:	4608      	movne	r0, r1
 8000c58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c5c:	4601      	movne	r1, r0
 8000c5e:	0242      	lsls	r2, r0, #9
 8000c60:	bf06      	itte	eq
 8000c62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c66:	ea90 0f01 	teqeq	r0, r1
 8000c6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_ui2f>:
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e004      	b.n	8000c80 <__aeabi_i2f+0x8>
 8000c76:	bf00      	nop

08000c78 <__aeabi_i2f>:
 8000c78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	bf48      	it	mi
 8000c7e:	4240      	negmi	r0, r0
 8000c80:	ea5f 0c00 	movs.w	ip, r0
 8000c84:	bf08      	it	eq
 8000c86:	4770      	bxeq	lr
 8000c88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c8c:	4601      	mov	r1, r0
 8000c8e:	f04f 0000 	mov.w	r0, #0
 8000c92:	e01c      	b.n	8000cce <__aeabi_l2f+0x2a>

08000c94 <__aeabi_ul2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e00a      	b.n	8000cb8 <__aeabi_l2f+0x14>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_l2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb0:	d502      	bpl.n	8000cb8 <__aeabi_l2f+0x14>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	ea5f 0c01 	movs.w	ip, r1
 8000cbc:	bf02      	ittt	eq
 8000cbe:	4684      	moveq	ip, r0
 8000cc0:	4601      	moveq	r1, r0
 8000cc2:	2000      	moveq	r0, #0
 8000cc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc8:	bf08      	it	eq
 8000cca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd2:	fabc f28c 	clz	r2, ip
 8000cd6:	3a08      	subs	r2, #8
 8000cd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cdc:	db10      	blt.n	8000d00 <__aeabi_l2f+0x5c>
 8000cde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce8:	f1c2 0220 	rsb	r2, r2, #32
 8000cec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf4:	eb43 0002 	adc.w	r0, r3, r2
 8000cf8:	bf08      	it	eq
 8000cfa:	f020 0001 	biceq.w	r0, r0, #1
 8000cfe:	4770      	bx	lr
 8000d00:	f102 0220 	add.w	r2, r2, #32
 8000d04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d10:	fa21 f202 	lsr.w	r2, r1, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fmul>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d06f      	beq.n	8000e18 <__aeabi_fmul+0xf8>
 8000d38:	441a      	add	r2, r3
 8000d3a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3e:	0240      	lsls	r0, r0, #9
 8000d40:	bf18      	it	ne
 8000d42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d46:	d01e      	beq.n	8000d86 <__aeabi_fmul+0x66>
 8000d48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d54:	fba0 3101 	umull	r3, r1, r0, r1
 8000d58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d60:	bf3e      	ittt	cc
 8000d62:	0049      	lslcc	r1, r1, #1
 8000d64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d68:	005b      	lslcc	r3, r3, #1
 8000d6a:	ea40 0001 	orr.w	r0, r0, r1
 8000d6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d72:	2afd      	cmp	r2, #253	; 0xfd
 8000d74:	d81d      	bhi.n	8000db2 <__aeabi_fmul+0x92>
 8000d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	4770      	bx	lr
 8000d86:	f090 0f00 	teq	r0, #0
 8000d8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d8e:	bf08      	it	eq
 8000d90:	0249      	lsleq	r1, r1, #9
 8000d92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9a:	3a7f      	subs	r2, #127	; 0x7f
 8000d9c:	bfc2      	ittt	gt
 8000d9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000da6:	4770      	bxgt	lr
 8000da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	3a01      	subs	r2, #1
 8000db2:	dc5d      	bgt.n	8000e70 <__aeabi_fmul+0x150>
 8000db4:	f112 0f19 	cmn.w	r2, #25
 8000db8:	bfdc      	itt	le
 8000dba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dbe:	4770      	bxle	lr
 8000dc0:	f1c2 0200 	rsb	r2, r2, #0
 8000dc4:	0041      	lsls	r1, r0, #1
 8000dc6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dca:	f1c2 0220 	rsb	r2, r2, #32
 8000dce:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dd6:	f140 0000 	adc.w	r0, r0, #0
 8000dda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dde:	bf08      	it	eq
 8000de0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de4:	4770      	bx	lr
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0040      	lsleq	r0, r0, #1
 8000df2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df6:	3a01      	subeq	r2, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xce>
 8000dfa:	ea40 000c 	orr.w	r0, r0, ip
 8000dfe:	f093 0f00 	teq	r3, #0
 8000e02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	bf02      	ittt	eq
 8000e08:	0049      	lsleq	r1, r1, #1
 8000e0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0e:	3b01      	subeq	r3, #1
 8000e10:	d0f9      	beq.n	8000e06 <__aeabi_fmul+0xe6>
 8000e12:	ea41 010c 	orr.w	r1, r1, ip
 8000e16:	e78f      	b.n	8000d38 <__aeabi_fmul+0x18>
 8000e18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e1c:	ea92 0f0c 	teq	r2, ip
 8000e20:	bf18      	it	ne
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d00a      	beq.n	8000e3e <__aeabi_fmul+0x11e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1d8      	bne.n	8000de6 <__aeabi_fmul+0xc6>
 8000e34:	ea80 0001 	eor.w	r0, r0, r1
 8000e38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e3c:	4770      	bx	lr
 8000e3e:	f090 0f00 	teq	r0, #0
 8000e42:	bf17      	itett	ne
 8000e44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e48:	4608      	moveq	r0, r1
 8000e4a:	f091 0f00 	teqne	r1, #0
 8000e4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e52:	d014      	beq.n	8000e7e <__aeabi_fmul+0x15e>
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	d101      	bne.n	8000e5e <__aeabi_fmul+0x13e>
 8000e5a:	0242      	lsls	r2, r0, #9
 8000e5c:	d10f      	bne.n	8000e7e <__aeabi_fmul+0x15e>
 8000e5e:	ea93 0f0c 	teq	r3, ip
 8000e62:	d103      	bne.n	8000e6c <__aeabi_fmul+0x14c>
 8000e64:	024b      	lsls	r3, r1, #9
 8000e66:	bf18      	it	ne
 8000e68:	4608      	movne	r0, r1
 8000e6a:	d108      	bne.n	8000e7e <__aeabi_fmul+0x15e>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e7c:	4770      	bx	lr
 8000e7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e86:	4770      	bx	lr

08000e88 <__aeabi_fdiv>:
 8000e88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e90:	bf1e      	ittt	ne
 8000e92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e96:	ea92 0f0c 	teqne	r2, ip
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d069      	beq.n	8000f74 <__aeabi_fdiv+0xec>
 8000ea0:	eba2 0203 	sub.w	r2, r2, r3
 8000ea4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea8:	0249      	lsls	r1, r1, #9
 8000eaa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eae:	d037      	beq.n	8000f20 <__aeabi_fdiv+0x98>
 8000eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ebc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	bf38      	it	cc
 8000ec4:	005b      	lslcc	r3, r3, #1
 8000ec6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	bf24      	itt	cs
 8000ed2:	1a5b      	subcs	r3, r3, r1
 8000ed4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000edc:	bf24      	itt	cs
 8000ede:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ee6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eea:	bf24      	itt	cs
 8000eec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000efe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	bf18      	it	ne
 8000f06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0a:	d1e0      	bne.n	8000ece <__aeabi_fdiv+0x46>
 8000f0c:	2afd      	cmp	r2, #253	; 0xfd
 8000f0e:	f63f af50 	bhi.w	8000db2 <__aeabi_fmul+0x92>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f18:	bf08      	it	eq
 8000f1a:	f020 0001 	biceq.w	r0, r0, #1
 8000f1e:	4770      	bx	lr
 8000f20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f28:	327f      	adds	r2, #127	; 0x7f
 8000f2a:	bfc2      	ittt	gt
 8000f2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f34:	4770      	bxgt	lr
 8000f36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	3a01      	subs	r2, #1
 8000f40:	e737      	b.n	8000db2 <__aeabi_fmul+0x92>
 8000f42:	f092 0f00 	teq	r2, #0
 8000f46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0040      	lsleq	r0, r0, #1
 8000f4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f52:	3a01      	subeq	r2, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xc2>
 8000f56:	ea40 000c 	orr.w	r0, r0, ip
 8000f5a:	f093 0f00 	teq	r3, #0
 8000f5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f62:	bf02      	ittt	eq
 8000f64:	0049      	lsleq	r1, r1, #1
 8000f66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6a:	3b01      	subeq	r3, #1
 8000f6c:	d0f9      	beq.n	8000f62 <__aeabi_fdiv+0xda>
 8000f6e:	ea41 010c 	orr.w	r1, r1, ip
 8000f72:	e795      	b.n	8000ea0 <__aeabi_fdiv+0x18>
 8000f74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f78:	ea92 0f0c 	teq	r2, ip
 8000f7c:	d108      	bne.n	8000f90 <__aeabi_fdiv+0x108>
 8000f7e:	0242      	lsls	r2, r0, #9
 8000f80:	f47f af7d 	bne.w	8000e7e <__aeabi_fmul+0x15e>
 8000f84:	ea93 0f0c 	teq	r3, ip
 8000f88:	f47f af70 	bne.w	8000e6c <__aeabi_fmul+0x14c>
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	e776      	b.n	8000e7e <__aeabi_fmul+0x15e>
 8000f90:	ea93 0f0c 	teq	r3, ip
 8000f94:	d104      	bne.n	8000fa0 <__aeabi_fdiv+0x118>
 8000f96:	024b      	lsls	r3, r1, #9
 8000f98:	f43f af4c 	beq.w	8000e34 <__aeabi_fmul+0x114>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e76e      	b.n	8000e7e <__aeabi_fmul+0x15e>
 8000fa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa4:	bf18      	it	ne
 8000fa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000faa:	d1ca      	bne.n	8000f42 <__aeabi_fdiv+0xba>
 8000fac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb0:	f47f af5c 	bne.w	8000e6c <__aeabi_fmul+0x14c>
 8000fb4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb8:	f47f af3c 	bne.w	8000e34 <__aeabi_fmul+0x114>
 8000fbc:	e75f      	b.n	8000e7e <__aeabi_fmul+0x15e>
 8000fbe:	bf00      	nop

08000fc0 <__gesf2>:
 8000fc0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc4:	e006      	b.n	8000fd4 <__cmpsf2+0x4>
 8000fc6:	bf00      	nop

08000fc8 <__lesf2>:
 8000fc8:	f04f 0c01 	mov.w	ip, #1
 8000fcc:	e002      	b.n	8000fd4 <__cmpsf2+0x4>
 8000fce:	bf00      	nop

08000fd0 <__cmpsf2>:
 8000fd0:	f04f 0c01 	mov.w	ip, #1
 8000fd4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe4:	bf18      	it	ne
 8000fe6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fea:	d011      	beq.n	8001010 <__cmpsf2+0x40>
 8000fec:	b001      	add	sp, #4
 8000fee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff2:	bf18      	it	ne
 8000ff4:	ea90 0f01 	teqne	r0, r1
 8000ff8:	bf58      	it	pl
 8000ffa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ffe:	bf88      	it	hi
 8001000:	17c8      	asrhi	r0, r1, #31
 8001002:	bf38      	it	cc
 8001004:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001008:	bf18      	it	ne
 800100a:	f040 0001 	orrne.w	r0, r0, #1
 800100e:	4770      	bx	lr
 8001010:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001014:	d102      	bne.n	800101c <__cmpsf2+0x4c>
 8001016:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101a:	d105      	bne.n	8001028 <__cmpsf2+0x58>
 800101c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001020:	d1e4      	bne.n	8000fec <__cmpsf2+0x1c>
 8001022:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001026:	d0e1      	beq.n	8000fec <__cmpsf2+0x1c>
 8001028:	f85d 0b04 	ldr.w	r0, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <__aeabi_cfrcmple>:
 8001030:	4684      	mov	ip, r0
 8001032:	4608      	mov	r0, r1
 8001034:	4661      	mov	r1, ip
 8001036:	e7ff      	b.n	8001038 <__aeabi_cfcmpeq>

08001038 <__aeabi_cfcmpeq>:
 8001038:	b50f      	push	{r0, r1, r2, r3, lr}
 800103a:	f7ff ffc9 	bl	8000fd0 <__cmpsf2>
 800103e:	2800      	cmp	r0, #0
 8001040:	bf48      	it	mi
 8001042:	f110 0f00 	cmnmi.w	r0, #0
 8001046:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001048 <__aeabi_fcmpeq>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff fff4 	bl	8001038 <__aeabi_cfcmpeq>
 8001050:	bf0c      	ite	eq
 8001052:	2001      	moveq	r0, #1
 8001054:	2000      	movne	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmplt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffea 	bl	8001038 <__aeabi_cfcmpeq>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmple>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffe0 	bl	8001038 <__aeabi_cfcmpeq>
 8001078:	bf94      	ite	ls
 800107a:	2001      	movls	r0, #1
 800107c:	2000      	movhi	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmpge>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffd2 	bl	8001030 <__aeabi_cfrcmple>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpgt>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffc8 	bl	8001030 <__aeabi_cfrcmple>
 80010a0:	bf34      	ite	cc
 80010a2:	2001      	movcc	r0, #1
 80010a4:	2000      	movcs	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_f2uiz>:
 80010ac:	0042      	lsls	r2, r0, #1
 80010ae:	d20e      	bcs.n	80010ce <__aeabi_f2uiz+0x22>
 80010b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b4:	d30b      	bcc.n	80010ce <__aeabi_f2uiz+0x22>
 80010b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010be:	d409      	bmi.n	80010d4 <__aeabi_f2uiz+0x28>
 80010c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	fa23 f002 	lsr.w	r0, r3, r2
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2uiz+0x32>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d102      	bne.n	80010e4 <__aeabi_f2uiz+0x38>
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	4770      	bx	lr
 80010e4:	f04f 0000 	mov.w	r0, #0
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010f4:	4a05      	ldr	r2, [pc, #20]	; (800110c <NVIC_PriorityGroupConfig+0x20>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60d3      	str	r3, [r2, #12]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	2300      	movs	r3, #0
 800111e:	73bb      	strb	r3, [r7, #14]
 8001120:	230f      	movs	r3, #15
 8001122:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	78db      	ldrb	r3, [r3, #3]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d038      	beq.n	800119e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <NVIC_Init+0xb8>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	f1c3 0304 	rsb	r3, r3, #4
 8001140:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001142:	7b7a      	ldrb	r2, [r7, #13]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	fa42 f303 	asr.w	r3, r2, r3
 800114a:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	461a      	mov	r2, r3
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	789a      	ldrb	r2, [r3, #2]
 800115e:	7b7b      	ldrb	r3, [r7, #13]
 8001160:	4013      	ands	r3, r2
 8001162:	b2da      	uxtb	r2, r3
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	4313      	orrs	r3, r2
 8001168:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001170:	4a16      	ldr	r2, [pc, #88]	; (80011cc <NVIC_Init+0xbc>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <NVIC_Init+0xbc>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	095b      	lsrs	r3, r3, #5
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001198:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800119c:	e00f      	b.n	80011be <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800119e:	490b      	ldr	r1, [pc, #44]	; (80011cc <NVIC_Init+0xbc>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	095b      	lsrs	r3, r3, #5
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	2201      	movs	r2, #1
 80011b4:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011b6:	f100 0320 	add.w	r3, r0, #32
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <EXTI_Init+0xe0>)
 80011de:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	799b      	ldrb	r3, [r3, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d04f      	beq.n	8001288 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80011e8:	4931      	ldr	r1, [pc, #196]	; (80012b0 <EXTI_Init+0xe0>)
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <EXTI_Init+0xe0>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4013      	ands	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80011f8:	492d      	ldr	r1, [pc, #180]	; (80012b0 <EXTI_Init+0xe0>)
 80011fa:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <EXTI_Init+0xe0>)
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	43db      	mvns	r3, r3
 8001204:	4013      	ands	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	6811      	ldr	r1, [r2, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001222:	4923      	ldr	r1, [pc, #140]	; (80012b0 <EXTI_Init+0xe0>)
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <EXTI_Init+0xe0>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	43db      	mvns	r3, r3
 800122e:	4013      	ands	r3, r2
 8001230:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001232:	491f      	ldr	r1, [pc, #124]	; (80012b0 <EXTI_Init+0xe0>)
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <EXTI_Init+0xe0>)
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	43db      	mvns	r3, r3
 800123e:	4013      	ands	r3, r2
 8001240:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	795b      	ldrb	r3, [r3, #5]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d10e      	bne.n	8001268 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800124a:	4919      	ldr	r1, [pc, #100]	; (80012b0 <EXTI_Init+0xe0>)
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <EXTI_Init+0xe0>)
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4313      	orrs	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001258:	4915      	ldr	r1, [pc, #84]	; (80012b0 <EXTI_Init+0xe0>)
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <EXTI_Init+0xe0>)
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4313      	orrs	r3, r2
 8001264:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001266:	e01d      	b.n	80012a4 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <EXTI_Init+0xe0>)
 800126a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	795b      	ldrb	r3, [r3, #5]
 8001270:	461a      	mov	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	6811      	ldr	r1, [r2, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001286:	e00d      	b.n	80012a4 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	791b      	ldrb	r3, [r3, #4]
 800128c:	461a      	mov	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	6811      	ldr	r1, [r2, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	43d2      	mvns	r2, r2
 80012a0:	400a      	ands	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
  }
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40010400 	.word	0x40010400

080012b4 <EXTI_GetITStatus>:
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <EXTI_GetITStatus+0x44>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4013      	ands	r3, r2
 80012cc:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <EXTI_GetITStatus+0x44>)
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <EXTI_GetITStatus+0x32>
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e001      	b.n	80012ea <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40010400 	.word	0x40010400

080012fc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001304:	4a03      	ldr	r2, [pc, #12]	; (8001314 <EXTI_ClearITPendingBit+0x18>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6153      	str	r3, [r2, #20]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40010400 	.word	0x40010400

08001318 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e07e      	b.n	8001432 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001334:	2201      	movs	r2, #1
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d16d      	bne.n	800142c <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2103      	movs	r1, #3
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	401a      	ands	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	4619      	mov	r1, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	791b      	ldrb	r3, [r3, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d003      	beq.n	800138e <GPIO_Init+0x76>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	791b      	ldrb	r3, [r3, #4]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d136      	bne.n	80013fc <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2103      	movs	r1, #3
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	795b      	ldrb	r3, [r3, #5]
 80013ac:	4619      	mov	r1, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	889b      	ldrh	r3, [r3, #4]
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	2101      	movs	r1, #1
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4013      	ands	r3, r2
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	889b      	ldrh	r3, [r3, #4]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	799b      	ldrb	r3, [r3, #6]
 80013e6:	4619      	mov	r1, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	b29b      	uxth	r3, r3
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2103      	movs	r1, #3
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	79db      	ldrb	r3, [r3, #7]
 800141c:	4619      	mov	r1, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	f67f af7d 	bls.w	8001334 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800143a:	bf00      	nop
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	831a      	strh	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	835a      	strh	r2, [r3, #26]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001494:	787a      	ldrb	r2, [r7, #1]
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	08db      	lsrs	r3, r3, #3
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	08db      	lsrs	r3, r3, #3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	210f      	movs	r1, #15
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	ea02 0103 	and.w	r1, r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f100 0208 	add.w	r2, r0, #8
 80014d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	08db      	lsrs	r3, r3, #3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <RCC_HSICmd+0x1c>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	42470000 	.word	0x42470000

0800152c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <RCC_SYSCLKConfig+0x34>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f023 0303 	bic.w	r3, r3, #3
 8001544:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <RCC_SYSCLKConfig+0x34>)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6093      	str	r3, [r2, #8]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800

08001564 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001584:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <RCC_GetClocksFreq+0x1a0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d865      	bhi.n	8001660 <RCC_GetClocksFreq+0xfc>
 8001594:	a201      	add	r2, pc, #4	; (adr r2, 800159c <RCC_GetClocksFreq+0x38>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015d1 	.word	0x080015d1
 80015a0:	08001661 	.word	0x08001661
 80015a4:	08001661 	.word	0x08001661
 80015a8:	08001661 	.word	0x08001661
 80015ac:	080015f1 	.word	0x080015f1
 80015b0:	08001661 	.word	0x08001661
 80015b4:	08001661 	.word	0x08001661
 80015b8:	08001661 	.word	0x08001661
 80015bc:	080015f9 	.word	0x080015f9
 80015c0:	08001661 	.word	0x08001661
 80015c4:	08001661 	.word	0x08001661
 80015c8:	08001661 	.word	0x08001661
 80015cc:	08001601 	.word	0x08001601
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <RCC_GetClocksFreq+0x1a0>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80015d8:	0b5b      	lsrs	r3, r3, #13
 80015da:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	3301      	adds	r3, #1
 80015e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]
      break;
 80015ee:	e047      	b.n	8001680 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a45      	ldr	r2, [pc, #276]	; (8001708 <RCC_GetClocksFreq+0x1a4>)
 80015f4:	601a      	str	r2, [r3, #0]
      break;
 80015f6:	e043      	b.n	8001680 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a44      	ldr	r2, [pc, #272]	; (800170c <RCC_GetClocksFreq+0x1a8>)
 80015fc:	601a      	str	r2, [r3, #0]
      break;
 80015fe:	e03f      	b.n	8001680 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <RCC_GetClocksFreq+0x1a0>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001608:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <RCC_GetClocksFreq+0x1a0>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001612:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	0c9b      	lsrs	r3, r3, #18
 8001618:	4a3d      	ldr	r2, [pc, #244]	; (8001710 <RCC_GetClocksFreq+0x1ac>)
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	0d9b      	lsrs	r3, r3, #22
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <RCC_GetClocksFreq+0x1a0>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d109      	bne.n	800164c <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	4a33      	ldr	r2, [pc, #204]	; (8001708 <RCC_GetClocksFreq+0x1a4>)
 800163c:	fb02 f203 	mul.w	r2, r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fbb2 f2f3 	udiv	r2, r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800164a:	e019      	b.n	8001680 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	4a2f      	ldr	r2, [pc, #188]	; (800170c <RCC_GetClocksFreq+0x1a8>)
 8001650:	fb02 f203 	mul.w	r2, r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fbb2 f2f3 	udiv	r2, r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]
      }
      break;
 800165e:	e00f      	b.n	8001680 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <RCC_GetClocksFreq+0x1a0>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001668:	0b5b      	lsrs	r3, r3, #13
 800166a:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	3301      	adds	r3, #1
 8001670:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	461a      	mov	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
      break;
 800167e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <RCC_GetClocksFreq+0x1a0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001688:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <RCC_GetClocksFreq+0x1b0>)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	40da      	lsrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <RCC_GetClocksFreq+0x1a0>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016b0:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80016b8:	4a16      	ldr	r2, [pc, #88]	; (8001714 <RCC_GetClocksFreq+0x1b0>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <RCC_GetClocksFreq+0x1a0>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80016d8:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	0adb      	lsrs	r3, r3, #11
 80016de:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80016e0:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <RCC_GetClocksFreq+0x1b0>)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	40da      	lsrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3724      	adds	r7, #36	; 0x24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	00f42400 	.word	0x00f42400
 800170c:	007a1200 	.word	0x007a1200
 8001710:	20000004 	.word	0x20000004
 8001714:	20000010 	.word	0x20000010

08001718 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800172a:	4909      	ldr	r1, [pc, #36]	; (8001750 <RCC_AHBPeriphClockCmd+0x38>)
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <RCC_AHBPeriphClockCmd+0x38>)
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4313      	orrs	r3, r2
 8001734:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001736:	e006      	b.n	8001746 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001738:	4905      	ldr	r1, [pc, #20]	; (8001750 <RCC_AHBPeriphClockCmd+0x38>)
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <RCC_AHBPeriphClockCmd+0x38>)
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	43db      	mvns	r3, r3
 8001742:	4013      	ands	r3, r2
 8001744:	61cb      	str	r3, [r1, #28]
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	40023800 	.word	0x40023800

08001754 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001766:	4909      	ldr	r1, [pc, #36]	; (800178c <RCC_APB2PeriphClockCmd+0x38>)
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <RCC_APB2PeriphClockCmd+0x38>)
 800176a:	6a1a      	ldr	r2, [r3, #32]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4313      	orrs	r3, r2
 8001770:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001772:	e006      	b.n	8001782 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001774:	4905      	ldr	r1, [pc, #20]	; (800178c <RCC_APB2PeriphClockCmd+0x38>)
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <RCC_APB2PeriphClockCmd+0x38>)
 8001778:	6a1a      	ldr	r2, [r3, #32]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	43db      	mvns	r3, r3
 800177e:	4013      	ands	r3, r2
 8001780:	620b      	str	r3, [r1, #32]
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40023800 	.word	0x40023800

08001790 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80017a2:	4909      	ldr	r1, [pc, #36]	; (80017c8 <RCC_APB1PeriphClockCmd+0x38>)
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <RCC_APB1PeriphClockCmd+0x38>)
 80017a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80017ae:	e006      	b.n	80017be <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80017b0:	4905      	ldr	r1, [pc, #20]	; (80017c8 <RCC_APB1PeriphClockCmd+0x38>)
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <RCC_APB1PeriphClockCmd+0x38>)
 80017b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4013      	ands	r3, r2
 80017bc:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40023800 	.word	0x40023800

080017cc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d103      	bne.n	80017f8 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <RCC_GetFlagStatus+0x60>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e002      	b.n	80017fe <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <RCC_GetFlagStatus+0x60>)
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fc:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	74fb      	strb	r3, [r7, #19]
 800181a:	e001      	b.n	8001820 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001820:	7cfb      	ldrb	r3, [r7, #19]
}
 8001822:	4618      	mov	r0, r3
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40023800 	.word	0x40023800

08001830 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800184a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	885b      	ldrh	r3, [r3, #2]
 8001854:	4313      	orrs	r3, r2
 8001856:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800185c:	4313      	orrs	r3, r2
 800185e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001864:	4313      	orrs	r3, r2
 8001866:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800186c:	4313      	orrs	r3, r2
 800186e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001874:	4313      	orrs	r3, r2
 8001876:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800187c:	4313      	orrs	r3, r2
 800187e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001884:	4313      	orrs	r3, r2
 8001886:	b29a      	uxth	r2, r3
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	4313      	orrs	r3, r2
 800188c:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	89fa      	ldrh	r2, [r7, #14]
 8001892:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	8b9b      	ldrh	r3, [r3, #28]
 8001898:	b29b      	uxth	r3, r3
 800189a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800189e:	b29a      	uxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	8a1a      	ldrh	r2, [r3, #16]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	821a      	strh	r2, [r3, #16]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop

080018b8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80018da:	e007      	b.n	80018ec <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	801a      	strh	r2, [r3, #0]
  }
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80018f8:	b490      	push	{r4, r7}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	4613      	mov	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <SYSCFG_EXTILineConfig+0x80>)
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	4a14      	ldr	r2, [pc, #80]	; (8001978 <SYSCFG_EXTILineConfig+0x80>)
 8001928:	79bb      	ldrb	r3, [r7, #6]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3302      	adds	r3, #2
 8001930:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	401a      	ands	r2, r3
 800193a:	1c83      	adds	r3, r0, #2
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <SYSCFG_EXTILineConfig+0x80>)
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	461c      	mov	r4, r3
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <SYSCFG_EXTILineConfig+0x80>)
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	b2db      	uxtb	r3, r3
 8001952:	3302      	adds	r3, #2
 8001954:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001958:	79f9      	ldrb	r1, [r7, #7]
 800195a:	79bb      	ldrb	r3, [r7, #6]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	431a      	orrs	r2, r3
 8001968:	1ca3      	adds	r3, r4, #2
 800196a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bc90      	pop	{r4, r7}
 8001976:	4770      	bx	lr
 8001978:	40010000 	.word	0x40010000

0800197c <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800198c:	2300      	movs	r3, #0
 800198e:	81bb      	strh	r3, [r7, #12]
 8001990:	2300      	movs	r3, #0
 8001992:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8a1b      	ldrh	r3, [r3, #16]
 8001998:	b29a      	uxth	r2, r3
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	4013      	ands	r3, r2
 800199e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	899b      	ldrh	r3, [r3, #12]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	4013      	ands	r3, r2
 80019aa:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80019ac:	89bb      	ldrh	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <TIM_GetITStatus+0x42>
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e001      	b.n	80019c2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	43db      	mvns	r3, r3
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	821a      	strh	r2, [r3, #16]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	8a1b      	ldrh	r3, [r3, #16]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	88db      	ldrh	r3, [r3, #6]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	4313      	orrs	r3, r2
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	899b      	ldrh	r3, [r3, #12]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a3c:	f023 030c 	bic.w	r3, r3, #12
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	889a      	ldrh	r2, [r3, #4]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	891b      	ldrh	r3, [r3, #8]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	8a9b      	ldrh	r3, [r3, #20]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	899b      	ldrh	r3, [r3, #12]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fd68 	bl	8001564 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <USART_Init+0x160>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d102      	bne.n	8001aa2 <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	e001      	b.n	8001aa6 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	899b      	ldrh	r3, [r3, #12]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0c      	bge.n	8001acc <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001ab2:	6a3a      	ldr	r2, [r7, #32]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009a      	lsls	r2, r3, #2
 8001abc:	441a      	add	r2, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e00b      	b.n	8001ae4 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009a      	lsls	r2, r3, #2
 8001ad6:	441a      	add	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <USART_Init+0x164>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	2264      	movs	r2, #100	; 0x64
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	899b      	ldrh	r3, [r3, #12]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da0c      	bge.n	8001b28 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	3332      	adds	r3, #50	; 0x32
 8001b14:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <USART_Init+0x164>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b22:	4313      	orrs	r3, r2
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	e00b      	b.n	8001b40 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	3332      	adds	r3, #50	; 0x32
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <USART_Init+0x164>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	811a      	strh	r2, [r3, #8]
}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40013800 	.word	0x40013800
 8001b54:	51eb851f 	.word	0x51eb851f

08001b58 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	899b      	ldrh	r3, [r3, #12]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001b7a:	e007      	b.n	8001b8c <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	899b      	ldrh	r3, [r3, #12]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	819a      	strh	r2, [r3, #12]
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop

08001b98 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	809a      	strh	r2, [r3, #4]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop

08001bbc <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	889b      	ldrh	r3, [r3, #4]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bce:	b29b      	uxth	r3, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop

08001bdc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001c12:	2201      	movs	r2, #1
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d103      	bne.n	8001c2a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	330c      	adds	r3, #12
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e009      	b.n	8001c3e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d103      	bne.n	8001c38 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3310      	adds	r3, #16
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e002      	b.n	8001c3e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3314      	adds	r3, #20
 8001c3c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001c3e:	787b      	ldrb	r3, [r7, #1]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	6811      	ldr	r1, [r2, #0]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001c50:	e006      	b.n	8001c60 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	6811      	ldr	r1, [r2, #0]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	43d2      	mvns	r2, r2
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
  }
}
 8001c60:	bf00      	nop
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop

08001c6c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	4013      	ands	r3, r2
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e001      	b.n	8001c96 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <USART_ClearFlag>:
  * @note TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	801a      	strh	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_ZN5Rfm22C1ER10SpiGeneric>:
       { 0xa8, 0x03, 0x9c, 0x00, 0xd1, 0xb7, 0x00, 0xd4, 0x28, 0x41, 0x29, 0x80, 0x60, 0x9d, 0x49, 0x2c, 0x21, 0x08 }, // 19.2, 335
       { 0x98, 0x03, 0x9c, 0x00, 0xd1, 0xb7, 0x00, 0xd4, 0x28, 0x20, 0x29, 0x80, 0x60, 0x09, 0xd5, 0x0c, 0x21, 0x08 }, // 38.4, 335
       { 0x98, 0x03, 0x96, 0x00, 0xda, 0x74, 0x00, 0xdc, 0x28, 0x1f, 0x29, 0x80, 0x60, 0x0a, 0x3d, 0x0c, 0x21, 0x08 }, // 40, 335
   };

Rfm22::Rfm22(SpiGeneric& spi) : spi(spi), currentMode(Rfm22ModeInitialising),_txHeaderTo(0xff),
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
								_thisAddress(0xff),_txHeaderFrom(0xff),_txHeaderId(0),_txHeaderFlags(0),
								_bufLen(0),_txBufSentIndex(0){
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <_ZN5Rfm22C1ER10SpiGeneric+0x54>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	721a      	strb	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	22ff      	movs	r2, #255	; 0xff
 8001ce4:	725a      	strb	r2, [r3, #9]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	22ff      	movs	r2, #255	; 0xff
 8001cea:	729a      	strb	r2, [r3, #10]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	72da      	strb	r2, [r3, #11]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	731a      	strb	r2, [r3, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	22ff      	movs	r2, #255	; 0xff
 8001cfc:	745a      	strb	r2, [r3, #17]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	749a      	strb	r2, [r3, #18]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	74da      	strb	r2, [r3, #19]
	// TODO Auto-generated constructor stub
}
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	0800390c 	.word	0x0800390c

08001d1c <_ZN5Rfm224initEv>:

void Rfm22::init(){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

	reset();
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f85f 	bl	8001de8 <_ZN5Rfm225resetEv>
	setupInterrupts();
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	330c      	adds	r3, #12
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
	enableInterrupts();
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3310      	adds	r3, #16
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
	setModeIdle();
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f86a 	bl	8001e1c <_ZN5Rfm2211setModeIdleEv>
    spiWrite(RH_RF22_REG_7D_TX_FIFO_CONTROL2, RH_RF22_TXFFAEM_THRESHOLD);
    spiWrite(RH_RF22_REG_7E_RX_FIFO_CONTROL,  RH_RF22_RXFFAFULL_THRESHOLD);
    spiWrite(RH_RF22_REG_30_DATA_ACCESS_CONTROL, RH_RF22_ENPACRX | RH_RF22_ENPACTX | RH_RF22_ENCRC | (_polynomial & RH_RF22_CRC));
   */

	uint8_t data[] = {RH_RF22_TXFFAEM_THRESHOLD,RH_RF22_RXFFAFULL_THRESHOLD};
 8001d48:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <_ZN5Rfm224initEv+0x98>)
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	8812      	ldrh	r2, [r2, #0]
 8001d50:	801a      	strh	r2, [r3, #0]
    spi.writeRegBytes(RH_RF22_REG_7D_TX_FIFO_CONTROL2,data,2);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6858      	ldr	r0, [r3, #4]
 8001d56:	f107 020c 	add.w	r2, r7, #12
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	217d      	movs	r1, #125	; 0x7d
 8001d5e:	f000 fd5b 	bl	8002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>
    //reg 0x30 = 10001111
    spi.writeReg(RH_RF22_REG_30_DATA_ACCESS_CONTROL, RH_RF22_ENPACRX | RH_RF22_ENPACTX | RH_RF22_ENCRC | RH_RF22_CRC);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	228f      	movs	r2, #143	; 0x8f
 8001d68:	2130      	movs	r1, #48	; 0x30
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fd92 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
    // or the broadcast address of 0xff
    // If no changes are made after this, the transmitted
    // to address will be 0xff, the from address will be 0xff
    // and all such messages will be accepted. This permits the out-of the box
    // RH_RF22 config to act as an unaddresed, unreliable datagram service
    data[0] = RH_RF22_BCEN_HEADER3 | RH_RF22_HDCH_HEADER3;
 8001d70:	2388      	movs	r3, #136	; 0x88
 8001d72:	733b      	strb	r3, [r7, #12]
    data[1] = RH_RF22_HDLEN_4 | RH_RF22_SYNCLEN_2;
 8001d74:	2342      	movs	r3, #66	; 0x42
 8001d76:	737b      	strb	r3, [r7, #13]
    spi.writeRegBytes(RH_RF22_REG_32_HEADER_CONTROL1,data,2);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6858      	ldr	r0, [r3, #4]
 8001d7c:	f107 020c 	add.w	r2, r7, #12
 8001d80:	2302      	movs	r3, #2
 8001d82:	2132      	movs	r1, #50	; 0x32
 8001d84:	f000 fd48 	bl	8002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>

    // Set some defaults. An innocuous ISM frequency, and reasonable pull-in
    setFrequency(434.0, 0.05);
 8001d88:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <_ZN5Rfm224initEv+0x9c>)
 8001d8a:	490c      	ldr	r1, [pc, #48]	; (8001dbc <_ZN5Rfm224initEv+0xa0>)
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8ab 	bl	8001ee8 <_ZN5Rfm2212setFrequencyEff>
//    setFrequency(900.0);
    // Some slow, reliable default speed and modulation
    setModemConfig(FSK_Rb2_4Fd36);
 8001d92:	2103      	movs	r1, #3
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f9c3 	bl	8002120 <_ZN5Rfm2214setModemConfigENS_17ModemConfigChoiceE>
//    setModemConfig(FSK_Rb125Fd125);
    setGpioReversed(false);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fa2d 	bl	80021fc <_ZN5Rfm2215setGpioReversedEb>
    // Lowish power
    setTxPower(RH_RF22_TXPOW_8DBM);
 8001da2:	2103      	movs	r1, #3
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f80b 	bl	8001dc0 <_ZN5Rfm2210setTxPowerEh>


}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	08003714 	.word	0x08003714
 8001db8:	3d4ccccd 	.word	0x3d4ccccd
 8001dbc:	43d90000 	.word	0x43d90000

08001dc0 <_ZN5Rfm2210setTxPowerEh>:
bool Rfm22::setFHChannel(uint8_t fhch){
	spi.writeReg(RH_RF22_REG_79_FREQUENCY_HOPPING_CHANNEL_SELECT, fhch);
	return !(statusRead() & RH_RF22_FREQERR);
}

void Rfm22::setTxPower(uint8_t power){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
	 spi.writeReg(RH_RF22_REG_6D_TX_POWER, power | RH_RF22_LNA_SW); // On RF23, LNA_SW must be set.
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6858      	ldr	r0, [r3, #4]
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f043 0308 	orr.w	r3, r3, #8
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	216d      	movs	r1, #109	; 0x6d
 8001ddc:	f000 fd5a 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZN5Rfm225resetEv>:

void Rfm22::reset(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	spi.writeReg(RH_RF22_REG_07_OPERATING_MODE1, RH_RF22_SWRES);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	2107      	movs	r1, #7
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fd4b 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
	for(int i =0; i<1000;i++){
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e08:	da03      	bge.n	8001e12 <_ZN5Rfm225resetEv+0x2a>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e7f7      	b.n	8001e02 <_ZN5Rfm225resetEv+0x1a>

	}
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop

08001e1c <_ZN5Rfm2211setModeIdleEv>:

void Rfm22::setModeIdle()
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    if (currentMode != Rfm22ModeIdle)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7a1b      	ldrb	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d006      	beq.n	8001e3a <_ZN5Rfm2211setModeIdleEv+0x1e>
    {
	setOpMode(idleMode);
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f832 	bl	8001e98 <_ZN5Rfm229setOpModeEh>
	currentMode = Rfm22ModeIdle;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	721a      	strb	r2, [r3, #8]
    }
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop

08001e44 <_ZN5Rfm229setModeRxEv>:

void Rfm22::setModeRx()
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
    if (currentMode != Rfm22ModeRx)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7a1b      	ldrb	r3, [r3, #8]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d006      	beq.n	8001e62 <_ZN5Rfm229setModeRxEv+0x1e>
    {
	setOpMode(idleMode | RH_RF22_RXON);
 8001e54:	2105      	movs	r1, #5
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f81e 	bl	8001e98 <_ZN5Rfm229setOpModeEh>
	currentMode = Rfm22ModeRx;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	721a      	strb	r2, [r3, #8]
    }
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop

08001e6c <_ZN5Rfm229setModeTxEv>:

void Rfm22::setModeTx()
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    if (currentMode != Rfm22ModeTx)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7a1b      	ldrb	r3, [r3, #8]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d009      	beq.n	8001e90 <_ZN5Rfm229setModeTxEv+0x24>
    {
	setOpMode(idleMode | RH_RF22_TXON);
 8001e7c:	2109      	movs	r1, #9
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f80a 	bl	8001e98 <_ZN5Rfm229setOpModeEh>
	// Hmmm, if you dont clear the RX FIFO here, then it appears that going
	// to transmit mode in the middle of a receive can corrupt the
	// RX FIFO
	resetRxFifo();
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f819 	bl	8001ebc <_ZN5Rfm2211resetRxFifoEv>
	currentMode = Rfm22ModeTx;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	721a      	strb	r2, [r3, #8]
    }
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_ZN5Rfm229setOpModeEh>:

void Rfm22::setOpMode(uint8_t mode)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
    spi.writeReg(RH_RF22_REG_07_OPERATING_MODE1, mode);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	2107      	movs	r1, #7
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fcf1 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop

08001ebc <_ZN5Rfm2211resetRxFifoEv>:

void Rfm22::resetRxFifo(){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    spi.writeReg(RH_RF22_REG_08_OPERATING_MODE2, RH_RF22_FFCLRRX);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	2108      	movs	r1, #8
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fce1 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
    spi.writeReg(RH_RF22_REG_08_OPERATING_MODE2, 0);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2108      	movs	r1, #8
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fcda 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_ZN5Rfm2212setFrequencyEff>:
	spi.writeReg(RH_RF22_REG_08_OPERATING_MODE2, RH_RF22_FFCLRTX);
	spi.writeReg(RH_RF22_REG_08_OPERATING_MODE2, 0);
}

bool Rfm22::setFrequency(float centre, float afcPullInRange)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
    uint8_t fbsel = RH_RF22_SBSEL;
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t afclimiter;
    if (centre < 240.0 || centre > 960.0) // 930.0 for early silicon
 8001efa:	497b      	ldr	r1, [pc, #492]	; (80020e8 <_ZN5Rfm2212setFrequencyEff+0x200>)
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	f7ff f8ad 	bl	800105c <__aeabi_fcmplt>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <_ZN5Rfm2212setFrequencyEff+0x2e>
 8001f08:	4978      	ldr	r1, [pc, #480]	; (80020ec <_ZN5Rfm2212setFrequencyEff+0x204>)
 8001f0a:	68b8      	ldr	r0, [r7, #8]
 8001f0c:	f7ff f8c4 	bl	8001098 <__aeabi_fcmpgt>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <_ZN5Rfm2212setFrequencyEff+0x32>
	return false;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e0d0      	b.n	80020bc <_ZN5Rfm2212setFrequencyEff+0x1d4>
    if (centre >= 480.0)
 8001f1a:	4975      	ldr	r1, [pc, #468]	; (80020f0 <_ZN5Rfm2212setFrequencyEff+0x208>)
 8001f1c:	68b8      	ldr	r0, [r7, #8]
 8001f1e:	f7ff f8b1 	bl	8001084 <__aeabi_fcmpge>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d03c      	beq.n	8001fa2 <_ZN5Rfm2212setFrequencyEff+0xba>
    {
	if (afcPullInRange < 0.0 || afcPullInRange > 0.318750)
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff f895 	bl	800105c <__aeabi_fcmplt>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <_ZN5Rfm2212setFrequencyEff+0x66>
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7fe fa85 	bl	8000448 <__aeabi_f2d>
 8001f3e:	a362      	add	r3, pc, #392	; (adr r3, 80020c8 <_ZN5Rfm2212setFrequencyEff+0x1e0>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fd64 	bl	8000a10 <__aeabi_dcmpgt>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <_ZN5Rfm2212setFrequencyEff+0x6a>
	    return false;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e0b4      	b.n	80020bc <_ZN5Rfm2212setFrequencyEff+0x1d4>
	centre /= 2;
 8001f52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f56:	68b8      	ldr	r0, [r7, #8]
 8001f58:	f7fe ff96 	bl	8000e88 <__aeabi_fdiv>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60bb      	str	r3, [r7, #8]
	fbsel |= RH_RF22_HBSEL;
 8001f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f64:	f043 0320 	orr.w	r3, r3, #32
 8001f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	afclimiter = afcPullInRange * 1000000.0 / 1250.0;
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7fe fa6b 	bl	8000448 <__aeabi_f2d>
 8001f72:	a357      	add	r3, pc, #348	; (adr r3, 80020d0 <_ZN5Rfm2212setFrequencyEff+0x1e8>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe faba 	bl	80004f0 <__aeabi_dmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	460c      	mov	r4, r1
 8001f80:	4618      	mov	r0, r3
 8001f82:	4621      	mov	r1, r4
 8001f84:	a354      	add	r3, pc, #336	; (adr r3, 80020d8 <_ZN5Rfm2212setFrequencyEff+0x1f0>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe fbdb 	bl	8000744 <__aeabi_ddiv>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	460c      	mov	r4, r1
 8001f92:	4618      	mov	r0, r3
 8001f94:	4621      	mov	r1, r4
 8001f96:	f7fe fd45 	bl	8000a24 <__aeabi_d2uiz>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fa0:	e02e      	b.n	8002000 <_ZN5Rfm2212setFrequencyEff+0x118>
    }
    else
    {
	if (afcPullInRange < 0.0 || afcPullInRange > 0.159375)
 8001fa2:	f04f 0100 	mov.w	r1, #0
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff f858 	bl	800105c <__aeabi_fcmplt>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10a      	bne.n	8001fc8 <_ZN5Rfm2212setFrequencyEff+0xe0>
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fa48 	bl	8000448 <__aeabi_f2d>
 8001fb8:	a349      	add	r3, pc, #292	; (adr r3, 80020e0 <_ZN5Rfm2212setFrequencyEff+0x1f8>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fd27 	bl	8000a10 <__aeabi_dcmpgt>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <_ZN5Rfm2212setFrequencyEff+0xe4>
	    return false;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e077      	b.n	80020bc <_ZN5Rfm2212setFrequencyEff+0x1d4>
	afclimiter = afcPullInRange * 1000000.0 / 625.0;
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7fe fa3b 	bl	8000448 <__aeabi_f2d>
 8001fd2:	a33f      	add	r3, pc, #252	; (adr r3, 80020d0 <_ZN5Rfm2212setFrequencyEff+0x1e8>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fa8a 	bl	80004f0 <__aeabi_dmul>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	460c      	mov	r4, r1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <_ZN5Rfm2212setFrequencyEff+0x20c>)
 8001fea:	f7fe fbab 	bl	8000744 <__aeabi_ddiv>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	f7fe fd15 	bl	8000a24 <__aeabi_d2uiz>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    }
    centre /= 10.0;
 8002000:	493d      	ldr	r1, [pc, #244]	; (80020f8 <_ZN5Rfm2212setFrequencyEff+0x210>)
 8002002:	68b8      	ldr	r0, [r7, #8]
 8002004:	f7fe ff40 	bl	8000e88 <__aeabi_fdiv>
 8002008:	4603      	mov	r3, r0
 800200a:	60bb      	str	r3, [r7, #8]
    float integerPart = floor(centre);
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f7fe fa1b 	bl	8000448 <__aeabi_f2d>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	4618      	mov	r0, r3
 8002018:	4621      	mov	r1, r4
 800201a:	f001 f9f9 	bl	8003410 <floor>
 800201e:	4603      	mov	r3, r0
 8002020:	460c      	mov	r4, r1
 8002022:	4618      	mov	r0, r3
 8002024:	4621      	mov	r1, r4
 8002026:	f7fe fd1d 	bl	8000a64 <__aeabi_d2f>
 800202a:	4603      	mov	r3, r0
 800202c:	623b      	str	r3, [r7, #32]
    float fractionalPart = centre - integerPart;
 800202e:	6a39      	ldr	r1, [r7, #32]
 8002030:	68b8      	ldr	r0, [r7, #8]
 8002032:	f7fe fd6b 	bl	8000b0c <__aeabi_fsub>
 8002036:	4603      	mov	r3, r0
 8002038:	61fb      	str	r3, [r7, #28]

    uint8_t fb = (uint8_t)integerPart - 24; // Range 0 to 23
 800203a:	6a38      	ldr	r0, [r7, #32]
 800203c:	f7ff f836 	bl	80010ac <__aeabi_f2uiz>
 8002040:	4603      	mov	r3, r0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3b18      	subs	r3, #24
 8002046:	76fb      	strb	r3, [r7, #27]
    fbsel |= fb;
 8002048:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800204c:	7efb      	ldrb	r3, [r7, #27]
 800204e:	4313      	orrs	r3, r2
 8002050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t fc = fractionalPart * 64000;
 8002054:	4929      	ldr	r1, [pc, #164]	; (80020fc <_ZN5Rfm2212setFrequencyEff+0x214>)
 8002056:	69f8      	ldr	r0, [r7, #28]
 8002058:	f7fe fe62 	bl	8000d20 <__aeabi_fmul>
 800205c:	4603      	mov	r3, r0
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f824 	bl	80010ac <__aeabi_f2uiz>
 8002064:	4603      	mov	r3, r0
 8002066:	833b      	strh	r3, [r7, #24]
    spiWrite(RH_RF22_REG_74_FREQUENCY_OFFSET2, 0);
    spiWrite(RH_RF22_REG_75_FREQUENCY_BAND_SELECT, fbsel);
    spiWrite(RH_RF22_REG_76_NOMINAL_CARRIER_FREQUENCY1, fc >> 8);
    spiWrite(RH_RF22_REG_77_NOMINAL_CARRIER_FREQUENCY0, fc & 0xff);*/

    uint8_t data[] ={0, 0, fbsel, fc >> 8, fc & 0xff};
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	711a      	strb	r2, [r3, #4]
 8002072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002076:	74bb      	strb	r3, [r7, #18]
 8002078:	8b3b      	ldrh	r3, [r7, #24]
 800207a:	121b      	asrs	r3, r3, #8
 800207c:	b2db      	uxtb	r3, r3
 800207e:	74fb      	strb	r3, [r7, #19]
 8002080:	8b3b      	ldrh	r3, [r7, #24]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	753b      	strb	r3, [r7, #20]
    spi.writeRegBytes(RH_RF22_REG_73_FREQUENCY_OFFSET1,data,5);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6858      	ldr	r0, [r3, #4]
 800208a:	f107 0210 	add.w	r2, r7, #16
 800208e:	2305      	movs	r3, #5
 8002090:	2173      	movs	r1, #115	; 0x73
 8002092:	f000 fbc1 	bl	8002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>
    spi.writeReg(RH_RF22_REG_2A_AFC_LIMITER, afclimiter);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800209e:	212a      	movs	r1, #42	; 0x2a
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fbf7 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
    return !(statusRead() & RH_RF22_FREQERR);
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f82a 	bl	8002100 <_ZN5Rfm2210statusReadEv>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	372c      	adds	r7, #44	; 0x2c
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	f3af 8000 	nop.w
 80020c8:	66666666 	.word	0x66666666
 80020cc:	3fd46666 	.word	0x3fd46666
 80020d0:	00000000 	.word	0x00000000
 80020d4:	412e8480 	.word	0x412e8480
 80020d8:	00000000 	.word	0x00000000
 80020dc:	40938800 	.word	0x40938800
 80020e0:	66666666 	.word	0x66666666
 80020e4:	3fc46666 	.word	0x3fc46666
 80020e8:	43700000 	.word	0x43700000
 80020ec:	44700000 	.word	0x44700000
 80020f0:	43f00000 	.word	0x43f00000
 80020f4:	40838800 	.word	0x40838800
 80020f8:	41200000 	.word	0x41200000
 80020fc:	477a0000 	.word	0x477a0000

08002100 <_ZN5Rfm2210statusReadEv>:

uint8_t Rfm22::statusRead()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    return spi.readReg(RH_RF22_REG_02_DEVICE_STATUS);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fbf0 	bl	80028f4 <_ZN10SpiGeneric7readRegEh>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop

08002120 <_ZN5Rfm2214setModemConfigENS_17ModemConfigChoiceE>:

bool Rfm22::setModemConfig(ModemConfigChoice index)
{
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	221b      	movs	r2, #27
 8002130:	4293      	cmp	r3, r2
 8002132:	dd01      	ble.n	8002138 <_ZN5Rfm2214setModemConfigENS_17ModemConfigChoiceE+0x18>
        return false;
 8002134:	2300      	movs	r3, #0
 8002136:	e017      	b.n	8002168 <_ZN5Rfm2214setModemConfigENS_17ModemConfigChoiceE+0x48>

    Rfm22::ModemConfig cfg;
    memcpy(&cfg,&MODEM_CONFIG_TABLE[index],sizeof(Rfm22::ModemConfig));
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <_ZN5Rfm2214setModemConfigENS_17ModemConfigChoiceE+0x50>)
 8002144:	4413      	add	r3, r2
 8002146:	f107 040c 	add.w	r4, r7, #12
 800214a:	461d      	mov	r5, r3
 800214c:	6828      	ldr	r0, [r5, #0]
 800214e:	6869      	ldr	r1, [r5, #4]
 8002150:	68aa      	ldr	r2, [r5, #8]
 8002152:	68eb      	ldr	r3, [r5, #12]
 8002154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002156:	8a2b      	ldrh	r3, [r5, #16]
 8002158:	8023      	strh	r3, [r4, #0]
    setModemRegisters(&cfg);
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f807 	bl	8002174 <_ZN5Rfm2217setModemRegistersEPNS_11ModemConfigE>

    return true;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bdb0      	pop	{r4, r5, r7, pc}
 8002170:	0800371c 	.word	0x0800371c

08002174 <_ZN5Rfm2217setModemRegistersEPNS_11ModemConfigE>:

void Rfm22::setModemRegisters(ModemConfig* config)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]

    spi.writeReg(RH_RF22_REG_1C_IF_FILTER_BANDWIDTH,                    config->reg_1c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6858      	ldr	r0, [r3, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	211c      	movs	r1, #28
 800218a:	f000 fb83 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
    spi.writeReg(RH_RF22_REG_1F_CLOCK_RECOVERY_GEARSHIFT_OVERRIDE,      config->reg_1f);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6858      	ldr	r0, [r3, #4]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	461a      	mov	r2, r3
 8002198:	211f      	movs	r1, #31
 800219a:	f000 fb7b 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
    spi.writeRegBytes(RH_RF22_REG_20_CLOCK_RECOVERY_OVERSAMPLING_RATE, &config->reg_20, 6);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6858      	ldr	r0, [r3, #4]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	1c9a      	adds	r2, r3, #2
 80021a6:	2306      	movs	r3, #6
 80021a8:	2120      	movs	r1, #32
 80021aa:	f000 fb35 	bl	8002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>
    spi.writeRegBytes(RH_RF22_REG_2C_OOK_COUNTER_VALUE_1,              &config->reg_2c, 3);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6858      	ldr	r0, [r3, #4]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f103 0208 	add.w	r2, r3, #8
 80021b8:	2303      	movs	r3, #3
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	f000 fb2c 	bl	8002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>
    spi.writeReg(RH_RF22_REG_58_CHARGE_PUMP_CURRENT_TRIMMING,           config->reg_58);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6858      	ldr	r0, [r3, #4]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	7adb      	ldrb	r3, [r3, #11]
 80021c8:	461a      	mov	r2, r3
 80021ca:	2158      	movs	r1, #88	; 0x58
 80021cc:	f000 fb62 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
    spi.writeReg(RH_RF22_REG_69_AGC_OVERRIDE1,                          config->reg_69);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6858      	ldr	r0, [r3, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	7b1b      	ldrb	r3, [r3, #12]
 80021d8:	461a      	mov	r2, r3
 80021da:	2169      	movs	r1, #105	; 0x69
 80021dc:	f000 fb5a 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
    spi.writeRegBytes(RH_RF22_REG_6E_TX_DATA_RATE1,                    &config->reg_6e, 5);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6858      	ldr	r0, [r3, #4]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f103 020d 	add.w	r2, r3, #13
 80021ea:	2305      	movs	r3, #5
 80021ec:	216e      	movs	r1, #110	; 0x6e
 80021ee:	f000 fb13 	bl	8002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>


}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop

080021fc <_ZN5Rfm2215setGpioReversedEb>:

void Rfm22::setGpioReversed(bool gpioReversed)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
    // Ensure the antenna can be switched automatically according to transmit and receive
    // This assumes GPIO0(out) is connected to TX_ANT(in) to enable tx antenna during transmit
    // This assumes GPIO1(out) is connected to RX_ANT(in) to enable rx antenna during receive
	uint8_t data[2];
    if (gpioReversed)
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d004      	beq.n	8002218 <_ZN5Rfm2215setGpioReversedEb+0x1c>
    {
	// Reversed for HAB-RFM22B-BOA HAB-RFM22B-BO, also Si4432 sold by Dorji.com via Tindie.com.
    	data[0] = 0x15;
 800220e:	2315      	movs	r3, #21
 8002210:	733b      	strb	r3, [r7, #12]
    	data[1] = 0x12;
 8002212:	2312      	movs	r3, #18
 8002214:	737b      	strb	r3, [r7, #13]
 8002216:	e003      	b.n	8002220 <_ZN5Rfm2215setGpioReversedEb+0x24>
    }
    else
    {
    	data[0] = 0x12;
 8002218:	2312      	movs	r3, #18
 800221a:	733b      	strb	r3, [r7, #12]
    	data[1] = 0x15;
 800221c:	2315      	movs	r3, #21
 800221e:	737b      	strb	r3, [r7, #13]
    }
    spi.writeRegBytes(RH_RF22_REG_0B_GPIO_CONFIGURATION0,data,2);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6858      	ldr	r0, [r3, #4]
 8002224:	f107 020c 	add.w	r2, r7, #12
 8002228:	2302      	movs	r3, #2
 800222a:	210b      	movs	r1, #11
 800222c:	f000 faf4 	bl	8002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_ZN5Rfm2213startTransmitEv>:
//    printBuffer("txbuf:", _buf, _bufLen);
    return true;
}

void Rfm22::startTransmit()
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
    sendNextFragment(); // Actually the first fragment
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f80f 	bl	8002264 <_ZN5Rfm2216sendNextFragmentEv>
    spi.writeReg(RH_RF22_REG_3E_PACKET_LENGTH, _bufLen); // Total length that will be sent
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6858      	ldr	r0, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7c9b      	ldrb	r3, [r3, #18]
 800224e:	461a      	mov	r2, r3
 8002250:	213e      	movs	r1, #62	; 0x3e
 8002252:	f000 fb1f 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
    setModeTx(); // Start the transmitter, turns off the receiver
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fe08 	bl	8001e6c <_ZN5Rfm229setModeTxEv>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_ZN5Rfm2216sendNextFragmentEv>:

void Rfm22::sendNextFragment()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    if (_txBufSentIndex < _bufLen)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7cda      	ldrb	r2, [r3, #19]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7c9b      	ldrb	r3, [r3, #18]
 8002274:	429a      	cmp	r2, r3
 8002276:	d21c      	bcs.n	80022b2 <_ZN5Rfm2216sendNextFragmentEv+0x4e>
    {
	// Some left to send?
	uint8_t len = _bufLen - _txBufSentIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7c9a      	ldrb	r2, [r3, #18]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7cdb      	ldrb	r3, [r3, #19]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	73fb      	strb	r3, [r7, #15]
	// But dont send too much
	if (len > (RH_RF22_FIFO_SIZE - RH_RF22_TXFFAEM_THRESHOLD - 1))
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b3b      	cmp	r3, #59	; 0x3b
 8002288:	d901      	bls.n	800228e <_ZN5Rfm2216sendNextFragmentEv+0x2a>
	    len = (RH_RF22_FIFO_SIZE - RH_RF22_TXFFAEM_THRESHOLD - 1);
 800228a:	233b      	movs	r3, #59	; 0x3b
 800228c:	73fb      	strb	r3, [r7, #15]
	spi.writeRegBytes(RH_RF22_REG_7F_FIFO_ACCESS, _buf + _txBufSentIndex, len);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6858      	ldr	r0, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3314      	adds	r3, #20
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	7cd2      	ldrb	r2, [r2, #19]
 800229a:	441a      	add	r2, r3
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	217f      	movs	r1, #127	; 0x7f
 80022a0:	f000 faba 	bl	8002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>
//	printBuffer("frag:", _buf  + _txBufSentIndex, len);
	_txBufSentIndex += len;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7cda      	ldrb	r2, [r3, #19]
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4413      	add	r3, r2
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	74da      	strb	r2, [r3, #19]
    }
}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop

080022bc <_ZN5Rfm2216readNextFragmentEv>:

void Rfm22::readNextFragment()
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    if (((uint16_t)_bufLen + RH_RF22_RXFFAFULL_THRESHOLD) > RH_RF22_MAX_MESSAGE_LEN)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7c9b      	ldrb	r3, [r3, #18]
 80022c8:	3337      	adds	r3, #55	; 0x37
 80022ca:	2b32      	cmp	r3, #50	; 0x32
 80022cc:	dc11      	bgt.n	80022f2 <_ZN5Rfm2216readNextFragmentEv+0x36>
	return; // Hmmm receiver overflow. Should never occur

    // Read the RH_RF22_RXFFAFULL_THRESHOLD octets that should be there
    spi.readRegBytes(RH_RF22_REG_7F_FIFO_ACCESS, _buf + _bufLen, RH_RF22_RXFFAFULL_THRESHOLD);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6858      	ldr	r0, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3314      	adds	r3, #20
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	7c92      	ldrb	r2, [r2, #18]
 80022da:	441a      	add	r2, r3
 80022dc:	2337      	movs	r3, #55	; 0x37
 80022de:	217f      	movs	r1, #127	; 0x7f
 80022e0:	f000 fb3c 	bl	800295c <_ZN10SpiGeneric12readRegBytesEhPhh>
    _bufLen += RH_RF22_RXFFAFULL_THRESHOLD;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7c9b      	ldrb	r3, [r3, #18]
 80022e8:	3337      	adds	r3, #55	; 0x37
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	749a      	strb	r2, [r3, #18]
 80022f0:	e000      	b.n	80022f4 <_ZN5Rfm2216readNextFragmentEv+0x38>
}

void Rfm22::readNextFragment()
{
    if (((uint16_t)_bufLen + RH_RF22_RXFFAFULL_THRESHOLD) > RH_RF22_MAX_MESSAGE_LEN)
	return; // Hmmm receiver overflow. Should never occur
 80022f2:	bf00      	nop

    // Read the RH_RF22_RXFFAFULL_THRESHOLD octets that should be there
    spi.readRegBytes(RH_RF22_REG_7F_FIFO_ACCESS, _buf + _bufLen, RH_RF22_RXFFAFULL_THRESHOLD);
    _bufLen += RH_RF22_RXFFAFULL_THRESHOLD;
}
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop

080022fc <_ZN5Rfm2210resetFifosEv>:

// Clear the FIFOs
void Rfm22::resetFifos()
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    spi.writeReg(RH_RF22_REG_08_OPERATING_MODE2, RH_RF22_FFCLRRX | RH_RF22_FFCLRTX);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2203      	movs	r2, #3
 800230a:	2108      	movs	r1, #8
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fac1 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
    spi.writeReg(RH_RF22_REG_08_OPERATING_MODE2, 0);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	2108      	movs	r1, #8
 800231a:	4618      	mov	r0, r3
 800231c:	f000 faba 	bl	8002894 <_ZN10SpiGeneric8writeRegEhh>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_ZN5Rfm2215restartTransmitEv>:

void Rfm22::restartTransmit()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    currentMode = Rfm22ModeIdle;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	721a      	strb	r2, [r3, #8]
    _txBufSentIndex = 0;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	74da      	strb	r2, [r3, #19]
    startTransmit();
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff7b 	bl	8002238 <_ZN5Rfm2213startTransmitEv>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop

0800234c <_ZN5Rfm2210clearRxBufEv>:

void Rfm22::clearRxBuf()
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    _bufLen = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	749a      	strb	r2, [r3, #18]
    _rxBufValid = false;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <_ZN5Rfm224recvEPhh>:

uint8_t Rfm22::recv(uint8_t* buf, uint8_t len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	71fb      	strb	r3, [r7, #7]
    if (!available())
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f822 	bl	80023c4 <_ZN5Rfm229availableEv>
 8002380:	4603      	mov	r3, r0
 8002382:	f083 0301 	eor.w	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <_ZN5Rfm224recvEPhh+0x24>
	return 0;
 800238c:	2300      	movs	r3, #0
 800238e:	e015      	b.n	80023bc <_ZN5Rfm224recvEPhh+0x50>

    if (buf)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00e      	beq.n	80023b4 <_ZN5Rfm224recvEPhh+0x48>
    {
	if (len > _bufLen)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	7c9b      	ldrb	r3, [r3, #18]
 800239a:	79fa      	ldrb	r2, [r7, #7]
 800239c:	429a      	cmp	r2, r3
 800239e:	d902      	bls.n	80023a6 <_ZN5Rfm224recvEPhh+0x3a>
	    len = _bufLen;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	7c9b      	ldrb	r3, [r3, #18]
 80023a4:	71fb      	strb	r3, [r7, #7]
	memcpy(buf, _buf, len);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3314      	adds	r3, #20
 80023aa:	79fa      	ldrb	r2, [r7, #7]
 80023ac:	4619      	mov	r1, r3
 80023ae:	68b8      	ldr	r0, [r7, #8]
 80023b0:	f001 f8f2 	bl	8003598 <memcpy>
    }
    clearRxBuf();
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f7ff ffc9 	bl	800234c <_ZN5Rfm2210clearRxBufEv>
//    printBuffer("recv:", buf, *len);
    return len;
 80023ba:	79fb      	ldrb	r3, [r7, #7]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZN5Rfm229availableEv>:

bool Rfm22::available()
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
    if (!_rxBufValid)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f083 0301 	eor.w	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <_ZN5Rfm229availableEv+0x20>
	setModeRx(); // Make sure we are receiving
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff fd30 	bl	8001e44 <_ZN5Rfm229setModeRxEv>
    return _rxBufValid;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80023ea:	b2db      	uxtb	r3, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <_ZN5Rfm22D1Ev>:

Rfm22::~Rfm22() {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <_ZN5Rfm22D1Ev+0x24>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <_ZN5Rfm22D1Ev+0x1a>
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 ffff 	bl	800340c <_ZdlPv>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	0800390c 	.word	0x0800390c

0800241c <_ZN5Rfm22D0Ev>:
    if (!_rxBufValid)
	setModeRx(); // Make sure we are receiving
    return _rxBufValid;
}

Rfm22::~Rfm22() {
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ffe5 	bl	80023f4 <_ZN5Rfm22D1Ev>
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 ffee 	bl	800340c <_ZdlPv>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop

0800243c <_ZN5Rfm2215setupInterruptsEv>:
 *
 * Protected functions
 *
 * */

void Rfm22::setupInterrupts(){
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002444:	2101      	movs	r1, #1
 8002446:	2001      	movs	r0, #1
 8002448:	f7ff f966 	bl	8001718 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800244c:	2101      	movs	r1, #1
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff f980 	bl	8001754 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8002454:	2300      	movs	r3, #0
 8002456:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002458:	2300      	movs	r3, #0
 800245a:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 800245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002460:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8002462:	2301      	movs	r3, #1
 8002464:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz;
 8002466:	2303      	movs	r3, #3
 8002468:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0318 	add.w	r3, r7, #24
 800246e:	4619      	mov	r1, r3
 8002470:	4814      	ldr	r0, [pc, #80]	; (80024c4 <_ZN5Rfm2215setupInterruptsEv+0x88>)
 8002472:	f7fe ff51 	bl	8001318 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource10);
 8002476:	210a      	movs	r1, #10
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff fa3d 	bl	80018f8 <SYSCFG_EXTILineConfig>

	EXTI_InitStruct.EXTI_Line = EXTI_Line10;
 800247e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002482:	613b      	str	r3, [r7, #16]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8002484:	2301      	movs	r3, #1
 8002486:	75bb      	strb	r3, [r7, #22]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8002488:	2300      	movs	r3, #0
 800248a:	753b      	strb	r3, [r7, #20]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 800248c:	230c      	movs	r3, #12
 800248e:	757b      	strb	r3, [r7, #21]
	EXTI_Init(&EXTI_InitStruct);
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fe9b 	bl	80011d0 <EXTI_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI15_10_IRQn;
 800249a:	2328      	movs	r3, #40	; 0x28
 800249c:	733b      	strb	r3, [r7, #12]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 12;
 800249e:	230c      	movs	r3, #12
 80024a0:	737b      	strb	r3, [r7, #13]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStruct);
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fe2e 	bl	8001110 <NVIC_Init>

	EXTI_ClearITPendingBit(EXTI_Line10);
 80024b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024b8:	f7fe ff20 	bl	80012fc <EXTI_ClearITPendingBit>
}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40020000 	.word	0x40020000

080024c8 <_ZN5Rfm2216enableInterruptsEv>:

void Rfm22::enableInterrupts(){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RH_RF22_ENTXFFAEM | RH_RF22_ENRXFFAFULL | RH_RF22_ENPKSENT | RH_RF22_ENPKVALID | RH_RF22_ENCRCERROR | RH_RF22_ENFFERR, RH_RF22_ENPREAVAL};
 80024d0:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <_ZN5Rfm2216enableInterruptsEv+0x2c>)
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	8812      	ldrh	r2, [r2, #0]
 80024d8:	801a      	strh	r2, [r3, #0]
	spi.writeRegBytes(RH_RF22_REG_05_INTERRUPT_ENABLE1,data,2);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6858      	ldr	r0, [r3, #4]
 80024de:	f107 020c 	add.w	r2, r7, #12
 80024e2:	2302      	movs	r3, #2
 80024e4:	2105      	movs	r1, #5
 80024e6:	f000 f997 	bl	8002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>

}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	08003718 	.word	0x08003718

080024f8 <_ZN5Rfm2210irqHandlerEv>:

void Rfm22::irqHandler(){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

    // Read the interrupt flags which clears the interrupt
    spi.readRegBytes(RH_RF22_REG_03_INTERRUPT_STATUS1, _lastInterruptFlags, 2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6858      	ldr	r0, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f103 0247 	add.w	r2, r3, #71	; 0x47
 800250a:	2302      	movs	r3, #2
 800250c:	2103      	movs	r1, #3
 800250e:	f000 fa25 	bl	800295c <_ZN10SpiGeneric12readRegBytesEhPhh>

    if (_lastInterruptFlags[0] & RH_RF22_IFFERROR){
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002518:	b25b      	sxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	da11      	bge.n	8002542 <_ZN5Rfm2210irqHandlerEv+0x4a>
    	resetFifos(); // Clears the interrupt
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff feec 	bl	80022fc <_ZN5Rfm2210resetFifosEv>
    	if (currentMode == Rfm22ModeTx )
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7a1b      	ldrb	r3, [r3, #8]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d103      	bne.n	8002534 <_ZN5Rfm2210irqHandlerEv+0x3c>
    	    restartTransmit();
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff fefb 	bl	8002328 <_ZN5Rfm2215restartTransmitEv>
 8002532:	e006      	b.n	8002542 <_ZN5Rfm2210irqHandlerEv+0x4a>
    	else if (currentMode == Rfm22ModeRx)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7a1b      	ldrb	r3, [r3, #8]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d102      	bne.n	8002542 <_ZN5Rfm2210irqHandlerEv+0x4a>
    	    clearRxBuf();
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff05 	bl	800234c <_ZN5Rfm2210clearRxBufEv>
    }
        // Caution, any delay here may cause a FF underflow or overflow
    if (_lastInterruptFlags[0] & RH_RF22_ITXFFAEM){
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <_ZN5Rfm2210irqHandlerEv+0x5e>
        	// See if more data has to be loaded into the Tx FIFO
        	sendNextFragment();
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fe87 	bl	8002264 <_ZN5Rfm2216sendNextFragmentEv>
    }
    if (_lastInterruptFlags[0] & RH_RF22_IRXFFAFULL){
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <_ZN5Rfm2210irqHandlerEv+0x72>
    	// Caution, any delay here may cause a FF overflow
    	// Read some data from the Rx FIFO
    	readNextFragment();
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fea9 	bl	80022bc <_ZN5Rfm2216readNextFragmentEv>
    }
    if (_lastInterruptFlags[0] & RH_RF22_IPKSENT){
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <_ZN5Rfm2210irqHandlerEv+0x86>
    //	Serial.println("IPKSENT");
    	// Transmission does not automatically clear the tx buffer.
    	// Could retransmit if we wanted
    	// RH_RF22 transitions automatically to Idle
    	currentMode = Rfm22ModeIdle;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	721a      	strb	r2, [r3, #8]
    }
    if (_lastInterruptFlags[0] & RH_RF22_IPKVALID){
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d058      	beq.n	800263e <_ZN5Rfm2210irqHandlerEv+0x146>
    	uint8_t len = spi.readReg(RH_RF22_REG_4B_RECEIVED_PACKET_LENGTH);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	214b      	movs	r1, #75	; 0x4b
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f9ae 	bl	80028f4 <_ZN10SpiGeneric7readRegEh>
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]

    	// May have already read one or more fragments
    	// Get any remaining unread octets, based on the expected length
    	// First make sure we dont overflow the buffer in the case of a stupid length
    	// or partial bad receives
    	if (   len >  RH_RF22_MAX_MESSAGE_LEN
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b32      	cmp	r3, #50	; 0x32
 80025a0:	d804      	bhi.n	80025ac <_ZN5Rfm2210irqHandlerEv+0xb4>
    	    || len < _bufLen)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7c9b      	ldrb	r3, [r3, #18]
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d206      	bcs.n	80025ba <_ZN5Rfm2210irqHandlerEv+0xc2>
    	{
    	    currentMode = Rfm22ModeIdle;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	721a      	strb	r2, [r3, #8]
    	    clearRxBuf();
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff feca 	bl	800234c <_ZN5Rfm2210clearRxBufEv>
    	    return; // Hmmm receiver buffer overflow.
 80025b8:	e063      	b.n	8002682 <_ZN5Rfm2210irqHandlerEv+0x18a>
    	}

    	spi.readRegBytes(RH_RF22_REG_7F_FIFO_ACCESS, _buf + _bufLen, len - _bufLen);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6858      	ldr	r0, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3314      	adds	r3, #20
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	7c92      	ldrb	r2, [r2, #18]
 80025c6:	1899      	adds	r1, r3, r2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7c9b      	ldrb	r3, [r3, #18]
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	460a      	mov	r2, r1
 80025d4:	217f      	movs	r1, #127	; 0x7f
 80025d6:	f000 f9c1 	bl	800295c <_ZN10SpiGeneric12readRegBytesEhPhh>
    	_rxHeaderTo = spi.readReg(RH_RF22_REG_47_RECEIVED_HEADER3);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2147      	movs	r1, #71	; 0x47
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f987 	bl	80028f4 <_ZN10SpiGeneric7readRegEh>
 80025e6:	4603      	mov	r3, r0
 80025e8:	461a      	mov	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	735a      	strb	r2, [r3, #13]
    	_rxHeaderFrom = spi.readReg(RH_RF22_REG_48_RECEIVED_HEADER2);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2148      	movs	r1, #72	; 0x48
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f97d 	bl	80028f4 <_ZN10SpiGeneric7readRegEh>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	739a      	strb	r2, [r3, #14]
    	_rxHeaderId = spi.readReg(RH_RF22_REG_49_RECEIVED_HEADER1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2149      	movs	r1, #73	; 0x49
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f973 	bl	80028f4 <_ZN10SpiGeneric7readRegEh>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	73da      	strb	r2, [r3, #15]
    	_rxHeaderFlags = spi.readReg(RH_RF22_REG_4A_RECEIVED_HEADER0);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	214a      	movs	r1, #74	; 0x4a
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f969 	bl	80028f4 <_ZN10SpiGeneric7readRegEh>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	741a      	strb	r2, [r3, #16]
    	_bufLen = len;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	749a      	strb	r2, [r3, #18]
    	_rxBufValid = true;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    	currentMode = Rfm22ModeIdle;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	721a      	strb	r2, [r3, #8]
    	//_rxBufValid = true;
    }
    if (_lastInterruptFlags[0] & RH_RF22_ICRCERROR){
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <_ZN5Rfm2210irqHandlerEv+0x16c>
    //	Serial.println("ICRCERR");
    	clearRxBuf();
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff fe7d 	bl	800234c <_ZN5Rfm2210clearRxBufEv>
    	resetRxFifo();
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fc32 	bl	8001ebc <_ZN5Rfm2211resetRxFifoEv>
    	currentMode = Rfm22ModeIdle;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	721a      	strb	r2, [r3, #8]
    	setModeRx(); // Keep trying
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fbf0 	bl	8001e44 <_ZN5Rfm229setModeRxEv>
    }
    if (_lastInterruptFlags[1] & RH_RF22_IPREAVAL){
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <_ZN5Rfm2210irqHandlerEv+0x188>
    //	Serial.println("IPREAVAL");
    	//_lastRssi = (int8_t)(-120 + ((spiRead(RH_RF22_REG_26_RSSI) / 2)));
    	//_lastPreambleTime = millis();
    	resetRxFifo();
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fc22 	bl	8001ebc <_ZN5Rfm2211resetRxFifoEv>
    	clearRxBuf();
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fe67 	bl	800234c <_ZN5Rfm2210clearRxBufEv>
    }
    return;
 800267e:	bf00      	nop
 8002680:	bf00      	nop
}
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZN4Spi1C1Ev>:
 *      Author: Matejko
 */

#include <Spi1.h>

Spi1::Spi1() {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f8b0 	bl	80027f8 <_ZN10SpiGenericC1Ev>
 8002698:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <_ZN4Spi1C1Ev+0x20>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
}
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	08003928 	.word	0x08003928

080026ac <_ZN4Spi14initEv>:

void Spi1::init(){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;

		//inti Spi pins
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80026b4:	2101      	movs	r1, #1
 80026b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026ba:	f7ff f84b 	bl	8001754 <RCC_APB2PeriphClockCmd>
		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80026be:	2101      	movs	r1, #1
 80026c0:	2002      	movs	r0, #2
 80026c2:	f7ff f829 	bl	8001718 <RCC_AHBPeriphClockCmd>

		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80026d2:	2303      	movs	r3, #3
 80026d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		//PB3 - SPI2_SCK
		//PB4 - SPI2_MISO
		//PB5 - SPI2_MOSI
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
 80026de:	23e0      	movs	r3, #224	; 0xe0
 80026e0:	623b      	str	r3, [r7, #32]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 80026e2:	f107 0320 	add.w	r3, r7, #32
 80026e6:	4619      	mov	r1, r3
 80026e8:	482c      	ldr	r0, [pc, #176]	; (800279c <_ZN4Spi14initEv+0xf0>)
 80026ea:	f7fe fe15 	bl	8001318 <GPIO_Init>


		// init cs
		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80026ee:	2101      	movs	r1, #1
 80026f0:	2002      	movs	r0, #2
 80026f2:	f7ff f811 	bl	8001718 <RCC_AHBPeriphClockCmd>

		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8002708:	2340      	movs	r3, #64	; 0x40
 800270a:	623b      	str	r3, [r7, #32]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800270c:	2301      	movs	r3, #1
 800270e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002712:	f107 0320 	add.w	r3, r7, #32
 8002716:	4619      	mov	r1, r3
 8002718:	4821      	ldr	r0, [pc, #132]	; (80027a0 <_ZN4Spi14initEv+0xf4>)
 800271a:	f7fe fdfd 	bl	8001318 <GPIO_Init>
		GPIO_SetBits(GPIOB,GPIO_Pin_6);
 800271e:	2140      	movs	r1, #64	; 0x40
 8002720:	481f      	ldr	r0, [pc, #124]	; (80027a0 <_ZN4Spi14initEv+0xf4>)
 8002722:	f7fe fe8f 	bl	8001444 <GPIO_SetBits>
		//init Spi
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
 8002726:	2205      	movs	r2, #5
 8002728:	2105      	movs	r1, #5
 800272a:	481c      	ldr	r0, [pc, #112]	; (800279c <_ZN4Spi14initEv+0xf0>)
 800272c:	f7fe fea6 	bl	800147c <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
 8002730:	2205      	movs	r2, #5
 8002732:	2106      	movs	r1, #6
 8002734:	4819      	ldr	r0, [pc, #100]	; (800279c <_ZN4Spi14initEv+0xf0>)
 8002736:	f7fe fea1 	bl	800147c <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 800273a:	2205      	movs	r2, #5
 800273c:	2107      	movs	r1, #7
 800273e:	4817      	ldr	r0, [pc, #92]	; (800279c <_ZN4Spi14initEv+0xf0>)
 8002740:	f7fe fe9c 	bl	800147c <GPIO_PinAFConfig>

		SPI_InitTypeDef  SPI_InitStructure;
		SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8002744:	2308      	movs	r3, #8
 8002746:	833b      	strh	r3, [r7, #24]
		SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8002748:	2300      	movs	r3, #0
 800274a:	82bb      	strh	r3, [r7, #20]
		SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800274c:	2300      	movs	r3, #0
 800274e:	827b      	strh	r3, [r7, #18]
		SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 8002750:	2301      	movs	r3, #1
 8002752:	83bb      	strh	r3, [r7, #28]
		SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8002754:	2300      	movs	r3, #0
 8002756:	823b      	strh	r3, [r7, #16]
		SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002758:	2300      	movs	r3, #0
 800275a:	81bb      	strh	r3, [r7, #12]
		SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800275c:	2300      	movs	r3, #0
 800275e:	837b      	strh	r3, [r7, #26]
		SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8002760:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002764:	81fb      	strh	r3, [r7, #14]
		SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8002766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800276a:	82fb      	strh	r3, [r7, #22]

		/* Apply SPI configuration after enabling it */
		SPI_Init(SPI1, &SPI_InitStructure);
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	4619      	mov	r1, r3
 8002772:	480c      	ldr	r0, [pc, #48]	; (80027a4 <_ZN4Spi14initEv+0xf8>)
 8002774:	f7ff f85c 	bl	8001830 <SPI_Init>
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
		NVIC_Init(&NVIC_InitStructure);*/

		/* SPI Peripheral Enable */
		spi = SPI1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <_ZN4Spi14initEv+0xf8>)
 800277c:	605a      	str	r2, [r3, #4]
		cs = GPIO_Pin_6;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2240      	movs	r2, #64	; 0x40
 8002782:	811a      	strh	r2, [r3, #8]
		gpio_cs = GPIOB;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <_ZN4Spi14initEv+0xf4>)
 8002788:	60da      	str	r2, [r3, #12]
		SPI_Cmd(SPI1, ENABLE);
 800278a:	2101      	movs	r1, #1
 800278c:	4805      	ldr	r0, [pc, #20]	; (80027a4 <_ZN4Spi14initEv+0xf8>)
 800278e:	f7ff f893 	bl	80018b8 <SPI_Cmd>
}
 8002792:	bf00      	nop
 8002794:	3728      	adds	r7, #40	; 0x28
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40013000 	.word	0x40013000

080027a8 <_ZN4Spi1D1Ev>:

Spi1::~Spi1() {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <_ZN4Spi1D1Ev+0x2c>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f953 	bl	8002a64 <_ZN10SpiGenericD1Ev>
	// TODO Auto-generated destructor stub
}
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <_ZN4Spi1D1Ev+0x22>
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fe21 	bl	800340c <_ZdlPv>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	08003928 	.word	0x08003928

080027d8 <_ZN4Spi1D0Ev>:
		cs = GPIO_Pin_6;
		gpio_cs = GPIOB;
		SPI_Cmd(SPI1, ENABLE);
}

Spi1::~Spi1() {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ffe1 	bl	80027a8 <_ZN4Spi1D1Ev>
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fe10 	bl	800340c <_ZdlPv>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop

080027f8 <_ZN10SpiGenericC1Ev>:
 *      Author: Matejko
 */

#include <SpiGeneric.h>

SpiGeneric::SpiGeneric() {
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <_ZN10SpiGenericC1Ev+0x1c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	0800393c 	.word	0x0800393c

08002818 <_ZN10SpiGeneric13writeRegBytesEhPhh>:

void SpiGeneric::writeRegBytes(uint8_t reg,uint8_t* buf,uint8_t len){
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	461a      	mov	r2, r3
 8002824:	460b      	mov	r3, r1
 8002826:	72fb      	strb	r3, [r7, #11]
 8002828:	4613      	mov	r3, r2
 800282a:	72bb      	strb	r3, [r7, #10]

	GPIO_ResetBits(gpio_cs,cs);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	891b      	ldrh	r3, [r3, #8]
 8002834:	4619      	mov	r1, r3
 8002836:	4610      	mov	r0, r2
 8002838:	f7fe fe12 	bl	8001460 <GPIO_ResetBits>
	spi->DR = (reg | SPI_WRITE_FLAG);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	7afa      	ldrb	r2, [r7, #11]
 8002842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	b292      	uxth	r2, r2
 800284a:	819a      	strh	r2, [r3, #12]
	waitTxe();
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f8cb 	bl	80029e8 <_ZN10SpiGeneric7waitTxeEv>
	for(int i=0;i<len;i++){
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	7aba      	ldrb	r2, [r7, #10]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	429a      	cmp	r2, r3
 800285c:	dd0e      	ble.n	800287c <_ZN10SpiGeneric13writeRegBytesEhPhh+0x64>
		spi->DR = *(buf+i);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	440a      	add	r2, r1
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	b292      	uxth	r2, r2
 800286c:	819a      	strh	r2, [r3, #12]
		waitTxe();
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f8ba 	bl	80029e8 <_ZN10SpiGeneric7waitTxeEv>
void SpiGeneric::writeRegBytes(uint8_t reg,uint8_t* buf,uint8_t len){

	GPIO_ResetBits(gpio_cs,cs);
	spi->DR = (reg | SPI_WRITE_FLAG);
	waitTxe();
	for(int i=0;i<len;i++){
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3301      	adds	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e7ec      	b.n	8002856 <_ZN10SpiGeneric13writeRegBytesEhPhh+0x3e>
		spi->DR = *(buf+i);
		waitTxe();
	}
	GPIO_SetBits(gpio_cs,cs);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	891b      	ldrh	r3, [r3, #8]
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7fe fddc 	bl	8001444 <GPIO_SetBits>
}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_ZN10SpiGeneric8writeRegEhh>:

void SpiGeneric::writeReg(uint8_t reg,uint8_t val){
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
 80028a0:	4613      	mov	r3, r2
 80028a2:	70bb      	strb	r3, [r7, #2]
	GPIO_ResetBits(gpio_cs,cs);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	891b      	ldrh	r3, [r3, #8]
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f7fe fdd6 	bl	8001460 <GPIO_ResetBits>
	spi->DR = (reg | SPI_WRITE_FLAG);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	b292      	uxth	r2, r2
 80028c2:	819a      	strh	r2, [r3, #12]
	waitTxRx();
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f8a7 	bl	8002a18 <_ZN10SpiGeneric8waitTxRxEv>
	spi->DR = val;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	78ba      	ldrb	r2, [r7, #2]
 80028d0:	b292      	uxth	r2, r2
 80028d2:	819a      	strh	r2, [r3, #12]
	waitTxe();
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f887 	bl	80029e8 <_ZN10SpiGeneric7waitTxeEv>
	GPIO_SetBits(gpio_cs,cs);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	891b      	ldrh	r3, [r3, #8]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4610      	mov	r0, r2
 80028e6:	f7fe fdad 	bl	8001444 <GPIO_SetBits>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop

080028f4 <_ZN10SpiGeneric7readRegEh>:


uint8_t SpiGeneric::readReg(uint8_t reg){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
	GPIO_ResetBits(gpio_cs,cs);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	891b      	ldrh	r3, [r3, #8]
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f7fe fda8 	bl	8001460 <GPIO_ResetBits>
	spi->DR = (reg &~ SPI_WRITE_FLAG);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	b292      	uxth	r2, r2
 8002918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800291c:	b292      	uxth	r2, r2
 800291e:	819a      	strh	r2, [r3, #12]
	waitTxRx();
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f879 	bl	8002a18 <_ZN10SpiGeneric8waitTxRxEv>
	spi->DR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	899b      	ldrh	r3, [r3, #12]
	spi->DR = 0x00;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	819a      	strh	r2, [r3, #12]
	waitTxRx();
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f86f 	bl	8002a18 <_ZN10SpiGeneric8waitTxRxEv>
	GPIO_SetBits(gpio_cs,cs);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	891b      	ldrh	r3, [r3, #8]
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f7fe fd7d 	bl	8001444 <GPIO_SetBits>
	return  spi->DR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	899b      	ldrh	r3, [r3, #12]
 8002950:	b29b      	uxth	r3, r3
 8002952:	b2db      	uxtb	r3, r3


}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_ZN10SpiGeneric12readRegBytesEhPhh>:

void SpiGeneric::readRegBytes(uint8_t reg,uint8_t* buf,uint8_t len){
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	461a      	mov	r2, r3
 8002968:	460b      	mov	r3, r1
 800296a:	72fb      	strb	r3, [r7, #11]
 800296c:	4613      	mov	r3, r2
 800296e:	72bb      	strb	r3, [r7, #10]
	GPIO_ResetBits(gpio_cs,cs);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	891b      	ldrh	r3, [r3, #8]
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f7fe fd70 	bl	8001460 <GPIO_ResetBits>
	spi->DR = (reg &~ SPI_WRITE_FLAG);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	7afa      	ldrb	r2, [r7, #11]
 8002986:	b292      	uxth	r2, r2
 8002988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800298c:	b292      	uxth	r2, r2
 800298e:	819a      	strh	r2, [r3, #12]
	waitTxRx();
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f841 	bl	8002a18 <_ZN10SpiGeneric8waitTxRxEv>
	spi->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	899b      	ldrh	r3, [r3, #12]
	for(int i =0;i<len;i++){
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	7aba      	ldrb	r2, [r7, #10]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	dd13      	ble.n	80029d0 <_ZN10SpiGeneric12readRegBytesEhPhh+0x74>
		spi->DR = 0x00;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	819a      	strh	r2, [r3, #12]
		waitTxRx();
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f831 	bl	8002a18 <_ZN10SpiGeneric8waitTxRxEv>
		*(buf+i) = spi->DR;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	6852      	ldr	r2, [r2, #4]
 80029c0:	8992      	ldrh	r2, [r2, #12]
 80029c2:	b292      	uxth	r2, r2
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]
void SpiGeneric::readRegBytes(uint8_t reg,uint8_t* buf,uint8_t len){
	GPIO_ResetBits(gpio_cs,cs);
	spi->DR = (reg &~ SPI_WRITE_FLAG);
	waitTxRx();
	spi->DR;
	for(int i =0;i<len;i++){
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e7e7      	b.n	80029a0 <_ZN10SpiGeneric12readRegBytesEhPhh+0x44>
		spi->DR = 0x00;
		waitTxRx();
		*(buf+i) = spi->DR;
	}
	GPIO_SetBits(gpio_cs,cs);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	891b      	ldrh	r3, [r3, #8]
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f7fe fd32 	bl	8001444 <GPIO_SetBits>
}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_ZN10SpiGeneric7waitTxeEv>:

void SpiGeneric::waitRxne(){
	while(!(spi->SR & SPI_I2S_FLAG_RXNE));
}

void SpiGeneric::waitTxe(){
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	while(!(spi->SR & SPI_I2S_FLAG_RXNE));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	891b      	ldrh	r3, [r3, #8]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d000      	beq.n	8002a0c <_ZN10SpiGeneric7waitTxeEv+0x24>
 8002a0a:	e7f1      	b.n	80029f0 <_ZN10SpiGeneric7waitTxeEv+0x8>
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop

08002a18 <_ZN10SpiGeneric8waitTxRxEv>:
void SpiGeneric::waitTxRx(){
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	while(!(spi->SR & SPI_I2S_FLAG_RXNE));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	891b      	ldrh	r3, [r3, #8]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d000      	beq.n	8002a3c <_ZN10SpiGeneric8waitTxRxEv+0x24>
 8002a3a:	e7f1      	b.n	8002a20 <_ZN10SpiGeneric8waitTxRxEv+0x8>
	while(!(spi->SR & SPI_I2S_FLAG_RXNE));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	891b      	ldrh	r3, [r3, #8]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d000      	beq.n	8002a58 <_ZN10SpiGeneric8waitTxRxEv+0x40>
 8002a56:	e7f1      	b.n	8002a3c <_ZN10SpiGeneric8waitTxRxEv+0x24>
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop

08002a64 <_ZN10SpiGenericD1Ev>:

SpiGeneric::~SpiGeneric() {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <_ZN10SpiGenericD1Ev+0x24>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <_ZN10SpiGenericD1Ev+0x1a>
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fcc7 	bl	800340c <_ZdlPv>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	0800393c 	.word	0x0800393c

08002a8c <_Z13sysClockSetupv>:
 *  Created on: Dec 10, 2016
 *      Author: Matejko
 */
#include <basicSetup.h>

void sysClockSetup(){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	RCC_HSICmd(ENABLE);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7fe fd3b 	bl	800150c <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8002a96:	2021      	movs	r0, #33	; 0x21
 8002a98:	f7fe fe98 	bl	80017cc <RCC_GetFlagStatus>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d000      	beq.n	8002aae <_Z13sysClockSetupv+0x22>
 8002aac:	e7f3      	b.n	8002a96 <_Z13sysClockSetupv+0xa>

	RCC_SYSCLKConfig(RCC_CFGR_SW_HSI);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f7fe fd3c 	bl	800152c <RCC_SYSCLKConfig>
	SystemCoreClockUpdate();
 8002ab4:	f000 fb54 	bl	8003160 <SystemCoreClockUpdate>
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZN6Usart2C1Ev>:
 *      Author: Matejko
 */

#include <Usart2.h>

Usart2::Usart2() {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f89c 	bl	8002c04 <_ZN12UsartGenericC1Ev>
 8002acc:	4a03      	ldr	r2, [pc, #12]	; (8002adc <_ZN6Usart2C1Ev+0x20>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	08003950 	.word	0x08003950

08002ae0 <_ZN6Usart2D1Ev>:

Usart2::~Usart2() {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <_ZN6Usart2D1Ev+0x2c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f9b3 	bl	8002e5c <_ZN12UsartGenericD1Ev>
	// TODO Auto-generated destructor stub
}
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <_ZN6Usart2D1Ev+0x22>
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fc85 	bl	800340c <_ZdlPv>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08003950 	.word	0x08003950

08002b10 <_ZN6Usart2D0Ev>:
Usart2::Usart2() {
	// TODO Auto-generated constructor stub

}

Usart2::~Usart2() {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ffe1 	bl	8002ae0 <_ZN6Usart2D1Ev>
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fc74 	bl	800340c <_ZdlPv>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop

08002b30 <_ZN6Usart24initEv>:

void Usart2::init(){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

	//enable output pins pherifery
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f7fe fdec 	bl	8001718 <RCC_AHBPeriphClockCmd>

	//configure pins
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8002b40:	2207      	movs	r2, #7
 8002b42:	2102      	movs	r1, #2
 8002b44:	482d      	ldr	r0, [pc, #180]	; (8002bfc <_ZN6Usart24initEv+0xcc>)
 8002b46:	f7fe fc99 	bl	800147c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	2103      	movs	r1, #3
 8002b4e:	482b      	ldr	r0, [pc, #172]	; (8002bfc <_ZN6Usart24initEv+0xcc>)
 8002b50:	f7fe fc94 	bl	800147c <GPIO_PinAFConfig>
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 |  GPIO_Pin_3;
 8002b54:	230c      	movs	r3, #12
 8002b56:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002b70:	f107 0320 	add.w	r3, r7, #32
 8002b74:	4619      	mov	r1, r3
 8002b76:	4821      	ldr	r0, [pc, #132]	; (8002bfc <_ZN6Usart24initEv+0xcc>)
 8002b78:	f7fe fbce 	bl	8001318 <GPIO_Init>

	//enable uusart pherifery
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b82:	f7fe fe05 	bl	8001790 <RCC_APB1PeriphClockCmd>

	//configure usart
	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 8002b86:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002b8a:	613b      	str	r3, [r7, #16]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	82fb      	strh	r3, [r7, #22]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8002b94:	2300      	movs	r3, #0
 8002b96:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	83bb      	strh	r3, [r7, #28]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002b9c:	230c      	movs	r3, #12
 8002b9e:	837b      	strh	r3, [r7, #26]
	USART_Init(USART2, &USART_InitStructure);
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4816      	ldr	r0, [pc, #88]	; (8002c00 <_ZN6Usart24initEv+0xd0>)
 8002ba8:	f7fe ff22 	bl	80019f0 <USART_Init>


	//enable usart interrupts
	USART_ClearFlag(USART2,USART_FLAG_TC);
 8002bac:	2140      	movs	r1, #64	; 0x40
 8002bae:	4814      	ldr	r0, [pc, #80]	; (8002c00 <_ZN6Usart24initEv+0xd0>)
 8002bb0:	f7ff f878 	bl	8001ca4 <USART_ClearFlag>
	USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f240 6126 	movw	r1, #1574	; 0x626
 8002bba:	4811      	ldr	r0, [pc, #68]	; (8002c00 <_ZN6Usart24initEv+0xd0>)
 8002bbc:	f7ff f80e 	bl	8001bdc <USART_ITConfig>
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f240 5125 	movw	r1, #1317	; 0x525
 8002bc6:	480e      	ldr	r0, [pc, #56]	; (8002c00 <_ZN6Usart24initEv+0xd0>)
 8002bc8:	f7ff f808 	bl	8001bdc <USART_ITConfig>

	//configure nvic
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8002bcc:	2326      	movs	r3, #38	; 0x26
 8002bce:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 8;
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fa95 	bl	8001110 <NVIC_Init>

	usart = USART2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <_ZN6Usart24initEv+0xd0>)
 8002bea:	605a      	str	r2, [r3, #4]
	//turn on usart
	USART_Cmd(USART2,ENABLE);
 8002bec:	2101      	movs	r1, #1
 8002bee:	4804      	ldr	r0, [pc, #16]	; (8002c00 <_ZN6Usart24initEv+0xd0>)
 8002bf0:	f7fe ffb2 	bl	8001b58 <USART_Cmd>

}
 8002bf4:	bf00      	nop
 8002bf6:	3728      	adds	r7, #40	; 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	40004400 	.word	0x40004400

08002c04 <_ZN12UsartGenericC1Ev>:
 *      Author: Matejko
 */

#include <UsartGeneric.h>

UsartGeneric::UsartGeneric() : usart_write_buffer_it(0), usart_send_it(0), usart_read_buffer_it(0), usart_read_it(0){
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <_ZN12UsartGenericC1Ev+0x38>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	721a      	strb	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	725a      	strb	r2, [r3, #9]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	// TODO Auto-generated constructor stub

}
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	0800397c 	.word	0x0800397c

08002c40 <_ZN12UsartGeneric4readEPhh>:

uint8_t UsartGeneric::read(uint8_t* data,uint8_t len){
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<len;i++){
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	79fa      	ldrb	r2, [r7, #7]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	dd2c      	ble.n	8002cb4 <_ZN12UsartGeneric4readEPhh+0x74>
		if(usart_read_it==usart_read_buffer_it)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	2300      	movne	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <_ZN12UsartGeneric4readEPhh+0x3e>
			return i;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	e01b      	b.n	8002cb6 <_ZN12UsartGeneric4readEPhh+0x76>
		*(data+i) = usart_read_buffer[usart_read_it];
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	4413      	add	r3, r2
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	f892 210a 	ldrb.w	r2, [r2, #266]	; 0x10a
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	440a      	add	r2, r1
 8002c92:	f892 210c 	ldrb.w	r2, [r2, #268]	; 0x10c
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]
		usart_read_it++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	// TODO Auto-generated constructor stub

}

uint8_t UsartGeneric::read(uint8_t* data,uint8_t len){
	for(int i=0;i<len;i++){
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e7ce      	b.n	8002c52 <_ZN12UsartGeneric4readEPhh+0x12>
		if(usart_read_it==usart_read_buffer_it)
			return i;
		*(data+i) = usart_read_buffer[usart_read_it];
		usart_read_it++;
	}
	return len;
 8002cb4:	79fb      	ldrb	r3, [r7, #7]

}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <_ZN12UsartGeneric5writeEPhh>:
void UsartGeneric::write(uint8_t* data,uint8_t len){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	71fb      	strb	r3, [r7, #7]
	for(uint8_t  i= 0;i<len;i++){
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]
 8002cd2:	7dfa      	ldrb	r2, [r7, #23]
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d215      	bcs.n	8002d06 <_ZN12UsartGeneric5writeEPhh+0x46>
			usart_write_buffer[usart_write_buffer_it] = *(data+i);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	7a5b      	ldrb	r3, [r3, #9]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	440b      	add	r3, r1
 8002cee:	729a      	strb	r2, [r3, #10]
			usart_write_buffer_it ++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	7a5b      	ldrb	r3, [r3, #9]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	725a      	strb	r2, [r3, #9]
	}
	return len;

}
void UsartGeneric::write(uint8_t* data,uint8_t len){
	for(uint8_t  i= 0;i<len;i++){
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	3301      	adds	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
 8002d04:	e7e5      	b.n	8002cd2 <_ZN12UsartGeneric5writeEPhh+0x12>
			usart_write_buffer[usart_write_buffer_it] = *(data+i);
			usart_write_buffer_it ++;
		}
		initWrite(len);
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f8ba 	bl	8002e84 <_ZN12UsartGeneric9initWriteEh>

}
 8002d10:	bf00      	nop
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZN12UsartGeneric14availableBytesEv>:
uint8_t UsartGeneric::availableBytes(){
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	return (usart_read_buffer_it - usart_read_it);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	b2db      	uxtb	r3, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop

08002d40 <_ZN12UsartGeneric5flushEv>:
void UsartGeneric::flush(){
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	usart_send_it = usart_write_buffer_it;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7a5b      	ldrb	r3, [r3, #9]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	721a      	strb	r2, [r3, #8]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <_ZN12UsartGeneric13writableBytesEv>:

uint8_t UsartGeneric::writableBytes(){
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
		return (usart_write_buffer_it - usart_send_it);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7a5b      	ldrb	r3, [r3, #9]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7a1b      	ldrb	r3, [r3, #8]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop

08002d80 <_ZN12UsartGeneric10irqHandlerEv>:

void UsartGeneric::irqHandler (void) {
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

	if(USART_GetFlagStatus(usart, USART_FLAG_RXNE) == SET){
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2120      	movs	r1, #32
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe ff6c 	bl	8001c6c <USART_GetFlagStatus>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	bf0c      	ite	eq
 8002d9a:	2301      	moveq	r3, #1
 8002d9c:	2300      	movne	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01f      	beq.n	8002de4 <_ZN12UsartGeneric10irqHandlerEv+0x64>
		usart_read_buffer[usart_read_buffer_it] = USART_ReceiveData(usart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461c      	mov	r4, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe ff02 	bl	8001bbc <USART_ReceiveData>
 8002db8:	4603      	mov	r3, r0
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4423      	add	r3, r4
 8002dc0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		USART_ClearFlag(usart, USART_FLAG_RXNE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2120      	movs	r1, #32
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe ff6a 	bl	8001ca4 <USART_ClearFlag>
		usart_read_buffer_it++;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
		return;
 8002de2:	e038      	b.n	8002e56 <_ZN12UsartGeneric10irqHandlerEv+0xd6>
	}
	if(USART_GetFlagStatus(usart,USART_FLAG_TC) == SET){
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2140      	movs	r1, #64	; 0x40
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe ff3e 	bl	8001c6c <USART_GetFlagStatus>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d02a      	beq.n	8002e56 <_ZN12UsartGeneric10irqHandlerEv+0xd6>
		USART_ClearFlag(usart,USART_FLAG_TC);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2140      	movs	r1, #64	; 0x40
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe ff4c 	bl	8001ca4 <USART_ClearFlag>
		if(usart_send_it != usart_write_buffer_it){
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7a1b      	ldrb	r3, [r3, #8]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7a5b      	ldrb	r3, [r3, #9]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <_ZN12UsartGeneric10irqHandlerEv+0xd4>
			USART_SendData(usart,usart_write_buffer[usart_send_it]);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7a1b      	ldrb	r3, [r3, #8]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	440b      	add	r3, r1
 8002e36:	7a9b      	ldrb	r3, [r3, #10]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7fe feaa 	bl	8001b98 <USART_SendData>
			usart_send_it++;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7a1b      	ldrb	r3, [r3, #8]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	721a      	strb	r2, [r3, #8]
		}
		return;
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
	}
}
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <_ZN12UsartGenericD1Ev>:

UsartGeneric::~UsartGeneric() {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	4a06      	ldr	r2, [pc, #24]	; (8002e80 <_ZN12UsartGenericD1Ev+0x24>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <_ZN12UsartGenericD1Ev+0x1a>
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 facb 	bl	800340c <_ZdlPv>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	0800397c 	.word	0x0800397c

08002e84 <_ZN12UsartGeneric9initWriteEh>:
 * Private function
 *
 * */


void UsartGeneric::initWrite(uint8_t new_bytes){
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
	if(!(writableBytes() - new_bytes )){
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3314      	adds	r3, #20
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <_ZN12UsartGeneric9initWriteEh+0x58>
		USART_SendData(usart,usart_write_buffer[usart_send_it]);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7a1b      	ldrb	r3, [r3, #8]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	4619      	mov	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	440b      	add	r3, r1
 8002ec0:	7a9b      	ldrb	r3, [r3, #10]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f7fe fe65 	bl	8001b98 <USART_SendData>
		usart_send_it++;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7a1b      	ldrb	r3, [r3, #8]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	721a      	strb	r2, [r3, #8]
	}
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <main>:
Usart2 usart;
Spi1 spi;
Rfm22 rf(spi);
uint8_t data[2];

int main(void){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
  *  To reconfigure the default setting of SystemInit() function, refer to
  *  system_stm32l1xx.c file
  */

	//setup core frequency
	sysClockSetup();
 8002eea:	f7ff fdcf 	bl	8002a8c <_Z13sysClockSetupv>

	//setup nvic priority
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8002eee:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002ef2:	f7fe f8fb 	bl	80010ec <NVIC_PriorityGroupConfig>

	//setup receiver
	rf.init();
 8002ef6:	480f      	ldr	r0, [pc, #60]	; (8002f34 <main+0x50>)
 8002ef8:	f7fe ff10 	bl	8001d1c <_ZN5Rfm224initEv>

	//setup usart
	usart.init();
 8002efc:	480e      	ldr	r0, [pc, #56]	; (8002f38 <main+0x54>)
 8002efe:	f7ff fe17 	bl	8002b30 <_ZN6Usart24initEv>
	uint8_t buf[2];
	data[0] = 'i';
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <main+0x58>)
 8002f04:	2269      	movs	r2, #105	; 0x69
 8002f06:	701a      	strb	r2, [r3, #0]
	data[1] = 't';
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <main+0x58>)
 8002f0a:	2274      	movs	r2, #116	; 0x74
 8002f0c:	705a      	strb	r2, [r3, #1]
	/* Infinite loop */
  while (1)
  {
		if(rf.available()){
 8002f0e:	4809      	ldr	r0, [pc, #36]	; (8002f34 <main+0x50>)
 8002f10:	f7ff fa58 	bl	80023c4 <_ZN5Rfm229availableEv>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f9      	beq.n	8002f0e <main+0x2a>
			rf.recv(buf,2);
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4804      	ldr	r0, [pc, #16]	; (8002f34 <main+0x50>)
 8002f22:	f7ff fa23 	bl	800236c <_ZN5Rfm224recvEPhh>
			usart.write(data,2);
 8002f26:	2202      	movs	r2, #2
 8002f28:	4904      	ldr	r1, [pc, #16]	; (8002f3c <main+0x58>)
 8002f2a:	4803      	ldr	r0, [pc, #12]	; (8002f38 <main+0x54>)
 8002f2c:	f7ff fec8 	bl	8002cc0 <_ZN12UsartGeneric5writeEPhh>
	usart.init();
	uint8_t buf[2];
	data[0] = 'i';
	data[1] = 't';
	/* Infinite loop */
  while (1)
 8002f30:	e7ed      	b.n	8002f0e <main+0x2a>
 8002f32:	bf00      	nop
 8002f34:	200002e0 	.word	0x200002e0
 8002f38:	200000c4 	.word	0x200000c4
 8002f3c:	2000032c 	.word	0x2000032c

08002f40 <USART2_IRQHandler>:
  {
  }
}
#endif

extern "C" void USART2_IRQHandler (void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	usart.irqHandler();
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <USART2_IRQHandler+0x10>)
 8002f46:	f7ff ff1b 	bl	8002d80 <_ZN12UsartGeneric10irqHandlerEv>
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200000c4 	.word	0x200000c4

08002f54 <EXTI15_10_IRQHandler>:

extern "C" void EXTI15_10_IRQHandler(void) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line10) != RESET) {
 8002f58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f5c:	f7fe f9aa 	bl	80012b4 <EXTI_GetITStatus>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <EXTI15_10_IRQHandler+0x34>
        EXTI_ClearITPendingBit(EXTI_Line10);
 8002f70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f74:	f7fe f9c2 	bl	80012fc <EXTI_ClearITPendingBit>
        rf.irqHandler();
 8002f78:	4804      	ldr	r0, [pc, #16]	; (8002f8c <EXTI15_10_IRQHandler+0x38>)
 8002f7a:	f7ff fabd 	bl	80024f8 <_ZN5Rfm2210irqHandlerEv>
        usart.write(data,2);
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4903      	ldr	r1, [pc, #12]	; (8002f90 <EXTI15_10_IRQHandler+0x3c>)
 8002f82:	4804      	ldr	r0, [pc, #16]	; (8002f94 <EXTI15_10_IRQHandler+0x40>)
 8002f84:	f7ff fe9c 	bl	8002cc0 <_ZN12UsartGeneric5writeEPhh>
    }
}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200002e0 	.word	0x200002e0
 8002f90:	2000032c 	.word	0x2000032c
 8002f94:	200000c4 	.word	0x200000c4

08002f98 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fa2:	f7fe fceb 	bl	800197c <TIM_GetITStatus>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <TIM2_IRQHandler+0x2a>

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fbc:	f7fe fd08 	bl	80019d0 <TIM_ClearITPendingBit>
	}

	return;
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop

}
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop

08002fc8 <_Z41__static_initialization_and_destruction_0ii>:
 * Minimal __assert() uses __assert__func()
 * */
extern "C" void __assert(const char *file, int line, const char *failedexpr)
{
   __assert_func (file, line, NULL, failedexpr);
}
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d11d      	bne.n	8003014 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d118      	bne.n	8003014 <_Z41__static_initialization_and_destruction_0ii+0x4c>
**
**  Abstract: main program
**
**===========================================================================
*/
Usart2 usart;
 8002fe2:	480e      	ldr	r0, [pc, #56]	; (800301c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002fe4:	f7ff fd6a 	bl	8002abc <_ZN6Usart2C1Ev>
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002fea:	490e      	ldr	r1, [pc, #56]	; (8003024 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002fec:	480b      	ldr	r0, [pc, #44]	; (800301c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002fee:	f000 fa08 	bl	8003402 <__aeabi_atexit>
Spi1 spi;
 8002ff2:	480d      	ldr	r0, [pc, #52]	; (8003028 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002ff4:	f7ff fb48 	bl	8002688 <_ZN4Spi1C1Ev>
 8002ff8:	4a09      	ldr	r2, [pc, #36]	; (8003020 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002ffa:	490c      	ldr	r1, [pc, #48]	; (800302c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002ffc:	480a      	ldr	r0, [pc, #40]	; (8003028 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002ffe:	f000 fa00 	bl	8003402 <__aeabi_atexit>
Rfm22 rf(spi);
 8003002:	4909      	ldr	r1, [pc, #36]	; (8003028 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003004:	480a      	ldr	r0, [pc, #40]	; (8003030 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003006:	f7fe fe5d 	bl	8001cc4 <_ZN5Rfm22C1ER10SpiGeneric>
 800300a:	4a05      	ldr	r2, [pc, #20]	; (8003020 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800300c:	4909      	ldr	r1, [pc, #36]	; (8003034 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800300e:	4808      	ldr	r0, [pc, #32]	; (8003030 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003010:	f000 f9f7 	bl	8003402 <__aeabi_atexit>
 * Minimal __assert() uses __assert__func()
 * */
extern "C" void __assert(const char *file, int line, const char *failedexpr)
{
   __assert_func (file, line, NULL, failedexpr);
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200000c4 	.word	0x200000c4
 8003020:	20000000 	.word	0x20000000
 8003024:	08002ae1 	.word	0x08002ae1
 8003028:	200002d0 	.word	0x200002d0
 800302c:	080027a9 	.word	0x080027a9
 8003030:	200002e0 	.word	0x200002e0
 8003034:	080023f5 	.word	0x080023f5

08003038 <_GLOBAL__sub_I_usart>:
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
 800303c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003040:	2001      	movs	r0, #1
 8003042:	f7ff ffc1 	bl	8002fc8 <_Z41__static_initialization_and_destruction_0ii>
 8003046:	bd80      	pop	{r7, pc}

08003048 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800304c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800304e:	e003      	b.n	8003058 <LoopCopyDataInit>

08003050 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8003052:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003054:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003056:	3104      	adds	r1, #4

08003058 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003058:	480b      	ldr	r0, [pc, #44]	; (8003088 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 800305c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800305e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003060:	d3f6      	bcc.n	8003050 <CopyDataInit>
  ldr r2, =_sbss
 8003062:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8003064:	e002      	b.n	800306c <LoopFillZerobss>

08003066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003068:	f842 3b04 	str.w	r3, [r2], #4

0800306c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800306e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003070:	d3f9      	bcc.n	8003066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003072:	f000 f841 	bl	80030f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003076:	f000 fa61 	bl	800353c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800307a:	f7ff ff33 	bl	8002ee4 <main>
  bx lr
 800307e:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003080:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8003084:	080039b0 	.word	0x080039b0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8003088:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800308c:	200000a8 	.word	0x200000a8
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8003090:	200000a8 	.word	0x200000a8
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8003094:	20000338 	.word	0x20000338

08003098 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003098:	e7fe      	b.n	8003098 <ADC1_IRQHandler>
	...

0800309c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80030ac:	e7fe      	b.n	80030ac <HardFault_Handler+0x4>
 80030ae:	bf00      	nop

080030b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80030b4:	e7fe      	b.n	80030b4 <MemManage_Handler+0x4>
 80030b6:	bf00      	nop

080030b8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80030bc:	e7fe      	b.n	80030bc <BusFault_Handler+0x4>
 80030be:	bf00      	nop

080030c0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80030c4:	e7fe      	b.n	80030c4 <UsageFault_Handler+0x4>
 80030c6:	bf00      	nop

080030c8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80030fc:	4a15      	ldr	r2, [pc, #84]	; (8003154 <SystemInit+0x5c>)
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <SystemInit+0x5c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8003108:	4912      	ldr	r1, [pc, #72]	; (8003154 <SystemInit+0x5c>)
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <SystemInit+0x5c>)
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <SystemInit+0x60>)
 8003110:	4013      	ands	r3, r2
 8003112:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8003114:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <SystemInit+0x5c>)
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <SystemInit+0x5c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800311e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8003122:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <SystemInit+0x5c>)
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <SystemInit+0x5c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8003130:	4a08      	ldr	r2, [pc, #32]	; (8003154 <SystemInit+0x5c>)
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <SystemInit+0x5c>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800313a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <SystemInit+0x5c>)
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8003142:	f000 f8b9 	bl	80032b8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <SystemInit+0x64>)
 8003148:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800314c:	609a      	str	r2, [r3, #8]
#endif
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	88ffc00c 	.word	0x88ffc00c
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <SystemCoreClockUpdate+0x140>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d864      	bhi.n	8003254 <SystemCoreClockUpdate+0xf4>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <SystemCoreClockUpdate+0x30>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031c5 	.word	0x080031c5
 8003194:	08003255 	.word	0x08003255
 8003198:	08003255 	.word	0x08003255
 800319c:	08003255 	.word	0x08003255
 80031a0:	080031e5 	.word	0x080031e5
 80031a4:	08003255 	.word	0x08003255
 80031a8:	08003255 	.word	0x08003255
 80031ac:	08003255 	.word	0x08003255
 80031b0:	080031ed 	.word	0x080031ed
 80031b4:	08003255 	.word	0x08003255
 80031b8:	08003255 	.word	0x08003255
 80031bc:	08003255 	.word	0x08003255
 80031c0:	080031f5 	.word	0x080031f5
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 80031c4:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <SystemCoreClockUpdate+0x140>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80031cc:	0b5b      	lsrs	r3, r3, #13
 80031ce:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3301      	adds	r3, #1
 80031d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	4b31      	ldr	r3, [pc, #196]	; (80032a4 <SystemCoreClockUpdate+0x144>)
 80031e0:	601a      	str	r2, [r3, #0]
      break;
 80031e2:	e047      	b.n	8003274 <SystemCoreClockUpdate+0x114>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80031e4:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <SystemCoreClockUpdate+0x144>)
 80031e6:	4a30      	ldr	r2, [pc, #192]	; (80032a8 <SystemCoreClockUpdate+0x148>)
 80031e8:	601a      	str	r2, [r3, #0]
      break;
 80031ea:	e043      	b.n	8003274 <SystemCoreClockUpdate+0x114>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <SystemCoreClockUpdate+0x144>)
 80031ee:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <SystemCoreClockUpdate+0x14c>)
 80031f0:	601a      	str	r2, [r3, #0]
      break;
 80031f2:	e03f      	b.n	8003274 <SystemCoreClockUpdate+0x114>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <SystemCoreClockUpdate+0x140>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031fc:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80031fe:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <SystemCoreClockUpdate+0x140>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003206:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	0c9b      	lsrs	r3, r3, #18
 800320c:	4a28      	ldr	r2, [pc, #160]	; (80032b0 <SystemCoreClockUpdate+0x150>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	0d9b      	lsrs	r3, r3, #22
 8003218:	3301      	adds	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <SystemCoreClockUpdate+0x140>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003224:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <SystemCoreClockUpdate+0xe0>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4a1e      	ldr	r2, [pc, #120]	; (80032a8 <SystemCoreClockUpdate+0x148>)
 8003230:	fb02 f203 	mul.w	r2, r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4a1a      	ldr	r2, [pc, #104]	; (80032a4 <SystemCoreClockUpdate+0x144>)
 800323c:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800323e:	e019      	b.n	8003274 <SystemCoreClockUpdate+0x114>
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <SystemCoreClockUpdate+0x14c>)
 8003244:	fb02 f203 	mul.w	r2, r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <SystemCoreClockUpdate+0x144>)
 8003250:	6013      	str	r3, [r2, #0]
      }
      break;
 8003252:	e00f      	b.n	8003274 <SystemCoreClockUpdate+0x114>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8003254:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <SystemCoreClockUpdate+0x140>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800325c:	0b5b      	lsrs	r3, r3, #13
 800325e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3301      	adds	r3, #1
 8003264:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	461a      	mov	r2, r3
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <SystemCoreClockUpdate+0x144>)
 8003270:	601a      	str	r2, [r3, #0]
      break;
 8003272:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <SystemCoreClockUpdate+0x140>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <SystemCoreClockUpdate+0x154>)
 8003280:	5cd3      	ldrb	r3, [r2, r3]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <SystemCoreClockUpdate+0x144>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <SystemCoreClockUpdate+0x144>)
 8003292:	6013      	str	r3, [r2, #0]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	20000020 	.word	0x20000020
 80032a8:	00f42400 	.word	0x00f42400
 80032ac:	007a1200 	.word	0x007a1200
 80032b0:	20000024 	.word	0x20000024
 80032b4:	20000030 	.word	0x20000030

080032b8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	2300      	movs	r3, #0
 80032c4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80032c6:	4a41      	ldr	r2, [pc, #260]	; (80033cc <SetSysClock+0x114>)
 80032c8:	4b40      	ldr	r3, [pc, #256]	; (80033cc <SetSysClock+0x114>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80032d2:	4b3e      	ldr	r3, [pc, #248]	; (80033cc <SetSysClock+0x114>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3301      	adds	r3, #1
 80032e0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d103      	bne.n	80032f0 <SetSysClock+0x38>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032ee:	d1f0      	bne.n	80032d2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <SetSysClock+0x114>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80032fc:	2301      	movs	r3, #1
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	e001      	b.n	8003306 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003302:	2300      	movs	r3, #0
 8003304:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d15a      	bne.n	80033c2 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <SetSysClock+0x118>)
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <SetSysClock+0x118>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8003318:	4a2d      	ldr	r2, [pc, #180]	; (80033d0 <SetSysClock+0x118>)
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <SetSysClock+0x118>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8003324:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <SetSysClock+0x118>)
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <SetSysClock+0x118>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003330:	4a26      	ldr	r2, [pc, #152]	; (80033cc <SetSysClock+0x114>)
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <SetSysClock+0x114>)
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <SetSysClock+0x11c>)
 800333e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003342:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8003344:	bf00      	nop
 8003346:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <SetSysClock+0x11c>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f9      	bne.n	8003346 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003352:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <SetSysClock+0x114>)
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <SetSysClock+0x114>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <SetSysClock+0x114>)
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <SetSysClock+0x114>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8003362:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <SetSysClock+0x114>)
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <SetSysClock+0x114>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800336a:	4a18      	ldr	r2, [pc, #96]	; (80033cc <SetSysClock+0x114>)
 800336c:	4b17      	ldr	r3, [pc, #92]	; (80033cc <SetSysClock+0x114>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8003374:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8003376:	4a15      	ldr	r2, [pc, #84]	; (80033cc <SetSysClock+0x114>)
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <SetSysClock+0x114>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8003380:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <SetSysClock+0x114>)
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <SetSysClock+0x114>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800338e:	bf00      	nop
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <SetSysClock+0x114>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f9      	beq.n	8003390 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800339c:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <SetSysClock+0x114>)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <SetSysClock+0x114>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <SetSysClock+0x114>)
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <SetSysClock+0x114>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f043 0303 	orr.w	r3, r3, #3
 80033b2:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80033b4:	bf00      	nop
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <SetSysClock+0x114>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d1f9      	bne.n	80033b6 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40023c00 	.word	0x40023c00
 80033d4:	40007000 	.word	0x40007000

080033d8 <__cxa_pure_virtual>:
 80033d8:	b508      	push	{r3, lr}
 80033da:	f000 f80d 	bl	80033f8 <_ZSt9terminatev>

080033de <_ZN10__cxxabiv111__terminateEPFvvE>:
 80033de:	b508      	push	{r3, lr}
 80033e0:	4780      	blx	r0
 80033e2:	f000 f895 	bl	8003510 <abort>
	...

080033e8 <_ZSt13get_terminatev>:
 80033e8:	4b02      	ldr	r3, [pc, #8]	; (80033f4 <_ZSt13get_terminatev+0xc>)
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	f3bf 8f5f 	dmb	sy
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000040 	.word	0x20000040

080033f8 <_ZSt9terminatev>:
 80033f8:	b508      	push	{r3, lr}
 80033fa:	f7ff fff5 	bl	80033e8 <_ZSt13get_terminatev>
 80033fe:	f7ff ffee 	bl	80033de <_ZN10__cxxabiv111__terminateEPFvvE>

08003402 <__aeabi_atexit>:
 8003402:	460b      	mov	r3, r1
 8003404:	4601      	mov	r1, r0
 8003406:	4618      	mov	r0, r3
 8003408:	f000 b88a 	b.w	8003520 <__cxa_atexit>

0800340c <_ZdlPv>:
 800340c:	f000 b8bc 	b.w	8003588 <free>

08003410 <floor>:
 8003410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003414:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003418:	f2a8 37ff 	subw	r7, r8, #1023	; 0x3ff
 800341c:	2f13      	cmp	r7, #19
 800341e:	4606      	mov	r6, r0
 8003420:	460b      	mov	r3, r1
 8003422:	460c      	mov	r4, r1
 8003424:	4605      	mov	r5, r0
 8003426:	dc33      	bgt.n	8003490 <floor+0x80>
 8003428:	2f00      	cmp	r7, #0
 800342a:	da15      	bge.n	8003458 <floor+0x48>
 800342c:	a334      	add	r3, pc, #208	; (adr r3, 8003500 <floor+0xf0>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fc feab 	bl	800018c <__adddf3>
 8003436:	2200      	movs	r2, #0
 8003438:	2300      	movs	r3, #0
 800343a:	f7fd fae9 	bl	8000a10 <__aeabi_dcmpgt>
 800343e:	2800      	cmp	r0, #0
 8003440:	d057      	beq.n	80034f2 <floor+0xe2>
 8003442:	2c00      	cmp	r4, #0
 8003444:	da53      	bge.n	80034ee <floor+0xde>
 8003446:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800344a:	4333      	orrs	r3, r6
 800344c:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <floor+0xf8>)
 800344e:	f04f 0500 	mov.w	r5, #0
 8003452:	bf18      	it	ne
 8003454:	461c      	movne	r4, r3
 8003456:	e04c      	b.n	80034f2 <floor+0xe2>
 8003458:	4a2c      	ldr	r2, [pc, #176]	; (800350c <floor+0xfc>)
 800345a:	fa42 f807 	asr.w	r8, r2, r7
 800345e:	ea01 0208 	and.w	r2, r1, r8
 8003462:	4302      	orrs	r2, r0
 8003464:	d048      	beq.n	80034f8 <floor+0xe8>
 8003466:	a326      	add	r3, pc, #152	; (adr r3, 8003500 <floor+0xf0>)
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	f7fc fe8e 	bl	800018c <__adddf3>
 8003470:	2200      	movs	r2, #0
 8003472:	2300      	movs	r3, #0
 8003474:	f7fd facc 	bl	8000a10 <__aeabi_dcmpgt>
 8003478:	b3d8      	cbz	r0, 80034f2 <floor+0xe2>
 800347a:	2c00      	cmp	r4, #0
 800347c:	bfbe      	ittt	lt
 800347e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003482:	fa43 f707 	asrlt.w	r7, r3, r7
 8003486:	19e4      	addlt	r4, r4, r7
 8003488:	ea24 0408 	bic.w	r4, r4, r8
 800348c:	2500      	movs	r5, #0
 800348e:	e030      	b.n	80034f2 <floor+0xe2>
 8003490:	2f33      	cmp	r7, #51	; 0x33
 8003492:	dd07      	ble.n	80034a4 <floor+0x94>
 8003494:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8003498:	d12e      	bne.n	80034f8 <floor+0xe8>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	f7fc fe75 	bl	800018c <__adddf3>
 80034a2:	e02b      	b.n	80034fc <floor+0xec>
 80034a4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	fa22 f808 	lsr.w	r8, r2, r8
 80034b0:	ea10 0f08 	tst.w	r0, r8
 80034b4:	d020      	beq.n	80034f8 <floor+0xe8>
 80034b6:	a312      	add	r3, pc, #72	; (adr r3, 8003500 <floor+0xf0>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fc fe66 	bl	800018c <__adddf3>
 80034c0:	2200      	movs	r2, #0
 80034c2:	2300      	movs	r3, #0
 80034c4:	f7fd faa4 	bl	8000a10 <__aeabi_dcmpgt>
 80034c8:	b198      	cbz	r0, 80034f2 <floor+0xe2>
 80034ca:	2c00      	cmp	r4, #0
 80034cc:	da0c      	bge.n	80034e8 <floor+0xd8>
 80034ce:	2f14      	cmp	r7, #20
 80034d0:	d101      	bne.n	80034d6 <floor+0xc6>
 80034d2:	3401      	adds	r4, #1
 80034d4:	e008      	b.n	80034e8 <floor+0xd8>
 80034d6:	2301      	movs	r3, #1
 80034d8:	f1c7 0734 	rsb	r7, r7, #52	; 0x34
 80034dc:	fa03 f707 	lsl.w	r7, r3, r7
 80034e0:	443d      	add	r5, r7
 80034e2:	42ae      	cmp	r6, r5
 80034e4:	bf88      	it	hi
 80034e6:	18e4      	addhi	r4, r4, r3
 80034e8:	ea25 0508 	bic.w	r5, r5, r8
 80034ec:	e001      	b.n	80034f2 <floor+0xe2>
 80034ee:	2500      	movs	r5, #0
 80034f0:	462c      	mov	r4, r5
 80034f2:	4623      	mov	r3, r4
 80034f4:	4628      	mov	r0, r5
 80034f6:	e000      	b.n	80034fa <floor+0xea>
 80034f8:	4630      	mov	r0, r6
 80034fa:	4619      	mov	r1, r3
 80034fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003500:	8800759c 	.word	0x8800759c
 8003504:	7e37e43c 	.word	0x7e37e43c
 8003508:	bff00000 	.word	0xbff00000
 800350c:	000fffff 	.word	0x000fffff

08003510 <abort>:
 8003510:	b508      	push	{r3, lr}
 8003512:	2006      	movs	r0, #6
 8003514:	f000 f8c2 	bl	800369c <raise>
 8003518:	2001      	movs	r0, #1
 800351a:	f000 f8ed 	bl	80036f8 <_exit>
	...

08003520 <__cxa_atexit>:
 8003520:	b510      	push	{r4, lr}
 8003522:	4c05      	ldr	r4, [pc, #20]	; (8003538 <__cxa_atexit+0x18>)
 8003524:	4613      	mov	r3, r2
 8003526:	b12c      	cbz	r4, 8003534 <__cxa_atexit+0x14>
 8003528:	460a      	mov	r2, r1
 800352a:	4601      	mov	r1, r0
 800352c:	2002      	movs	r0, #2
 800352e:	f3af 8000 	nop.w
 8003532:	bd10      	pop	{r4, pc}
 8003534:	4620      	mov	r0, r4
 8003536:	bd10      	pop	{r4, pc}
 8003538:	00000000 	.word	0x00000000

0800353c <__libc_init_array>:
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <__libc_init_array+0x3c>)
 800353e:	b570      	push	{r4, r5, r6, lr}
 8003540:	461e      	mov	r6, r3
 8003542:	4c0e      	ldr	r4, [pc, #56]	; (800357c <__libc_init_array+0x40>)
 8003544:	2500      	movs	r5, #0
 8003546:	1ae4      	subs	r4, r4, r3
 8003548:	10a4      	asrs	r4, r4, #2
 800354a:	42a5      	cmp	r5, r4
 800354c:	d004      	beq.n	8003558 <__libc_init_array+0x1c>
 800354e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003552:	4798      	blx	r3
 8003554:	3501      	adds	r5, #1
 8003556:	e7f8      	b.n	800354a <__libc_init_array+0xe>
 8003558:	f000 f8d0 	bl	80036fc <_init>
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <__libc_init_array+0x44>)
 800355e:	4c09      	ldr	r4, [pc, #36]	; (8003584 <__libc_init_array+0x48>)
 8003560:	461e      	mov	r6, r3
 8003562:	1ae4      	subs	r4, r4, r3
 8003564:	10a4      	asrs	r4, r4, #2
 8003566:	2500      	movs	r5, #0
 8003568:	42a5      	cmp	r5, r4
 800356a:	d004      	beq.n	8003576 <__libc_init_array+0x3a>
 800356c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003570:	4798      	blx	r3
 8003572:	3501      	adds	r5, #1
 8003574:	e7f8      	b.n	8003568 <__libc_init_array+0x2c>
 8003576:	bd70      	pop	{r4, r5, r6, pc}
 8003578:	080039a4 	.word	0x080039a4
 800357c:	080039a4 	.word	0x080039a4
 8003580:	080039a4 	.word	0x080039a4
 8003584:	080039ac 	.word	0x080039ac

08003588 <free>:
 8003588:	4b02      	ldr	r3, [pc, #8]	; (8003594 <free+0xc>)
 800358a:	4601      	mov	r1, r0
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	f000 b80f 	b.w	80035b0 <_free_r>
 8003592:	bf00      	nop
 8003594:	200000a4 	.word	0x200000a4

08003598 <memcpy>:
 8003598:	b510      	push	{r4, lr}
 800359a:	1e43      	subs	r3, r0, #1
 800359c:	440a      	add	r2, r1
 800359e:	4291      	cmp	r1, r2
 80035a0:	d004      	beq.n	80035ac <memcpy+0x14>
 80035a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035aa:	e7f8      	b.n	800359e <memcpy+0x6>
 80035ac:	bd10      	pop	{r4, pc}
	...

080035b0 <_free_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	4605      	mov	r5, r0
 80035b4:	2900      	cmp	r1, #0
 80035b6:	d044      	beq.n	8003642 <_free_r+0x92>
 80035b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035bc:	1f0c      	subs	r4, r1, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bfb8      	it	lt
 80035c2:	18e4      	addlt	r4, r4, r3
 80035c4:	f000 f886 	bl	80036d4 <__malloc_lock>
 80035c8:	4a1e      	ldr	r2, [pc, #120]	; (8003644 <_free_r+0x94>)
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	4611      	mov	r1, r2
 80035ce:	b913      	cbnz	r3, 80035d6 <_free_r+0x26>
 80035d0:	6063      	str	r3, [r4, #4]
 80035d2:	6014      	str	r4, [r2, #0]
 80035d4:	e030      	b.n	8003638 <_free_r+0x88>
 80035d6:	42a3      	cmp	r3, r4
 80035d8:	d90d      	bls.n	80035f6 <_free_r+0x46>
 80035da:	6822      	ldr	r2, [r4, #0]
 80035dc:	18a0      	adds	r0, r4, r2
 80035de:	4283      	cmp	r3, r0
 80035e0:	bf01      	itttt	eq
 80035e2:	6818      	ldreq	r0, [r3, #0]
 80035e4:	685b      	ldreq	r3, [r3, #4]
 80035e6:	1812      	addeq	r2, r2, r0
 80035e8:	6022      	streq	r2, [r4, #0]
 80035ea:	6063      	str	r3, [r4, #4]
 80035ec:	600c      	str	r4, [r1, #0]
 80035ee:	e023      	b.n	8003638 <_free_r+0x88>
 80035f0:	42a2      	cmp	r2, r4
 80035f2:	d803      	bhi.n	80035fc <_free_r+0x4c>
 80035f4:	4613      	mov	r3, r2
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d1f9      	bne.n	80035f0 <_free_r+0x40>
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	1819      	adds	r1, r3, r0
 8003600:	42a1      	cmp	r1, r4
 8003602:	d10b      	bne.n	800361c <_free_r+0x6c>
 8003604:	6821      	ldr	r1, [r4, #0]
 8003606:	4401      	add	r1, r0
 8003608:	1858      	adds	r0, r3, r1
 800360a:	4282      	cmp	r2, r0
 800360c:	6019      	str	r1, [r3, #0]
 800360e:	d113      	bne.n	8003638 <_free_r+0x88>
 8003610:	6810      	ldr	r0, [r2, #0]
 8003612:	6852      	ldr	r2, [r2, #4]
 8003614:	4401      	add	r1, r0
 8003616:	6019      	str	r1, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	e00d      	b.n	8003638 <_free_r+0x88>
 800361c:	d902      	bls.n	8003624 <_free_r+0x74>
 800361e:	230c      	movs	r3, #12
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	e009      	b.n	8003638 <_free_r+0x88>
 8003624:	6821      	ldr	r1, [r4, #0]
 8003626:	1860      	adds	r0, r4, r1
 8003628:	4282      	cmp	r2, r0
 800362a:	bf01      	itttt	eq
 800362c:	6810      	ldreq	r0, [r2, #0]
 800362e:	6852      	ldreq	r2, [r2, #4]
 8003630:	1809      	addeq	r1, r1, r0
 8003632:	6021      	streq	r1, [r4, #0]
 8003634:	6062      	str	r2, [r4, #4]
 8003636:	605c      	str	r4, [r3, #4]
 8003638:	4628      	mov	r0, r5
 800363a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800363e:	f000 b84a 	b.w	80036d6 <__malloc_unlock>
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	20000330 	.word	0x20000330

08003648 <_raise_r>:
 8003648:	291f      	cmp	r1, #31
 800364a:	b538      	push	{r3, r4, r5, lr}
 800364c:	4604      	mov	r4, r0
 800364e:	460d      	mov	r5, r1
 8003650:	d904      	bls.n	800365c <_raise_r+0x14>
 8003652:	2316      	movs	r3, #22
 8003654:	6003      	str	r3, [r0, #0]
 8003656:	f04f 30ff 	mov.w	r0, #4294967295
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800365e:	b112      	cbz	r2, 8003666 <_raise_r+0x1e>
 8003660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003664:	b94b      	cbnz	r3, 800367a <_raise_r+0x32>
 8003666:	4620      	mov	r0, r4
 8003668:	f000 f832 	bl	80036d0 <_getpid_r>
 800366c:	462a      	mov	r2, r5
 800366e:	4601      	mov	r1, r0
 8003670:	4620      	mov	r0, r4
 8003672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003676:	f000 b819 	b.w	80036ac <_kill_r>
 800367a:	2b01      	cmp	r3, #1
 800367c:	d00c      	beq.n	8003698 <_raise_r+0x50>
 800367e:	1c59      	adds	r1, r3, #1
 8003680:	d103      	bne.n	800368a <_raise_r+0x42>
 8003682:	2316      	movs	r3, #22
 8003684:	6003      	str	r3, [r0, #0]
 8003686:	2001      	movs	r0, #1
 8003688:	bd38      	pop	{r3, r4, r5, pc}
 800368a:	2400      	movs	r4, #0
 800368c:	4628      	mov	r0, r5
 800368e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003692:	4798      	blx	r3
 8003694:	4620      	mov	r0, r4
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	2000      	movs	r0, #0
 800369a:	bd38      	pop	{r3, r4, r5, pc}

0800369c <raise>:
 800369c:	4b02      	ldr	r3, [pc, #8]	; (80036a8 <raise+0xc>)
 800369e:	4601      	mov	r1, r0
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	f7ff bfd1 	b.w	8003648 <_raise_r>
 80036a6:	bf00      	nop
 80036a8:	200000a4 	.word	0x200000a4

080036ac <_kill_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	4c07      	ldr	r4, [pc, #28]	; (80036cc <_kill_r+0x20>)
 80036b0:	2300      	movs	r3, #0
 80036b2:	4605      	mov	r5, r0
 80036b4:	4608      	mov	r0, r1
 80036b6:	4611      	mov	r1, r2
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	f000 f815 	bl	80036e8 <_kill>
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	d102      	bne.n	80036c8 <_kill_r+0x1c>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	b103      	cbz	r3, 80036c8 <_kill_r+0x1c>
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	bd38      	pop	{r3, r4, r5, pc}
 80036ca:	bf00      	nop
 80036cc:	20000334 	.word	0x20000334

080036d0 <_getpid_r>:
 80036d0:	f000 b802 	b.w	80036d8 <_getpid>

080036d4 <__malloc_lock>:
 80036d4:	4770      	bx	lr

080036d6 <__malloc_unlock>:
 80036d6:	4770      	bx	lr

080036d8 <_getpid>:
 80036d8:	4b02      	ldr	r3, [pc, #8]	; (80036e4 <_getpid+0xc>)
 80036da:	2258      	movs	r2, #88	; 0x58
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	4770      	bx	lr
 80036e4:	20000334 	.word	0x20000334

080036e8 <_kill>:
 80036e8:	4b02      	ldr	r3, [pc, #8]	; (80036f4 <_kill+0xc>)
 80036ea:	2258      	movs	r2, #88	; 0x58
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	f04f 30ff 	mov.w	r0, #4294967295
 80036f2:	4770      	bx	lr
 80036f4:	20000334 	.word	0x20000334

080036f8 <_exit>:
 80036f8:	e7fe      	b.n	80036f8 <_exit>
	...

080036fc <_init>:
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	bf00      	nop
 8003700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003702:	bc08      	pop	{r3}
 8003704:	469e      	mov	lr, r3
 8003706:	4770      	bx	lr

08003708 <_fini>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	bf00      	nop
 800370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370e:	bc08      	pop	{r3}
 8003710:	469e      	mov	lr, r3
 8003712:	4770      	bx	lr
