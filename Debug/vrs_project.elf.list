
vrs_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001634  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001770  08001770  00011770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080017fc  080017fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001804  08001804  00011804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  08001808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000230  200000a8  080018b0  000200a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002d8  080018b0  000202d8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004f4f  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014bd  00000000  00000000  00025020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000640  00000000  00000000  000264e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  00026b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002c7b  00000000  00000000  00027088  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002090  00000000  00000000  00029d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002bd93  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001c34  00000000  00000000  0002be14  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  0002da48  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  0002da84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000a8 	.word	0x200000a8
 8000158:	00000000 	.word	0x00000000
 800015c:	08001758 	.word	0x08001758

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000ac 	.word	0x200000ac
 8000178:	08001758 	.word	0x08001758

0800017c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <NVIC_PriorityGroupConfig+0x20>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800018c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000190:	60d3      	str	r3, [r2, #12]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
 80001ac:	2300      	movs	r3, #0
 80001ae:	73bb      	strb	r3, [r7, #14]
 80001b0:	230f      	movs	r3, #15
 80001b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	78db      	ldrb	r3, [r3, #3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d038      	beq.n	800022e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001bc:	4b26      	ldr	r3, [pc, #152]	; (8000258 <NVIC_Init+0xb8>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	43db      	mvns	r3, r3
 80001c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001c6:	0a1b      	lsrs	r3, r3, #8
 80001c8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f1c3 0304 	rsb	r3, r3, #4
 80001d0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001d2:	7b7a      	ldrb	r2, [r7, #13]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	fa42 f303 	asr.w	r3, r2, r3
 80001da:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	461a      	mov	r2, r3
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	fa02 f303 	lsl.w	r3, r2, r3
 80001e8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	789a      	ldrb	r2, [r3, #2]
 80001ee:	7b7b      	ldrb	r3, [r7, #13]
 80001f0:	4013      	ands	r3, r2
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	011b      	lsls	r3, r3, #4
 80001fe:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000200:	4a16      	ldr	r2, [pc, #88]	; (800025c <NVIC_Init+0xbc>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4413      	add	r3, r2
 8000208:	7bfa      	ldrb	r2, [r7, #15]
 800020a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <NVIC_Init+0xbc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	b2db      	uxtb	r3, r3
 8000218:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	f003 031f 	and.w	r3, r3, #31
 8000222:	2101      	movs	r1, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000228:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022c:	e00f      	b.n	800024e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800022e:	490b      	ldr	r1, [pc, #44]	; (800025c <NVIC_Init+0xbc>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	095b      	lsrs	r3, r3, #5
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	f003 031f 	and.w	r3, r3, #31
 8000242:	2201      	movs	r2, #1
 8000244:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000246:	f100 0320 	add.w	r3, r0, #32
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000e100 	.word	0xe000e100

08000260 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000260:	b480      	push	{r7}
 8000262:	b087      	sub	sp, #28
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	e07e      	b.n	800037a <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800027c:	2201      	movs	r2, #1
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	fa02 f303 	lsl.w	r3, r2, r3
 8000284:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	429a      	cmp	r2, r3
 8000296:	d16d      	bne.n	8000374 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	2103      	movs	r1, #3
 80002a2:	fa01 f303 	lsl.w	r3, r1, r3
 80002a6:	43db      	mvns	r3, r3
 80002a8:	401a      	ands	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	791b      	ldrb	r3, [r3, #4]
 80002b6:	4619      	mov	r1, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	431a      	orrs	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	791b      	ldrb	r3, [r3, #4]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d003      	beq.n	80002d6 <GPIO_Init+0x76>
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	791b      	ldrb	r3, [r3, #4]
 80002d2:	2b02      	cmp	r3, #2
 80002d4:	d136      	bne.n	8000344 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	689a      	ldr	r2, [r3, #8]
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	2103      	movs	r1, #3
 80002e0:	fa01 f303 	lsl.w	r3, r1, r3
 80002e4:	43db      	mvns	r3, r3
 80002e6:	401a      	ands	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	689a      	ldr	r2, [r3, #8]
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	795b      	ldrb	r3, [r3, #5]
 80002f4:	4619      	mov	r1, r3
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	431a      	orrs	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	889b      	ldrh	r3, [r3, #4]
 8000308:	b29a      	uxth	r2, r3
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	b29b      	uxth	r3, r3
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	b29b      	uxth	r3, r3
 8000316:	43db      	mvns	r3, r3
 8000318:	b29b      	uxth	r3, r3
 800031a:	4013      	ands	r3, r2
 800031c:	b29a      	uxth	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	889b      	ldrh	r3, [r3, #4]
 8000326:	b29b      	uxth	r3, r3
 8000328:	b21a      	sxth	r2, r3
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	799b      	ldrb	r3, [r3, #6]
 800032e:	4619      	mov	r1, r3
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	b29b      	uxth	r3, r3
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	b21b      	sxth	r3, r3
 800033a:	4313      	orrs	r3, r2
 800033c:	b21b      	sxth	r3, r3
 800033e:	b29a      	uxth	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68da      	ldr	r2, [r3, #12]
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	b29b      	uxth	r3, r3
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	2103      	movs	r1, #3
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	43db      	mvns	r3, r3
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	68da      	ldr	r2, [r3, #12]
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	79db      	ldrb	r3, [r3, #7]
 8000364:	4619      	mov	r1, r3
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	3301      	adds	r3, #1
 8000378:	617b      	str	r3, [r7, #20]
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	2b0f      	cmp	r3, #15
 800037e:	f67f af7d 	bls.w	800027c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000382:	bf00      	nop
 8000384:	371c      	adds	r7, #28
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	887a      	ldrh	r2, [r7, #2]
 800039c:	831a      	strh	r2, [r3, #24]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	807b      	strh	r3, [r7, #2]
 80003b4:	4613      	mov	r3, r2
 80003b6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003bc:	2300      	movs	r3, #0
 80003be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003c0:	787a      	ldrb	r2, [r7, #1]
 80003c2:	887b      	ldrh	r3, [r7, #2]
 80003c4:	f003 0307 	and.w	r3, r3, #7
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003d0:	887b      	ldrh	r3, [r7, #2]
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	4618      	mov	r0, r3
 80003d8:	887b      	ldrh	r3, [r7, #2]
 80003da:	08db      	lsrs	r3, r3, #3
 80003dc:	b29b      	uxth	r3, r3
 80003de:	461a      	mov	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3208      	adds	r2, #8
 80003e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003e8:	887b      	ldrh	r3, [r7, #2]
 80003ea:	f003 0307 	and.w	r3, r3, #7
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	210f      	movs	r1, #15
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	ea02 0103 	and.w	r1, r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f100 0208 	add.w	r2, r0, #8
 8000402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000406:	887b      	ldrh	r3, [r7, #2]
 8000408:	08db      	lsrs	r3, r3, #3
 800040a:	b29b      	uxth	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3208      	adds	r2, #8
 8000412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4313      	orrs	r3, r2
 800041a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800041c:	887b      	ldrh	r3, [r7, #2]
 800041e:	08db      	lsrs	r3, r3, #3
 8000420:	b29b      	uxth	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3208      	adds	r2, #8
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000442:	4a04      	ldr	r2, [pc, #16]	; (8000454 <RCC_HSICmd+0x1c>)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	42470000 	.word	0x42470000

08000458 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <RCC_SYSCLKConfig+0x34>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f023 0303 	bic.w	r3, r3, #3
 8000470:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4313      	orrs	r3, r2
 8000478:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800047a:	4a04      	ldr	r2, [pc, #16]	; (800048c <RCC_SYSCLKConfig+0x34>)
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	6093      	str	r3, [r2, #8]
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40023800 	.word	0x40023800

08000490 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000490:	b480      	push	{r7}
 8000492:	b089      	sub	sp, #36	; 0x24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004b0:	4b5f      	ldr	r3, [pc, #380]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	f003 030c 	and.w	r3, r3, #12
 80004b8:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80004ba:	69fb      	ldr	r3, [r7, #28]
 80004bc:	2b0c      	cmp	r3, #12
 80004be:	d865      	bhi.n	800058c <RCC_GetClocksFreq+0xfc>
 80004c0:	a201      	add	r2, pc, #4	; (adr r2, 80004c8 <RCC_GetClocksFreq+0x38>)
 80004c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c6:	bf00      	nop
 80004c8:	080004fd 	.word	0x080004fd
 80004cc:	0800058d 	.word	0x0800058d
 80004d0:	0800058d 	.word	0x0800058d
 80004d4:	0800058d 	.word	0x0800058d
 80004d8:	0800051d 	.word	0x0800051d
 80004dc:	0800058d 	.word	0x0800058d
 80004e0:	0800058d 	.word	0x0800058d
 80004e4:	0800058d 	.word	0x0800058d
 80004e8:	08000525 	.word	0x08000525
 80004ec:	0800058d 	.word	0x0800058d
 80004f0:	0800058d 	.word	0x0800058d
 80004f4:	0800058d 	.word	0x0800058d
 80004f8:	0800052d 	.word	0x0800052d
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80004fc:	4b4c      	ldr	r3, [pc, #304]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000504:	0b5b      	lsrs	r3, r3, #13
 8000506:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	3301      	adds	r3, #1
 800050c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000510:	fa02 f303 	lsl.w	r3, r2, r3
 8000514:	461a      	mov	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
      break;
 800051a:	e047      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a45      	ldr	r2, [pc, #276]	; (8000634 <RCC_GetClocksFreq+0x1a4>)
 8000520:	601a      	str	r2, [r3, #0]
      break;
 8000522:	e043      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a44      	ldr	r2, [pc, #272]	; (8000638 <RCC_GetClocksFreq+0x1a8>)
 8000528:	601a      	str	r2, [r3, #0]
      break;
 800052a:	e03f      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800052c:	4b40      	ldr	r3, [pc, #256]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000534:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000536:	4b3e      	ldr	r3, [pc, #248]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800053e:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	0c9b      	lsrs	r3, r3, #18
 8000544:	4a3d      	ldr	r2, [pc, #244]	; (800063c <RCC_GetClocksFreq+0x1ac>)
 8000546:	5cd3      	ldrb	r3, [r2, r3]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	0d9b      	lsrs	r3, r3, #22
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000554:	4b36      	ldr	r3, [pc, #216]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800055c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d109      	bne.n	8000578 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	4a33      	ldr	r2, [pc, #204]	; (8000634 <RCC_GetClocksFreq+0x1a4>)
 8000568:	fb02 f203 	mul.w	r2, r2, r3
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000576:	e019      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	4a2f      	ldr	r2, [pc, #188]	; (8000638 <RCC_GetClocksFreq+0x1a8>)
 800057c:	fb02 f203 	mul.w	r2, r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	fbb2 f2f3 	udiv	r2, r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
      }
      break;
 800058a:	e00f      	b.n	80005ac <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000594:	0b5b      	lsrs	r3, r3, #13
 8000596:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3301      	adds	r3, #1
 800059c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	601a      	str	r2, [r3, #0]
      break;
 80005aa:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005b4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	091b      	lsrs	r3, r3, #4
 80005ba:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80005bc:	4a20      	ldr	r2, [pc, #128]	; (8000640 <RCC_GetClocksFreq+0x1b0>)
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	40da      	lsrs	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005dc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80005e4:	4a16      	ldr	r2, [pc, #88]	; (8000640 <RCC_GetClocksFreq+0x1b0>)
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	40da      	lsrs	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <RCC_GetClocksFreq+0x1a0>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000604:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	0adb      	lsrs	r3, r3, #11
 800060a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <RCC_GetClocksFreq+0x1b0>)
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	40da      	lsrs	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60da      	str	r2, [r3, #12]
}
 8000624:	bf00      	nop
 8000626:	3724      	adds	r7, #36	; 0x24
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	00f42400 	.word	0x00f42400
 8000638:	007a1200 	.word	0x007a1200
 800063c:	20000004 	.word	0x20000004
 8000640:	20000010 	.word	0x20000010

08000644 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <RCC_AHBPeriphClockCmd+0x38>)
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <RCC_AHBPeriphClockCmd+0x38>)
 800065a:	69da      	ldr	r2, [r3, #28]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4313      	orrs	r3, r2
 8000660:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000662:	e006      	b.n	8000672 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000664:	4905      	ldr	r1, [pc, #20]	; (800067c <RCC_AHBPeriphClockCmd+0x38>)
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <RCC_AHBPeriphClockCmd+0x38>)
 8000668:	69da      	ldr	r2, [r3, #28]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	43db      	mvns	r3, r3
 800066e:	4013      	ands	r3, r2
 8000670:	61cb      	str	r3, [r1, #28]
  }
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40023800 	.word	0x40023800

08000680 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <RCC_APB2PeriphClockCmd+0x38>)
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <RCC_APB2PeriphClockCmd+0x38>)
 8000696:	6a1a      	ldr	r2, [r3, #32]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4313      	orrs	r3, r2
 800069c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800069e:	e006      	b.n	80006ae <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006a0:	4905      	ldr	r1, [pc, #20]	; (80006b8 <RCC_APB2PeriphClockCmd+0x38>)
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <RCC_APB2PeriphClockCmd+0x38>)
 80006a4:	6a1a      	ldr	r2, [r3, #32]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4013      	ands	r3, r2
 80006ac:	620b      	str	r3, [r1, #32]
  }
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40023800 	.word	0x40023800

080006bc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d006      	beq.n	80006dc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006ce:	4909      	ldr	r1, [pc, #36]	; (80006f4 <RCC_APB1PeriphClockCmd+0x38>)
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <RCC_APB1PeriphClockCmd+0x38>)
 80006d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006da:	e006      	b.n	80006ea <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006dc:	4905      	ldr	r1, [pc, #20]	; (80006f4 <RCC_APB1PeriphClockCmd+0x38>)
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <RCC_APB1PeriphClockCmd+0x38>)
 80006e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	43db      	mvns	r3, r3
 80006e6:	4013      	ands	r3, r2
 80006e8:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40023800 	.word	0x40023800

080006f8 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	095b      	lsrs	r3, r3, #5
 8000712:	b2db      	uxtb	r3, r3
 8000714:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d103      	bne.n	8000724 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <RCC_GetFlagStatus+0x60>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	e002      	b.n	800072a <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <RCC_GetFlagStatus+0x60>)
 8000726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000728:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 031f 	and.w	r3, r3, #31
 8000730:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	fa22 f303 	lsr.w	r3, r2, r3
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8000742:	2301      	movs	r3, #1
 8000744:	74fb      	strb	r3, [r7, #19]
 8000746:	e001      	b.n	800074c <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800074c:	7cfb      	ldrb	r3, [r7, #19]
}
 800074e:	4618      	mov	r0, r3
 8000750:	371c      	adds	r7, #28
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40023800 	.word	0x40023800

0800075c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000776:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	885b      	ldrh	r3, [r3, #2]
 8000780:	4313      	orrs	r3, r2
 8000782:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000788:	4313      	orrs	r3, r2
 800078a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	89fb      	ldrh	r3, [r7, #14]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	89fa      	ldrh	r2, [r7, #14]
 80007be:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	8b9b      	ldrh	r3, [r3, #28]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	8a1a      	ldrh	r2, [r3, #16]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	821a      	strh	r2, [r3, #16]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000800:	b29a      	uxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000806:	e007      	b.n	8000818 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	b29b      	uxth	r3, r3
 800080e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000812:	b29a      	uxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	801a      	strh	r2, [r3, #0]
  }
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	8a1b      	ldrh	r3, [r3, #16]
 8000842:	b29b      	uxth	r3, r3
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800084c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	88db      	ldrh	r3, [r3, #6]
 8000852:	461a      	mov	r2, r3
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	4313      	orrs	r3, r2
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	b29a      	uxth	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	899b      	ldrh	r3, [r3, #12]
 8000866:	b29b      	uxth	r3, r3
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000870:	f023 030c 	bic.w	r3, r3, #12
 8000874:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	889a      	ldrh	r2, [r3, #4]
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	891b      	ldrh	r3, [r3, #8]
 800087e:	4313      	orrs	r3, r2
 8000880:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000886:	4313      	orrs	r3, r2
 8000888:	b29b      	uxth	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	4313      	orrs	r3, r2
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	b29a      	uxth	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	8a9b      	ldrh	r3, [r3, #20]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	899b      	ldrh	r3, [r3, #12]
 80008ae:	461a      	mov	r2, r3
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	4313      	orrs	r3, r2
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fde4 	bl	8000490 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a2e      	ldr	r2, [pc, #184]	; (8000984 <USART_Init+0x160>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d102      	bne.n	80008d6 <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	623b      	str	r3, [r7, #32]
 80008d4:	e001      	b.n	80008da <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	899b      	ldrh	r3, [r3, #12]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	da0c      	bge.n	8000900 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80008e6:	6a3a      	ldr	r2, [r7, #32]
 80008e8:	4613      	mov	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4413      	add	r3, r2
 80008ee:	009a      	lsls	r2, r3, #2
 80008f0:	441a      	add	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fc:	61fb      	str	r3, [r7, #28]
 80008fe:	e00b      	b.n	8000918 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000900:	6a3a      	ldr	r2, [r7, #32]
 8000902:	4613      	mov	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4413      	add	r3, r2
 8000908:	009a      	lsls	r2, r3, #2
 800090a:	441a      	add	r2, r3
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <USART_Init+0x164>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	095b      	lsrs	r3, r3, #5
 8000922:	011b      	lsls	r3, r3, #4
 8000924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	091b      	lsrs	r3, r3, #4
 800092a:	2264      	movs	r2, #100	; 0x64
 800092c:	fb02 f303 	mul.w	r3, r2, r3
 8000930:	69fa      	ldr	r2, [r7, #28]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	899b      	ldrh	r3, [r3, #12]
 800093a:	b29b      	uxth	r3, r3
 800093c:	b21b      	sxth	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	da0c      	bge.n	800095c <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	3332      	adds	r3, #50	; 0x32
 8000948:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <USART_Init+0x164>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000956:	4313      	orrs	r3, r2
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
 800095a:	e00b      	b.n	8000974 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	3332      	adds	r3, #50	; 0x32
 8000962:	4a09      	ldr	r2, [pc, #36]	; (8000988 <USART_Init+0x164>)
 8000964:	fba2 2303 	umull	r2, r3, r2, r3
 8000968:	095b      	lsrs	r3, r3, #5
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000970:	4313      	orrs	r3, r2
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	811a      	strh	r2, [r3, #8]
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40013800 	.word	0x40013800
 8000988:	51eb851f 	.word	0x51eb851f

0800098c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d008      	beq.n	80009b0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	899b      	ldrh	r3, [r3, #12]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80009ae:	e007      	b.n	80009c0 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	899b      	ldrh	r3, [r3, #12]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	819a      	strh	r2, [r3, #12]
  }
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009de:	b29a      	uxth	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	809a      	strh	r2, [r3, #4]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	889b      	ldrh	r3, [r3, #4]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a02:	b29b      	uxth	r3, r3
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	807b      	strh	r3, [r7, #2]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	095b      	lsrs	r3, r3, #5
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000a3e:	887b      	ldrh	r3, [r7, #2]
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000a46:	2201      	movs	r2, #1
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d103      	bne.n	8000a5e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	330c      	adds	r3, #12
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	e009      	b.n	8000a72 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d103      	bne.n	8000a6c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	3310      	adds	r3, #16
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	e002      	b.n	8000a72 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3314      	adds	r3, #20
 8000a70:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000a72:	787b      	ldrb	r3, [r7, #1]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	6811      	ldr	r1, [r2, #0]
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000a84:	e006      	b.n	8000a94 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	6811      	ldr	r1, [r2, #0]
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	43d2      	mvns	r2, r2
 8000a90:	400a      	ands	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
  }
}
 8000a94:	bf00      	nop
 8000a96:	371c      	adds	r7, #28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e001      	b.n	8000aca <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <USART_ClearFlag>:
  * @note TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000ae4:	887b      	ldrh	r3, [r7, #2]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	801a      	strh	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <_ZN4Spi1C1Ev>:
 *      Author: Matejko
 */

#include <Spi1.h>

Spi1::Spi1() {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f8b0 	bl	8000c68 <_ZN10SpiGenericC1Ev>
 8000b08:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <_ZN4Spi1C1Ev+0x20>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	08001780 	.word	0x08001780

08000b1c <_ZN4Spi14initEv>:

void Spi1::init(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;

		//inti Spi pins
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000b24:	2101      	movs	r1, #1
 8000b26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b2a:	f7ff fda9 	bl	8000680 <RCC_APB2PeriphClockCmd>
		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2002      	movs	r0, #2
 8000b32:	f7ff fd87 	bl	8000644 <RCC_AHBPeriphClockCmd>

		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000b36:	2302      	movs	r3, #2
 8000b38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000b42:	2303      	movs	r3, #3
 8000b44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		//PB3 - SPI2_SCK
		//PB4 - SPI2_MISO
		//PB5 - SPI2_MOSI
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5;
 8000b4e:	2338      	movs	r3, #56	; 0x38
 8000b50:	623b      	str	r3, [r7, #32]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	4619      	mov	r1, r3
 8000b58:	482d      	ldr	r0, [pc, #180]	; (8000c10 <_ZN4Spi14initEv+0xf4>)
 8000b5a:	f7ff fb81 	bl	8000260 <GPIO_Init>


		// init cs
		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	2002      	movs	r0, #2
 8000b62:	f7ff fd6f 	bl	8000644 <RCC_AHBPeriphClockCmd>

		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7c:	623b      	str	r3, [r7, #32]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4821      	ldr	r0, [pc, #132]	; (8000c10 <_ZN4Spi14initEv+0xf4>)
 8000b8c:	f7ff fb68 	bl	8000260 <GPIO_Init>
		GPIO_SetBits(GPIOB,GPIO_Pin_10);
 8000b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b94:	481e      	ldr	r0, [pc, #120]	; (8000c10 <_ZN4Spi14initEv+0xf4>)
 8000b96:	f7ff fbf9 	bl	800038c <GPIO_SetBits>

		//init Spi
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_SPI1);
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	481c      	ldr	r0, [pc, #112]	; (8000c10 <_ZN4Spi14initEv+0xf4>)
 8000ba0:	f7ff fc02 	bl	80003a8 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_SPI1);
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	4819      	ldr	r0, [pc, #100]	; (8000c10 <_ZN4Spi14initEv+0xf4>)
 8000baa:	f7ff fbfd 	bl	80003a8 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_SPI1);
 8000bae:	2205      	movs	r2, #5
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	4817      	ldr	r0, [pc, #92]	; (8000c10 <_ZN4Spi14initEv+0xf4>)
 8000bb4:	f7ff fbf8 	bl	80003a8 <GPIO_PinAFConfig>

		SPI_InitTypeDef  SPI_InitStructure;
		SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	833b      	strh	r3, [r7, #24]
		SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	82bb      	strh	r3, [r7, #20]
		SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	827b      	strh	r3, [r7, #18]
		SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	83bb      	strh	r3, [r7, #28]
		SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	823b      	strh	r3, [r7, #16]
		SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81bb      	strh	r3, [r7, #12]
		SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	837b      	strh	r3, [r7, #26]
		SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000bd4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000bd8:	81fb      	strh	r3, [r7, #14]
		SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bde:	82fb      	strh	r3, [r7, #22]

		/* Apply SPI configuration after enabling it */
		SPI_Init(SPI1, &SPI_InitStructure);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	480b      	ldr	r0, [pc, #44]	; (8000c14 <_ZN4Spi14initEv+0xf8>)
 8000be8:	f7ff fdb8 	bl	800075c <SPI_Init>
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
		NVIC_Init(&NVIC_InitStructure);*/

		/* SPI Peripheral Enable */
		spi = SPI1;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <_ZN4Spi14initEv+0xf8>)
 8000bf0:	605a      	str	r2, [r3, #4]
		cs = GPIO_Pin_10;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf8:	811a      	strh	r2, [r3, #8]
		gpio_cs = GPIOB;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <_ZN4Spi14initEv+0xf4>)
 8000bfe:	60da      	str	r2, [r3, #12]
		SPI_Cmd(SPI1, ENABLE);
 8000c00:	2101      	movs	r1, #1
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <_ZN4Spi14initEv+0xf8>)
 8000c04:	f7ff fdee 	bl	80007e4 <SPI_Cmd>
}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40013000 	.word	0x40013000

08000c18 <_ZN4Spi1D1Ev>:

Spi1::~Spi1() {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <_ZN4Spi1D1Ev+0x2c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f82d 	bl	8000c88 <_ZN10SpiGenericD1Ev>
	// TODO Auto-generated destructor stub
}
 8000c2e:	2300      	movs	r3, #0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <_ZN4Spi1D1Ev+0x22>
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 fca3 	bl	8001580 <_ZdlPv>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	08001780 	.word	0x08001780

08000c48 <_ZN4Spi1D0Ev>:
		cs = GPIO_Pin_10;
		gpio_cs = GPIOB;
		SPI_Cmd(SPI1, ENABLE);
}

Spi1::~Spi1() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ffe1 	bl	8000c18 <_ZN4Spi1D1Ev>
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 fc92 	bl	8001580 <_ZdlPv>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop

08000c68 <_ZN10SpiGenericC1Ev>:
 *      Author: Matejko
 */

#include <SpiGeneric.h>

SpiGeneric::SpiGeneric() {
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <_ZN10SpiGenericC1Ev+0x1c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	08001794 	.word	0x08001794

08000c88 <_ZN10SpiGenericD1Ev>:
void SpiGeneric::waitTxRx(){
	while(!(spi->SR & SPI_I2S_FLAG_RXNE));
	while(!(spi->SR & SPI_I2S_FLAG_RXNE));
}

SpiGeneric::~SpiGeneric() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <_ZN10SpiGenericD1Ev+0x24>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c96:	2300      	movs	r3, #0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <_ZN10SpiGenericD1Ev+0x1a>
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 fc6f 	bl	8001580 <_ZdlPv>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	08001794 	.word	0x08001794

08000cb0 <_Z13sysClockSetupv>:
 *  Created on: Dec 10, 2016
 *      Author: Matejko
 */
#include <basicSetup.h>

void sysClockSetup(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	RCC_HSICmd(ENABLE);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fbbf 	bl	8000438 <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000cba:	2021      	movs	r0, #33	; 0x21
 8000cbc:	f7ff fd1c 	bl	80006f8 <RCC_GetFlagStatus>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bf0c      	ite	eq
 8000cc6:	2301      	moveq	r3, #1
 8000cc8:	2300      	movne	r3, #0
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d000      	beq.n	8000cd2 <_Z13sysClockSetupv+0x22>
 8000cd0:	e7f3      	b.n	8000cba <_Z13sysClockSetupv+0xa>

	RCC_SYSCLKConfig(RCC_CFGR_SW_HSI);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f7ff fbc0 	bl	8000458 <RCC_SYSCLKConfig>
	SystemCoreClockUpdate();
 8000cd8:	f000 fafc 	bl	80012d4 <SystemCoreClockUpdate>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_ZN6Usart2C1Ev>:
 *      Author: Matejko
 */

#include <Usart2.h>

Usart2::Usart2() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f89c 	bl	8000e28 <_ZN12UsartGenericC1Ev>
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <_ZN6Usart2C1Ev+0x20>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	080017a8 	.word	0x080017a8

08000d04 <_ZN6Usart2D1Ev>:

Usart2::~Usart2() {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <_ZN6Usart2D1Ev+0x2c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f9b3 	bl	8001080 <_ZN12UsartGenericD1Ev>
	// TODO Auto-generated destructor stub
}
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <_ZN6Usart2D1Ev+0x22>
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 fc2d 	bl	8001580 <_ZdlPv>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	080017a8 	.word	0x080017a8

08000d34 <_ZN6Usart2D0Ev>:
Usart2::Usart2() {
	// TODO Auto-generated constructor stub

}

Usart2::~Usart2() {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffe1 	bl	8000d04 <_ZN6Usart2D1Ev>
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fc1c 	bl	8001580 <_ZdlPv>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop

08000d54 <_ZN6Usart24initEv>:

void Usart2::init(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

	//enable output pins pherifery
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fc70 	bl	8000644 <RCC_AHBPeriphClockCmd>

	//configure pins
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000d64:	2207      	movs	r2, #7
 8000d66:	2102      	movs	r1, #2
 8000d68:	482d      	ldr	r0, [pc, #180]	; (8000e20 <_ZN6Usart24initEv+0xcc>)
 8000d6a:	f7ff fb1d 	bl	80003a8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000d6e:	2207      	movs	r2, #7
 8000d70:	2103      	movs	r1, #3
 8000d72:	482b      	ldr	r0, [pc, #172]	; (8000e20 <_ZN6Usart24initEv+0xcc>)
 8000d74:	f7ff fb18 	bl	80003a8 <GPIO_PinAFConfig>
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 |  GPIO_Pin_3;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4821      	ldr	r0, [pc, #132]	; (8000e20 <_ZN6Usart24initEv+0xcc>)
 8000d9c:	f7ff fa60 	bl	8000260 <GPIO_Init>

	//enable uusart pherifery
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000da0:	2101      	movs	r1, #1
 8000da2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000da6:	f7ff fc89 	bl	80006bc <RCC_APB1PeriphClockCmd>

	//configure usart
	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 8000daa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000dae:	613b      	str	r3, [r7, #16]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000db0:	2300      	movs	r3, #0
 8000db2:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	82fb      	strh	r3, [r7, #22]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000db8:	2300      	movs	r3, #0
 8000dba:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	83bb      	strh	r3, [r7, #28]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	837b      	strh	r3, [r7, #26]
	USART_Init(USART2, &USART_InitStructure);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <_ZN6Usart24initEv+0xd0>)
 8000dcc:	f7ff fd2a 	bl	8000824 <USART_Init>


	//enable usart interrupts
	USART_ClearFlag(USART2,USART_FLAG_TC);
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <_ZN6Usart24initEv+0xd0>)
 8000dd4:	f7ff fe80 	bl	8000ad8 <USART_ClearFlag>
	USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f240 6126 	movw	r1, #1574	; 0x626
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <_ZN6Usart24initEv+0xd0>)
 8000de0:	f7ff fe16 	bl	8000a10 <USART_ITConfig>
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f240 5125 	movw	r1, #1317	; 0x525
 8000dea:	480e      	ldr	r0, [pc, #56]	; (8000e24 <_ZN6Usart24initEv+0xd0>)
 8000dec:	f7ff fe10 	bl	8000a10 <USART_ITConfig>

	//configure nvic
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000df0:	2326      	movs	r3, #38	; 0x26
 8000df2:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 8;
 8000df4:	2308      	movs	r3, #8
 8000df6:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff f9cb 	bl	80001a0 <NVIC_Init>

	usart = USART2;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_ZN6Usart24initEv+0xd0>)
 8000e0e:	605a      	str	r2, [r3, #4]
	//turn on usart
	USART_Cmd(USART2,ENABLE);
 8000e10:	2101      	movs	r1, #1
 8000e12:	4804      	ldr	r0, [pc, #16]	; (8000e24 <_ZN6Usart24initEv+0xd0>)
 8000e14:	f7ff fdba 	bl	800098c <USART_Cmd>

}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	; 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40004400 	.word	0x40004400

08000e28 <_ZN12UsartGenericC1Ev>:
 *      Author: Matejko
 */

#include <UsartGeneric.h>

UsartGeneric::UsartGeneric() : usart_write_buffer_it(0), usart_send_it(0), usart_read_buffer_it(0), usart_read_it(0){
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <_ZN12UsartGenericC1Ev+0x38>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	721a      	strb	r2, [r3, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	725a      	strb	r2, [r3, #9]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	// TODO Auto-generated constructor stub

}
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	080017d4 	.word	0x080017d4

08000e64 <_ZN12UsartGeneric4readEPhh>:

uint8_t UsartGeneric::read(uint8_t* data,uint8_t len){
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<len;i++){
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dd2c      	ble.n	8000ed8 <_ZN12UsartGeneric4readEPhh+0x74>
		if(usart_read_it==usart_read_buffer_it)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <_ZN12UsartGeneric4readEPhh+0x3e>
			return i;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	e01b      	b.n	8000eda <_ZN12UsartGeneric4readEPhh+0x76>
		*(data+i) = usart_read_buffer[usart_read_it];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	f892 210a 	ldrb.w	r2, [r2, #266]	; 0x10a
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	440a      	add	r2, r1
 8000eb6:	f892 210c 	ldrb.w	r2, [r2, #268]	; 0x10c
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	701a      	strb	r2, [r3, #0]
		usart_read_it++;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	// TODO Auto-generated constructor stub

}

uint8_t UsartGeneric::read(uint8_t* data,uint8_t len){
	for(int i=0;i<len;i++){
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e7ce      	b.n	8000e76 <_ZN12UsartGeneric4readEPhh+0x12>
		if(usart_read_it==usart_read_buffer_it)
			return i;
		*(data+i) = usart_read_buffer[usart_read_it];
		usart_read_it++;
	}
	return len;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eda:	4618      	mov	r0, r3
 8000edc:	371c      	adds	r7, #28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <_ZN12UsartGeneric5writeEPhh>:
void UsartGeneric::write(uint8_t* data,uint8_t len){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t  i= 0;i<len;i++){
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	75fb      	strb	r3, [r7, #23]
 8000ef6:	7dfa      	ldrb	r2, [r7, #23]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d215      	bcs.n	8000f2a <_ZN12UsartGeneric5writeEPhh+0x46>
			usart_write_buffer[usart_write_buffer_it] = *(data+i);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	7a5b      	ldrb	r3, [r3, #9]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4619      	mov	r1, r3
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	440b      	add	r3, r1
 8000f12:	729a      	strb	r2, [r3, #10]
			usart_write_buffer_it ++;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	7a5b      	ldrb	r3, [r3, #9]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	725a      	strb	r2, [r3, #9]
	}
	return len;

}
void UsartGeneric::write(uint8_t* data,uint8_t len){
	for(uint8_t  i= 0;i<len;i++){
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	3301      	adds	r3, #1
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e7e5      	b.n	8000ef6 <_ZN12UsartGeneric5writeEPhh+0x12>
			usart_write_buffer[usart_write_buffer_it] = *(data+i);
			usart_write_buffer_it ++;
		}
		initWrite(len);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f000 f8ba 	bl	80010a8 <_ZN12UsartGeneric9initWriteEh>

}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZN12UsartGeneric14availableBytesEv>:
uint8_t UsartGeneric::availableBytes(){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	return (usart_read_buffer_it - usart_read_it);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	b2db      	uxtb	r3, r3
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <_ZN12UsartGeneric5flushEv>:
void UsartGeneric::flush(){
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	usart_send_it = usart_write_buffer_it;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7a5b      	ldrb	r3, [r3, #9]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	721a      	strb	r2, [r3, #8]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <_ZN12UsartGeneric13writableBytesEv>:

uint8_t UsartGeneric::writableBytes(){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
		return (usart_write_buffer_it - usart_send_it);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7a5b      	ldrb	r3, [r3, #9]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7a1b      	ldrb	r3, [r3, #8]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	b2db      	uxtb	r3, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <_ZN12UsartGeneric10irqHandlerEv>:

void UsartGeneric::irqHandler (void) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	if(USART_GetFlagStatus(usart, USART_FLAG_RXNE) == SET){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fd74 	bl	8000aa0 <USART_GetFlagStatus>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01f      	beq.n	8001008 <_ZN12UsartGeneric10irqHandlerEv+0x64>
		usart_read_buffer[usart_read_buffer_it] = USART_ReceiveData(usart);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fd0a 	bl	80009f0 <USART_ReceiveData>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4423      	add	r3, r4
 8000fe4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		USART_ClearFlag(usart, USART_FLAG_RXNE);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2120      	movs	r1, #32
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fd72 	bl	8000ad8 <USART_ClearFlag>
		usart_read_buffer_it++;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
		return;
 8001006:	e038      	b.n	800107a <_ZN12UsartGeneric10irqHandlerEv+0xd6>
	}
	if(USART_GetFlagStatus(usart,USART_FLAG_TC) == SET){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2140      	movs	r1, #64	; 0x40
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fd46 	bl	8000aa0 <USART_GetFlagStatus>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	bf0c      	ite	eq
 800101a:	2301      	moveq	r3, #1
 800101c:	2300      	movne	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d02a      	beq.n	800107a <_ZN12UsartGeneric10irqHandlerEv+0xd6>
		USART_ClearFlag(usart,USART_FLAG_TC);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd54 	bl	8000ad8 <USART_ClearFlag>
		if(usart_send_it != usart_write_buffer_it){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7a1b      	ldrb	r3, [r3, #8]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7a5b      	ldrb	r3, [r3, #9]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	429a      	cmp	r2, r3
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d016      	beq.n	8001078 <_ZN12UsartGeneric10irqHandlerEv+0xd4>
			USART_SendData(usart,usart_write_buffer[usart_send_it]);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7a1b      	ldrb	r3, [r3, #8]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4619      	mov	r1, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	440b      	add	r3, r1
 800105a:	7a9b      	ldrb	r3, [r3, #10]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	4619      	mov	r1, r3
 8001062:	4610      	mov	r0, r2
 8001064:	f7ff fcb2 	bl	80009cc <USART_SendData>
			usart_send_it++;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7a1b      	ldrb	r3, [r3, #8]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3301      	adds	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	721a      	strb	r2, [r3, #8]
		}
		return;
 8001076:	bf00      	nop
 8001078:	bf00      	nop
	}
}
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}

08001080 <_ZN12UsartGenericD1Ev>:

UsartGeneric::~UsartGeneric() {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <_ZN12UsartGenericD1Ev+0x24>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800108e:	2300      	movs	r3, #0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <_ZN12UsartGenericD1Ev+0x1a>
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fa73 	bl	8001580 <_ZdlPv>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	080017d4 	.word	0x080017d4

080010a8 <_ZN12UsartGeneric9initWriteEh>:
 * Private function
 *
 * */


void UsartGeneric::initWrite(uint8_t new_bytes){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
	if(!(writableBytes() - new_bytes )){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3314      	adds	r3, #20
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	4798      	blx	r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	4293      	cmp	r3, r2
 80010c8:	bf0c      	ite	eq
 80010ca:	2301      	moveq	r3, #1
 80010cc:	2300      	movne	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d015      	beq.n	8001100 <_ZN12UsartGeneric9initWriteEh+0x58>
		USART_SendData(usart,usart_write_buffer[usart_send_it]);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7a1b      	ldrb	r3, [r3, #8]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	440b      	add	r3, r1
 80010e4:	7a9b      	ldrb	r3, [r3, #10]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f7ff fc6d 	bl	80009cc <USART_SendData>
		usart_send_it++;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7a1b      	ldrb	r3, [r3, #8]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	721a      	strb	r2, [r3, #8]
	}
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <main>:
**  Abstract: main program
**
**===========================================================================
*/
Usart2 usart;
int main(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
  *  To reconfigure the default setting of SystemInit() function, refer to
  *  system_stm32l1xx.c file
  */

	//setup core frequency
	sysClockSetup();
 800110e:	f7ff fdcf 	bl	8000cb0 <_Z13sysClockSetupv>

	//setup nvic priority
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8001112:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001116:	f7ff f831 	bl	800017c <NVIC_PriorityGroupConfig>

	//setup spi
	Spi1 spi;
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fcea 	bl	8000af8 <_ZN4Spi1C1Ev>
	spi.init();
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fcf7 	bl	8000b1c <_ZN4Spi14initEv>

	//setup usart
	usart.init();
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <main+0x48>)
 8001130:	f7ff fe10 	bl	8000d54 <_ZN6Usart24initEv>

	uint8_t posli[] = {'s','t','a','r','t','\n'};
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <main+0x4c>)
 8001136:	463b      	mov	r3, r7
 8001138:	6810      	ldr	r0, [r2, #0]
 800113a:	6018      	str	r0, [r3, #0]
 800113c:	8892      	ldrh	r2, [r2, #4]
 800113e:	809a      	strh	r2, [r3, #4]
	usart.write(posli,6);
 8001140:	463b      	mov	r3, r7
 8001142:	2206      	movs	r2, #6
 8001144:	4619      	mov	r1, r3
 8001146:	4802      	ldr	r0, [pc, #8]	; (8001150 <main+0x48>)
 8001148:	f7ff fecc 	bl	8000ee4 <_ZN12UsartGeneric5writeEPhh>

	/* Infinite loop */

  while (1)
  {
		asm("nop");
 800114c:	bf00      	nop
	uint8_t posli[] = {'s','t','a','r','t','\n'};
	usart.write(posli,6);

	/* Infinite loop */

  while (1)
 800114e:	e7fd      	b.n	800114c <main+0x44>
 8001150:	200000c4 	.word	0x200000c4
 8001154:	08001770 	.word	0x08001770

08001158 <USART2_IRQHandler>:
  {
  }
}
#endif

extern "C" void USART2_IRQHandler (void){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	usart.irqHandler();
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <USART2_IRQHandler+0x10>)
 800115e:	f7ff ff21 	bl	8000fa4 <_ZN12UsartGeneric10irqHandlerEv>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000c4 	.word	0x200000c4

0800116c <_Z41__static_initialization_and_destruction_0ii>:
 * Minimal __assert() uses __assert__func()
 * */
extern "C" void __assert(const char *file, int line, const char *failedexpr)
{
   __assert_func (file, line, NULL, failedexpr);
}
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d10c      	bne.n	8001196 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001182:	4293      	cmp	r3, r2
 8001184:	d107      	bne.n	8001196 <_Z41__static_initialization_and_destruction_0ii+0x2a>
**
**  Abstract: main program
**
**===========================================================================
*/
Usart2 usart;
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001188:	f7ff fdaa 	bl	8000ce0 <_ZN6Usart2C1Ev>
 800118c:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800118e:	4906      	ldr	r1, [pc, #24]	; (80011a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001192:	f000 f9f0 	bl	8001576 <__aeabi_atexit>
 * Minimal __assert() uses __assert__func()
 * */
extern "C" void __assert(const char *file, int line, const char *failedexpr)
{
   __assert_func (file, line, NULL, failedexpr);
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000c4 	.word	0x200000c4
 80011a4:	20000000 	.word	0x20000000
 80011a8:	08000d05 	.word	0x08000d05

080011ac <_GLOBAL__sub_I_usart>:
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff ffd9 	bl	800116c <_Z41__static_initialization_and_destruction_0ii>
 80011ba:	bd80      	pop	{r7, pc}

080011bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011c2:	e003      	b.n	80011cc <LoopCopyDataInit>

080011c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80011c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011ca:	3104      	adds	r1, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80011d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011d4:	d3f6      	bcc.n	80011c4 <CopyDataInit>
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80011d8:	e002      	b.n	80011e0 <LoopFillZerobss>

080011da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011dc:	f842 3b04 	str.w	r3, [r2], #4

080011e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <LoopFillZerobss+0x28>)
  cmp r2, r3
 80011e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011e4:	d3f9      	bcc.n	80011da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011e6:	f000 f841 	bl	800126c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f000 f9e1 	bl	80015b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ee:	f7ff ff8b 	bl	8001108 <main>
  bx lr
 80011f2:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f4:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80011f8:	08001808 	.word	0x08001808
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001200:	200000a8 	.word	0x200000a8
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001204:	200000a8 	.word	0x200000a8
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001208:	200002d8 	.word	0x200002d8

0800120c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_IRQHandler>
	...

08001210 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001220:	e7fe      	b.n	8001220 <HardFault_Handler+0x4>
 8001222:	bf00      	nop

08001224 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>
 800122a:	bf00      	nop

0800122c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001230:	e7fe      	b.n	8001230 <BusFault_Handler+0x4>
 8001232:	bf00      	nop

08001234 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>
 800123a:	bf00      	nop

0800123c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001270:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <SystemInit+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <SystemInit+0x5c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800127c:	4912      	ldr	r1, [pc, #72]	; (80012c8 <SystemInit+0x5c>)
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <SystemInit+0x5c>)
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <SystemInit+0x60>)
 8001284:	4013      	ands	r3, r2
 8001286:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <SystemInit+0x5c>)
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <SystemInit+0x5c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001292:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001296:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001298:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <SystemInit+0x5c>)
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <SystemInit+0x5c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80012a4:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <SystemInit+0x5c>)
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <SystemInit+0x5c>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80012ae:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SystemInit+0x5c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80012b6:	f000 f8b9 	bl	800142c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SystemInit+0x64>)
 80012bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012c0:	609a      	str	r2, [r3, #8]
#endif
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	88ffc00c 	.word	0x88ffc00c
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012ee:	4b49      	ldr	r3, [pc, #292]	; (8001414 <SystemCoreClockUpdate+0x140>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b0c      	cmp	r3, #12
 80012fc:	d864      	bhi.n	80013c8 <SystemCoreClockUpdate+0xf4>
 80012fe:	a201      	add	r2, pc, #4	; (adr r2, 8001304 <SystemCoreClockUpdate+0x30>)
 8001300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001304:	08001339 	.word	0x08001339
 8001308:	080013c9 	.word	0x080013c9
 800130c:	080013c9 	.word	0x080013c9
 8001310:	080013c9 	.word	0x080013c9
 8001314:	08001359 	.word	0x08001359
 8001318:	080013c9 	.word	0x080013c9
 800131c:	080013c9 	.word	0x080013c9
 8001320:	080013c9 	.word	0x080013c9
 8001324:	08001361 	.word	0x08001361
 8001328:	080013c9 	.word	0x080013c9
 800132c:	080013c9 	.word	0x080013c9
 8001330:	080013c9 	.word	0x080013c9
 8001334:	08001369 	.word	0x08001369
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <SystemCoreClockUpdate+0x140>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001340:	0b5b      	lsrs	r3, r3, #13
 8001342:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3301      	adds	r3, #1
 8001348:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <SystemCoreClockUpdate+0x144>)
 8001354:	601a      	str	r2, [r3, #0]
      break;
 8001356:	e047      	b.n	80013e8 <SystemCoreClockUpdate+0x114>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <SystemCoreClockUpdate+0x144>)
 800135a:	4a30      	ldr	r2, [pc, #192]	; (800141c <SystemCoreClockUpdate+0x148>)
 800135c:	601a      	str	r2, [r3, #0]
      break;
 800135e:	e043      	b.n	80013e8 <SystemCoreClockUpdate+0x114>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <SystemCoreClockUpdate+0x144>)
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <SystemCoreClockUpdate+0x14c>)
 8001364:	601a      	str	r2, [r3, #0]
      break;
 8001366:	e03f      	b.n	80013e8 <SystemCoreClockUpdate+0x114>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <SystemCoreClockUpdate+0x140>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001370:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <SystemCoreClockUpdate+0x140>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800137a:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	4a28      	ldr	r2, [pc, #160]	; (8001424 <SystemCoreClockUpdate+0x150>)
 8001382:	5cd3      	ldrb	r3, [r2, r3]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	0d9b      	lsrs	r3, r3, #22
 800138c:	3301      	adds	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <SystemCoreClockUpdate+0x140>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d109      	bne.n	80013b4 <SystemCoreClockUpdate+0xe0>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <SystemCoreClockUpdate+0x148>)
 80013a4:	fb02 f203 	mul.w	r2, r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <SystemCoreClockUpdate+0x144>)
 80013b0:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80013b2:	e019      	b.n	80013e8 <SystemCoreClockUpdate+0x114>
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <SystemCoreClockUpdate+0x14c>)
 80013b8:	fb02 f203 	mul.w	r2, r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <SystemCoreClockUpdate+0x144>)
 80013c4:	6013      	str	r3, [r2, #0]
      }
      break;
 80013c6:	e00f      	b.n	80013e8 <SystemCoreClockUpdate+0x114>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <SystemCoreClockUpdate+0x140>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013d0:	0b5b      	lsrs	r3, r3, #13
 80013d2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3301      	adds	r3, #1
 80013d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <SystemCoreClockUpdate+0x144>)
 80013e4:	601a      	str	r2, [r3, #0]
      break;
 80013e6:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <SystemCoreClockUpdate+0x140>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <SystemCoreClockUpdate+0x154>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <SystemCoreClockUpdate+0x144>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <SystemCoreClockUpdate+0x144>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	20000020 	.word	0x20000020
 800141c:	00f42400 	.word	0x00f42400
 8001420:	007a1200 	.word	0x007a1200
 8001424:	20000024 	.word	0x20000024
 8001428:	20000030 	.word	0x20000030

0800142c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800143a:	4a41      	ldr	r2, [pc, #260]	; (8001540 <SetSysClock+0x114>)
 800143c:	4b40      	ldr	r3, [pc, #256]	; (8001540 <SetSysClock+0x114>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001446:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <SetSysClock+0x114>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3301      	adds	r3, #1
 8001454:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <SetSysClock+0x38>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001462:	d1f0      	bne.n	8001446 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <SetSysClock+0x114>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001470:	2301      	movs	r3, #1
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	e001      	b.n	800147a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d15a      	bne.n	8001536 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001480:	4a30      	ldr	r2, [pc, #192]	; (8001544 <SetSysClock+0x118>)
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <SetSysClock+0x118>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800148c:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <SetSysClock+0x118>)
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <SetSysClock+0x118>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001498:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <SetSysClock+0x118>)
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <SetSysClock+0x118>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <SetSysClock+0x114>)
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <SetSysClock+0x114>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <SetSysClock+0x11c>)
 80014b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b6:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80014b8:	bf00      	nop
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <SetSysClock+0x11c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f9      	bne.n	80014ba <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80014c6:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <SetSysClock+0x114>)
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <SetSysClock+0x114>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <SetSysClock+0x114>)
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <SetSysClock+0x114>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80014d6:	4a1a      	ldr	r2, [pc, #104]	; (8001540 <SetSysClock+0x114>)
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <SetSysClock+0x114>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <SetSysClock+0x114>)
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <SetSysClock+0x114>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80014e8:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <SetSysClock+0x114>)
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <SetSysClock+0x114>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 80014f4:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <SetSysClock+0x114>)
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <SetSysClock+0x114>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001500:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001502:	bf00      	nop
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <SetSysClock+0x114>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f9      	beq.n	8001504 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <SetSysClock+0x114>)
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <SetSysClock+0x114>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 0303 	bic.w	r3, r3, #3
 800151a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800151c:	4a08      	ldr	r2, [pc, #32]	; (8001540 <SetSysClock+0x114>)
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <SetSysClock+0x114>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f043 0303 	orr.w	r3, r3, #3
 8001526:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001528:	bf00      	nop
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SetSysClock+0x114>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d1f9      	bne.n	800152a <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40023800 	.word	0x40023800
 8001544:	40023c00 	.word	0x40023c00
 8001548:	40007000 	.word	0x40007000

0800154c <__cxa_pure_virtual>:
 800154c:	b508      	push	{r3, lr}
 800154e:	f000 f80d 	bl	800156c <_ZSt9terminatev>

08001552 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8001552:	b508      	push	{r3, lr}
 8001554:	4780      	blx	r0
 8001556:	f000 f815 	bl	8001584 <abort>
	...

0800155c <_ZSt13get_terminatev>:
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <_ZSt13get_terminatev+0xc>)
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	f3bf 8f5f 	dmb	sy
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000040 	.word	0x20000040

0800156c <_ZSt9terminatev>:
 800156c:	b508      	push	{r3, lr}
 800156e:	f7ff fff5 	bl	800155c <_ZSt13get_terminatev>
 8001572:	f7ff ffee 	bl	8001552 <_ZN10__cxxabiv111__terminateEPFvvE>

08001576 <__aeabi_atexit>:
 8001576:	460b      	mov	r3, r1
 8001578:	4601      	mov	r1, r0
 800157a:	4618      	mov	r0, r3
 800157c:	f000 b80a 	b.w	8001594 <__cxa_atexit>

08001580 <_ZdlPv>:
 8001580:	f000 b83c 	b.w	80015fc <free>

08001584 <abort>:
 8001584:	b508      	push	{r3, lr}
 8001586:	2006      	movs	r0, #6
 8001588:	f000 f8b6 	bl	80016f8 <raise>
 800158c:	2001      	movs	r0, #1
 800158e:	f000 f8e1 	bl	8001754 <_exit>
	...

08001594 <__cxa_atexit>:
 8001594:	b510      	push	{r4, lr}
 8001596:	4c05      	ldr	r4, [pc, #20]	; (80015ac <__cxa_atexit+0x18>)
 8001598:	4613      	mov	r3, r2
 800159a:	b12c      	cbz	r4, 80015a8 <__cxa_atexit+0x14>
 800159c:	460a      	mov	r2, r1
 800159e:	4601      	mov	r1, r0
 80015a0:	2002      	movs	r0, #2
 80015a2:	f3af 8000 	nop.w
 80015a6:	bd10      	pop	{r4, pc}
 80015a8:	4620      	mov	r0, r4
 80015aa:	bd10      	pop	{r4, pc}
 80015ac:	00000000 	.word	0x00000000

080015b0 <__libc_init_array>:
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <__libc_init_array+0x3c>)
 80015b2:	b570      	push	{r4, r5, r6, lr}
 80015b4:	461e      	mov	r6, r3
 80015b6:	4c0e      	ldr	r4, [pc, #56]	; (80015f0 <__libc_init_array+0x40>)
 80015b8:	2500      	movs	r5, #0
 80015ba:	1ae4      	subs	r4, r4, r3
 80015bc:	10a4      	asrs	r4, r4, #2
 80015be:	42a5      	cmp	r5, r4
 80015c0:	d004      	beq.n	80015cc <__libc_init_array+0x1c>
 80015c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015c6:	4798      	blx	r3
 80015c8:	3501      	adds	r5, #1
 80015ca:	e7f8      	b.n	80015be <__libc_init_array+0xe>
 80015cc:	f000 f8c4 	bl	8001758 <_init>
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <__libc_init_array+0x44>)
 80015d2:	4c09      	ldr	r4, [pc, #36]	; (80015f8 <__libc_init_array+0x48>)
 80015d4:	461e      	mov	r6, r3
 80015d6:	1ae4      	subs	r4, r4, r3
 80015d8:	10a4      	asrs	r4, r4, #2
 80015da:	2500      	movs	r5, #0
 80015dc:	42a5      	cmp	r5, r4
 80015de:	d004      	beq.n	80015ea <__libc_init_array+0x3a>
 80015e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015e4:	4798      	blx	r3
 80015e6:	3501      	adds	r5, #1
 80015e8:	e7f8      	b.n	80015dc <__libc_init_array+0x2c>
 80015ea:	bd70      	pop	{r4, r5, r6, pc}
 80015ec:	080017fc 	.word	0x080017fc
 80015f0:	080017fc 	.word	0x080017fc
 80015f4:	080017fc 	.word	0x080017fc
 80015f8:	08001804 	.word	0x08001804

080015fc <free>:
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <free+0xc>)
 80015fe:	4601      	mov	r1, r0
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	f000 b803 	b.w	800160c <_free_r>
 8001606:	bf00      	nop
 8001608:	200000a4 	.word	0x200000a4

0800160c <_free_r>:
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4605      	mov	r5, r0
 8001610:	2900      	cmp	r1, #0
 8001612:	d044      	beq.n	800169e <_free_r+0x92>
 8001614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001618:	1f0c      	subs	r4, r1, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	bfb8      	it	lt
 800161e:	18e4      	addlt	r4, r4, r3
 8001620:	f000 f886 	bl	8001730 <__malloc_lock>
 8001624:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <_free_r+0x94>)
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	4611      	mov	r1, r2
 800162a:	b913      	cbnz	r3, 8001632 <_free_r+0x26>
 800162c:	6063      	str	r3, [r4, #4]
 800162e:	6014      	str	r4, [r2, #0]
 8001630:	e030      	b.n	8001694 <_free_r+0x88>
 8001632:	42a3      	cmp	r3, r4
 8001634:	d90d      	bls.n	8001652 <_free_r+0x46>
 8001636:	6822      	ldr	r2, [r4, #0]
 8001638:	18a0      	adds	r0, r4, r2
 800163a:	4283      	cmp	r3, r0
 800163c:	bf01      	itttt	eq
 800163e:	6818      	ldreq	r0, [r3, #0]
 8001640:	685b      	ldreq	r3, [r3, #4]
 8001642:	1812      	addeq	r2, r2, r0
 8001644:	6022      	streq	r2, [r4, #0]
 8001646:	6063      	str	r3, [r4, #4]
 8001648:	600c      	str	r4, [r1, #0]
 800164a:	e023      	b.n	8001694 <_free_r+0x88>
 800164c:	42a2      	cmp	r2, r4
 800164e:	d803      	bhi.n	8001658 <_free_r+0x4c>
 8001650:	4613      	mov	r3, r2
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2a00      	cmp	r2, #0
 8001656:	d1f9      	bne.n	800164c <_free_r+0x40>
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	1819      	adds	r1, r3, r0
 800165c:	42a1      	cmp	r1, r4
 800165e:	d10b      	bne.n	8001678 <_free_r+0x6c>
 8001660:	6821      	ldr	r1, [r4, #0]
 8001662:	4401      	add	r1, r0
 8001664:	1858      	adds	r0, r3, r1
 8001666:	4282      	cmp	r2, r0
 8001668:	6019      	str	r1, [r3, #0]
 800166a:	d113      	bne.n	8001694 <_free_r+0x88>
 800166c:	6810      	ldr	r0, [r2, #0]
 800166e:	6852      	ldr	r2, [r2, #4]
 8001670:	4401      	add	r1, r0
 8001672:	6019      	str	r1, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	e00d      	b.n	8001694 <_free_r+0x88>
 8001678:	d902      	bls.n	8001680 <_free_r+0x74>
 800167a:	230c      	movs	r3, #12
 800167c:	602b      	str	r3, [r5, #0]
 800167e:	e009      	b.n	8001694 <_free_r+0x88>
 8001680:	6821      	ldr	r1, [r4, #0]
 8001682:	1860      	adds	r0, r4, r1
 8001684:	4282      	cmp	r2, r0
 8001686:	bf01      	itttt	eq
 8001688:	6810      	ldreq	r0, [r2, #0]
 800168a:	6852      	ldreq	r2, [r2, #4]
 800168c:	1809      	addeq	r1, r1, r0
 800168e:	6021      	streq	r1, [r4, #0]
 8001690:	6062      	str	r2, [r4, #4]
 8001692:	605c      	str	r4, [r3, #4]
 8001694:	4628      	mov	r0, r5
 8001696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800169a:	f000 b84a 	b.w	8001732 <__malloc_unlock>
 800169e:	bd38      	pop	{r3, r4, r5, pc}
 80016a0:	200002d0 	.word	0x200002d0

080016a4 <_raise_r>:
 80016a4:	291f      	cmp	r1, #31
 80016a6:	b538      	push	{r3, r4, r5, lr}
 80016a8:	4604      	mov	r4, r0
 80016aa:	460d      	mov	r5, r1
 80016ac:	d904      	bls.n	80016b8 <_raise_r+0x14>
 80016ae:	2316      	movs	r3, #22
 80016b0:	6003      	str	r3, [r0, #0]
 80016b2:	f04f 30ff 	mov.w	r0, #4294967295
 80016b6:	bd38      	pop	{r3, r4, r5, pc}
 80016b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80016ba:	b112      	cbz	r2, 80016c2 <_raise_r+0x1e>
 80016bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80016c0:	b94b      	cbnz	r3, 80016d6 <_raise_r+0x32>
 80016c2:	4620      	mov	r0, r4
 80016c4:	f000 f832 	bl	800172c <_getpid_r>
 80016c8:	462a      	mov	r2, r5
 80016ca:	4601      	mov	r1, r0
 80016cc:	4620      	mov	r0, r4
 80016ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016d2:	f000 b819 	b.w	8001708 <_kill_r>
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d00c      	beq.n	80016f4 <_raise_r+0x50>
 80016da:	1c59      	adds	r1, r3, #1
 80016dc:	d103      	bne.n	80016e6 <_raise_r+0x42>
 80016de:	2316      	movs	r3, #22
 80016e0:	6003      	str	r3, [r0, #0]
 80016e2:	2001      	movs	r0, #1
 80016e4:	bd38      	pop	{r3, r4, r5, pc}
 80016e6:	2400      	movs	r4, #0
 80016e8:	4628      	mov	r0, r5
 80016ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80016ee:	4798      	blx	r3
 80016f0:	4620      	mov	r0, r4
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
 80016f4:	2000      	movs	r0, #0
 80016f6:	bd38      	pop	{r3, r4, r5, pc}

080016f8 <raise>:
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <raise+0xc>)
 80016fa:	4601      	mov	r1, r0
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	f7ff bfd1 	b.w	80016a4 <_raise_r>
 8001702:	bf00      	nop
 8001704:	200000a4 	.word	0x200000a4

08001708 <_kill_r>:
 8001708:	b538      	push	{r3, r4, r5, lr}
 800170a:	4c07      	ldr	r4, [pc, #28]	; (8001728 <_kill_r+0x20>)
 800170c:	2300      	movs	r3, #0
 800170e:	4605      	mov	r5, r0
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	f000 f815 	bl	8001744 <_kill>
 800171a:	1c43      	adds	r3, r0, #1
 800171c:	d102      	bne.n	8001724 <_kill_r+0x1c>
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	b103      	cbz	r3, 8001724 <_kill_r+0x1c>
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	bd38      	pop	{r3, r4, r5, pc}
 8001726:	bf00      	nop
 8001728:	200002d4 	.word	0x200002d4

0800172c <_getpid_r>:
 800172c:	f000 b802 	b.w	8001734 <_getpid>

08001730 <__malloc_lock>:
 8001730:	4770      	bx	lr

08001732 <__malloc_unlock>:
 8001732:	4770      	bx	lr

08001734 <_getpid>:
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <_getpid+0xc>)
 8001736:	2258      	movs	r2, #88	; 0x58
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	f04f 30ff 	mov.w	r0, #4294967295
 800173e:	4770      	bx	lr
 8001740:	200002d4 	.word	0x200002d4

08001744 <_kill>:
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <_kill+0xc>)
 8001746:	2258      	movs	r2, #88	; 0x58
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f04f 30ff 	mov.w	r0, #4294967295
 800174e:	4770      	bx	lr
 8001750:	200002d4 	.word	0x200002d4

08001754 <_exit>:
 8001754:	e7fe      	b.n	8001754 <_exit>
	...

08001758 <_init>:
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175a:	bf00      	nop
 800175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175e:	bc08      	pop	{r3}
 8001760:	469e      	mov	lr, r3
 8001762:	4770      	bx	lr

08001764 <_fini>:
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	bf00      	nop
 8001768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176a:	bc08      	pop	{r3}
 800176c:	469e      	mov	lr, r3
 800176e:	4770      	bx	lr
