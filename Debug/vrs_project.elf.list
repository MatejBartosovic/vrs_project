
vrs_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011fc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001338  08001338  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001338  08001338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800133c  0800133c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  08001340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000003c  0800137c  0002003c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000005c  0800137c  0002005c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004b05  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b8d  00000000  00000000  00024b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006f8  00000000  00000000  000256f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000660  00000000  00000000  00025df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000217c  00000000  00000000  00026450  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002192  00000000  00000000  000285cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002a75e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001da0  00000000  00000000  0002a7dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002c57c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000003c 	.word	0x2000003c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001320 	.word	0x08001320

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000040 	.word	0x20000040
 8000178:	08001320 	.word	0x08001320

0800017c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	230f      	movs	r3, #15
 800018e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	78db      	ldrb	r3, [r3, #3]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d038      	beq.n	800020a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <NVIC_Init+0xb8>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	43db      	mvns	r3, r3
 800019e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001a2:	0a1b      	lsrs	r3, r3, #8
 80001a4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	f1c3 0304 	rsb	r3, r3, #4
 80001ac:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001ae:	7b7a      	ldrb	r2, [r7, #13]
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	fa42 f303 	asr.w	r3, r2, r3
 80001b6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	461a      	mov	r2, r3
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	789a      	ldrb	r2, [r3, #2]
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	4013      	ands	r3, r2
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	4313      	orrs	r3, r2
 80001d4:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001d6:	7bfb      	ldrb	r3, [r7, #15]
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <NVIC_Init+0xbc>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	7bfa      	ldrb	r2, [r7, #15]
 80001e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <NVIC_Init+0xbc>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	095b      	lsrs	r3, r3, #5
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	f003 031f 	and.w	r3, r3, #31
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000208:	e00f      	b.n	800022a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <NVIC_Init+0xbc>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	095b      	lsrs	r3, r3, #5
 8000212:	b2db      	uxtb	r3, r3
 8000214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	f003 031f 	and.w	r3, r3, #31
 800021e:	2201      	movs	r2, #1
 8000220:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000222:	f100 0320 	add.w	r3, r0, #32
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	e000e100 	.word	0xe000e100

0800023c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800023c:	b480      	push	{r7}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	e07e      	b.n	8000356 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000258:	2201      	movs	r2, #1
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	fa02 f303 	lsl.w	r3, r2, r3
 8000260:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	429a      	cmp	r2, r3
 8000272:	d16d      	bne.n	8000350 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	2103      	movs	r1, #3
 800027e:	fa01 f303 	lsl.w	r3, r1, r3
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	4619      	mov	r1, r3
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	431a      	orrs	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	791b      	ldrb	r3, [r3, #4]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d003      	beq.n	80002b2 <GPIO_Init+0x76>
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d136      	bne.n	8000320 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	2103      	movs	r1, #3
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	43db      	mvns	r3, r3
 80002c2:	401a      	ands	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	795b      	ldrb	r3, [r3, #5]
 80002d0:	4619      	mov	r1, r3
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	889b      	ldrh	r3, [r3, #4]
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	43db      	mvns	r3, r3
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	4013      	ands	r3, r2
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	889b      	ldrh	r3, [r3, #4]
 8000302:	b29b      	uxth	r3, r3
 8000304:	b21a      	sxth	r2, r3
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	799b      	ldrb	r3, [r3, #6]
 800030a:	4619      	mov	r1, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	b29b      	uxth	r3, r3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	b21b      	sxth	r3, r3
 8000316:	4313      	orrs	r3, r2
 8000318:	b21b      	sxth	r3, r3
 800031a:	b29a      	uxth	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	b29b      	uxth	r3, r3
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	68da      	ldr	r2, [r3, #12]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	79db      	ldrb	r3, [r3, #7]
 8000340:	4619      	mov	r1, r3
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	3301      	adds	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	f67f af7d 	bls.w	8000258 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800035e:	bf00      	nop
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	807b      	strh	r3, [r7, #2]
 8000374:	4613      	mov	r3, r2
 8000376:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000380:	787a      	ldrb	r2, [r7, #1]
 8000382:	887b      	ldrh	r3, [r7, #2]
 8000384:	f003 0307 	and.w	r3, r3, #7
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	08db      	lsrs	r3, r3, #3
 8000394:	b29b      	uxth	r3, r3
 8000396:	4618      	mov	r0, r3
 8000398:	887b      	ldrh	r3, [r7, #2]
 800039a:	08db      	lsrs	r3, r3, #3
 800039c:	b29b      	uxth	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3208      	adds	r2, #8
 80003a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003a8:	887b      	ldrh	r3, [r7, #2]
 80003aa:	f003 0307 	and.w	r3, r3, #7
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	210f      	movs	r1, #15
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	43db      	mvns	r3, r3
 80003b8:	ea02 0103 	and.w	r1, r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f100 0208 	add.w	r2, r0, #8
 80003c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003c6:	887b      	ldrh	r3, [r7, #2]
 80003c8:	08db      	lsrs	r3, r3, #3
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	461a      	mov	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3208      	adds	r2, #8
 80003d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	4313      	orrs	r3, r2
 80003da:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003dc:	887b      	ldrh	r3, [r7, #2]
 80003de:	08db      	lsrs	r3, r3, #3
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3208      	adds	r2, #8
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000402:	4a04      	ldr	r2, [pc, #16]	; (8000414 <RCC_HSICmd+0x1c>)
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	42470000 	.word	0x42470000

08000418 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <RCC_SYSCLKConfig+0x34>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	60fb      	str	r3, [r7, #12]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	f023 0303 	bic.w	r3, r3, #3
 8000430:	60fb      	str	r3, [r7, #12]
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4313      	orrs	r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800043a:	4a04      	ldr	r2, [pc, #16]	; (800044c <RCC_SYSCLKConfig+0x34>)
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	6093      	str	r3, [r2, #8]
}
 8000440:	bf00      	nop
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40023800 	.word	0x40023800

08000450 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000450:	b480      	push	{r7}
 8000452:	b089      	sub	sp, #36	; 0x24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	61fb      	str	r3, [r7, #28]
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	2300      	movs	r3, #0
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	2300      	movs	r3, #0
 800046e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000470:	4b5f      	ldr	r3, [pc, #380]	; (80005f0 <RCC_GetClocksFreq+0x1a0>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	f003 030c 	and.w	r3, r3, #12
 8000478:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800047a:	69fb      	ldr	r3, [r7, #28]
 800047c:	2b0c      	cmp	r3, #12
 800047e:	d865      	bhi.n	800054c <RCC_GetClocksFreq+0xfc>
 8000480:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <RCC_GetClocksFreq+0x38>)
 8000482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000486:	bf00      	nop
 8000488:	080004bd 	.word	0x080004bd
 800048c:	0800054d 	.word	0x0800054d
 8000490:	0800054d 	.word	0x0800054d
 8000494:	0800054d 	.word	0x0800054d
 8000498:	080004dd 	.word	0x080004dd
 800049c:	0800054d 	.word	0x0800054d
 80004a0:	0800054d 	.word	0x0800054d
 80004a4:	0800054d 	.word	0x0800054d
 80004a8:	080004e5 	.word	0x080004e5
 80004ac:	0800054d 	.word	0x0800054d
 80004b0:	0800054d 	.word	0x0800054d
 80004b4:	0800054d 	.word	0x0800054d
 80004b8:	080004ed 	.word	0x080004ed
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80004bc:	4b4c      	ldr	r3, [pc, #304]	; (80005f0 <RCC_GetClocksFreq+0x1a0>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80004c4:	0b5b      	lsrs	r3, r3, #13
 80004c6:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	3301      	adds	r3, #1
 80004cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	461a      	mov	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	601a      	str	r2, [r3, #0]
      break;
 80004da:	e047      	b.n	800056c <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a45      	ldr	r2, [pc, #276]	; (80005f4 <RCC_GetClocksFreq+0x1a4>)
 80004e0:	601a      	str	r2, [r3, #0]
      break;
 80004e2:	e043      	b.n	800056c <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a44      	ldr	r2, [pc, #272]	; (80005f8 <RCC_GetClocksFreq+0x1a8>)
 80004e8:	601a      	str	r2, [r3, #0]
      break;
 80004ea:	e03f      	b.n	800056c <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80004ec:	4b40      	ldr	r3, [pc, #256]	; (80005f0 <RCC_GetClocksFreq+0x1a0>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004f4:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80004f6:	4b3e      	ldr	r3, [pc, #248]	; (80005f0 <RCC_GetClocksFreq+0x1a0>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80004fe:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	0c9b      	lsrs	r3, r3, #18
 8000504:	4a3d      	ldr	r2, [pc, #244]	; (80005fc <RCC_GetClocksFreq+0x1ac>)
 8000506:	5cd3      	ldrb	r3, [r2, r3]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	0d9b      	lsrs	r3, r3, #22
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000514:	4b36      	ldr	r3, [pc, #216]	; (80005f0 <RCC_GetClocksFreq+0x1a0>)
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800051c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d109      	bne.n	8000538 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8000524:	69bb      	ldr	r3, [r7, #24]
 8000526:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <RCC_GetClocksFreq+0x1a4>)
 8000528:	fb02 f203 	mul.w	r2, r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000536:	e019      	b.n	800056c <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	4a2f      	ldr	r2, [pc, #188]	; (80005f8 <RCC_GetClocksFreq+0x1a8>)
 800053c:	fb02 f203 	mul.w	r2, r2, r3
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	fbb2 f2f3 	udiv	r2, r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	601a      	str	r2, [r3, #0]
      }
      break;
 800054a:	e00f      	b.n	800056c <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <RCC_GetClocksFreq+0x1a0>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000554:	0b5b      	lsrs	r3, r3, #13
 8000556:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	3301      	adds	r3, #1
 800055c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
      break;
 800056a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <RCC_GetClocksFreq+0x1a0>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000574:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	091b      	lsrs	r3, r3, #4
 800057a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 800057c:	4a20      	ldr	r2, [pc, #128]	; (8000600 <RCC_GetClocksFreq+0x1b0>)
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	4413      	add	r3, r2
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	40da      	lsrs	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <RCC_GetClocksFreq+0x1a0>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800059c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80005a4:	4a16      	ldr	r2, [pc, #88]	; (8000600 <RCC_GetClocksFreq+0x1b0>)
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	4413      	add	r3, r2
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	40da      	lsrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <RCC_GetClocksFreq+0x1a0>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005c4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	0adb      	lsrs	r3, r3, #11
 80005ca:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <RCC_GetClocksFreq+0x1b0>)
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	40da      	lsrs	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	60da      	str	r2, [r3, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3724      	adds	r7, #36	; 0x24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	00f42400 	.word	0x00f42400
 80005f8:	007a1200 	.word	0x007a1200
 80005fc:	20000000 	.word	0x20000000
 8000600:	2000000c 	.word	0x2000000c

08000604 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000616:	4909      	ldr	r1, [pc, #36]	; (800063c <RCC_AHBPeriphClockCmd+0x38>)
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <RCC_AHBPeriphClockCmd+0x38>)
 800061a:	69da      	ldr	r2, [r3, #28]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4313      	orrs	r3, r2
 8000620:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000622:	e006      	b.n	8000632 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000624:	4905      	ldr	r1, [pc, #20]	; (800063c <RCC_AHBPeriphClockCmd+0x38>)
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <RCC_AHBPeriphClockCmd+0x38>)
 8000628:	69da      	ldr	r2, [r3, #28]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	43db      	mvns	r3, r3
 800062e:	4013      	ands	r3, r2
 8000630:	61cb      	str	r3, [r1, #28]
  }
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40023800 	.word	0x40023800

08000640 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d006      	beq.n	8000660 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <RCC_APB1PeriphClockCmd+0x38>)
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <RCC_APB1PeriphClockCmd+0x38>)
 8000656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4313      	orrs	r3, r2
 800065c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800065e:	e006      	b.n	800066e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000660:	4905      	ldr	r1, [pc, #20]	; (8000678 <RCC_APB1PeriphClockCmd+0x38>)
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <RCC_APB1PeriphClockCmd+0x38>)
 8000664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	43db      	mvns	r3, r3
 800066a:	4013      	ands	r3, r2
 800066c:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800

0800067c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800067c:	b480      	push	{r7}
 800067e:	b087      	sub	sp, #28
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800068e:	2300      	movs	r3, #0
 8000690:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	b2db      	uxtb	r3, r3
 8000698:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d103      	bne.n	80006a8 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <RCC_GetFlagStatus+0x60>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	e002      	b.n	80006ae <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <RCC_GetFlagStatus+0x60>)
 80006aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ac:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 031f 	and.w	r3, r3, #31
 80006b4:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	fa22 f303 	lsr.w	r3, r2, r3
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d002      	beq.n	80006cc <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 80006c6:	2301      	movs	r3, #1
 80006c8:	74fb      	strb	r3, [r7, #19]
 80006ca:	e001      	b.n	80006d0 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 80006cc:	2300      	movs	r3, #0
 80006ce:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80006d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	371c      	adds	r7, #28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40023800 	.word	0x40023800

080006e0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006fa:	d00b      	beq.n	8000714 <TIM_TimeBaseInit+0x34>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <TIM_TimeBaseInit+0x90>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d007      	beq.n	8000714 <TIM_TimeBaseInit+0x34>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <TIM_TimeBaseInit+0x94>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d003      	beq.n	8000714 <TIM_TimeBaseInit+0x34>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <TIM_TimeBaseInit+0x98>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d108      	bne.n	8000726 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800071a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	885a      	ldrh	r2, [r3, #2]
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	4313      	orrs	r3, r2
 8000724:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <TIM_TimeBaseInit+0x9c>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d00c      	beq.n	8000748 <TIM_TimeBaseInit+0x68>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <TIM_TimeBaseInit+0xa0>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d008      	beq.n	8000748 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800073c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	891a      	ldrh	r2, [r3, #8]
 8000742:	89fb      	ldrh	r3, [r7, #14]
 8000744:	4313      	orrs	r3, r2
 8000746:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	89fa      	ldrh	r2, [r7, #14]
 800074c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	881a      	ldrh	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2201      	movs	r2, #1
 8000762:	829a      	strh	r2, [r3, #20]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40000400 	.word	0x40000400
 8000774:	40000800 	.word	0x40000800
 8000778:	40000c00 	.word	0x40000c00
 800077c:	40001000 	.word	0x40001000
 8000780:	40001400 	.word	0x40001400

08000784 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d008      	beq.n	80007a8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	b29b      	uxth	r3, r3
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80007a6:	e007      	b.n	80007b8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	801a      	strh	r2, [r3, #0]
  }
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop

080007c4 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	81fb      	strh	r3, [r7, #14]
 80007d2:	2300      	movs	r3, #0
 80007d4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	8c1b      	ldrh	r3, [r3, #32]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	f023 0301 	bic.w	r3, r3, #1
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	8c1b      	ldrh	r3, [r3, #32]
 80007ea:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	8b1b      	ldrh	r3, [r3, #24]
 80007f0:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007f8:	81fb      	strh	r3, [r7, #14]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80007fa:	89fb      	ldrh	r3, [r7, #14]
 80007fc:	f023 0303 	bic.w	r3, r3, #3
 8000800:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	881a      	ldrh	r2, [r3, #0]
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	4313      	orrs	r3, r2
 800080a:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800080c:	89bb      	ldrh	r3, [r7, #12]
 800080e:	f023 0302 	bic.w	r3, r3, #2
 8000812:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	891a      	ldrh	r2, [r3, #8]
 8000818:	89bb      	ldrh	r3, [r7, #12]
 800081a:	4313      	orrs	r3, r2
 800081c:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	885a      	ldrh	r2, [r3, #2]
 8000822:	89bb      	ldrh	r3, [r7, #12]
 8000824:	4313      	orrs	r3, r2
 8000826:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	89fa      	ldrh	r2, [r7, #14]
 8000834:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	89ba      	ldrh	r2, [r7, #12]
 800083a:	841a      	strh	r2, [r3, #32]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <TIM_OC3Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	81fb      	strh	r3, [r7, #14]
 8000856:	2300      	movs	r3, #0
 8000858:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	8c1b      	ldrh	r3, [r3, #32]
 800085e:	b29b      	uxth	r3, r3
 8000860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000864:	b29a      	uxth	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	8c1b      	ldrh	r3, [r3, #32]
 800086e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	8b9b      	ldrh	r3, [r3, #28]
 8000874:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8000876:	89fb      	ldrh	r3, [r7, #14]
 8000878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800087c:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	881a      	ldrh	r2, [r3, #0]
 8000882:	89fb      	ldrh	r3, [r7, #14]
 8000884:	4313      	orrs	r3, r2
 8000886:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000888:	89bb      	ldrh	r3, [r7, #12]
 800088a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800088e:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	891b      	ldrh	r3, [r3, #8]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b29a      	uxth	r2, r3
 8000898:	89bb      	ldrh	r3, [r7, #12]
 800089a:	4313      	orrs	r3, r2
 800089c:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	885b      	ldrh	r3, [r3, #2]
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	89bb      	ldrh	r3, [r7, #12]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	89fa      	ldrh	r2, [r7, #14]
 80008b8:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	89ba      	ldrh	r2, [r7, #12]
 80008be:	841a      	strh	r2, [r3, #32]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	8b1b      	ldrh	r3, [r3, #24]
 80008e0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	f023 0308 	bic.w	r3, r3, #8
 80008e8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80008ea:	89fa      	ldrh	r2, [r7, #14]
 80008ec:	887b      	ldrh	r3, [r7, #2]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	89fa      	ldrh	r2, [r7, #14]
 80008f6:	831a      	strh	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	8b9b      	ldrh	r3, [r3, #28]
 8000918:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 800091a:	89fb      	ldrh	r3, [r7, #14]
 800091c:	f023 0308 	bic.w	r3, r3, #8
 8000920:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000922:	89fa      	ldrh	r2, [r7, #14]
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	4313      	orrs	r3, r2
 8000928:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	89fa      	ldrh	r2, [r7, #14]
 800092e:	839a      	strh	r2, [r3, #28]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	8a1b      	ldrh	r3, [r3, #16]
 800095a:	b29b      	uxth	r3, r3
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000964:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	88db      	ldrh	r3, [r3, #6]
 800096a:	461a      	mov	r2, r3
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	4313      	orrs	r3, r2
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	b29a      	uxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	899b      	ldrh	r3, [r3, #12]
 800097e:	b29b      	uxth	r3, r3
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000988:	f023 030c 	bic.w	r3, r3, #12
 800098c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	889a      	ldrh	r2, [r3, #4]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	891b      	ldrh	r3, [r3, #8]
 8000996:	4313      	orrs	r3, r2
 8000998:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800099e:	4313      	orrs	r3, r2
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	4313      	orrs	r3, r2
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	8a9b      	ldrh	r3, [r3, #20]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	899b      	ldrh	r3, [r3, #12]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	4313      	orrs	r3, r2
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fd38 	bl	8000450 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a2e      	ldr	r2, [pc, #184]	; (8000a9c <USART_Init+0x160>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d102      	bne.n	80009ee <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	623b      	str	r3, [r7, #32]
 80009ec:	e001      	b.n	80009f2 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	899b      	ldrh	r3, [r3, #12]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da0c      	bge.n	8000a18 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80009fe:	6a3a      	ldr	r2, [r7, #32]
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	009a      	lsls	r2, r3, #2
 8000a08:	441a      	add	r2, r3
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a14:	61fb      	str	r3, [r7, #28]
 8000a16:	e00b      	b.n	8000a30 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a18:	6a3a      	ldr	r2, [r7, #32]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	009a      	lsls	r2, r3, #2
 8000a22:	441a      	add	r2, r3
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <USART_Init+0x164>)
 8000a34:	fba2 2303 	umull	r2, r3, r2, r3
 8000a38:	095b      	lsrs	r3, r3, #5
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	091b      	lsrs	r3, r3, #4
 8000a42:	2264      	movs	r2, #100	; 0x64
 8000a44:	fb02 f303 	mul.w	r3, r2, r3
 8000a48:	69fa      	ldr	r2, [r7, #28]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	899b      	ldrh	r3, [r3, #12]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da0c      	bge.n	8000a74 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	3332      	adds	r3, #50	; 0x32
 8000a60:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <USART_Init+0x164>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
 8000a72:	e00b      	b.n	8000a8c <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	3332      	adds	r3, #50	; 0x32
 8000a7a:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <USART_Init+0x164>)
 8000a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a80:	095b      	lsrs	r3, r3, #5
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	811a      	strh	r2, [r3, #8]
}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	51eb851f 	.word	0x51eb851f

08000aa4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ab0:	78fb      	ldrb	r3, [r7, #3]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d008      	beq.n	8000ac8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	899b      	ldrh	r3, [r3, #12]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000ac6:	e007      	b.n	8000ad8 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	899b      	ldrh	r3, [r3, #12]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	819a      	strh	r2, [r3, #12]
  }
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	809a      	strh	r2, [r3, #4]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	889b      	ldrh	r3, [r3, #4]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b1a:	b29b      	uxth	r3, r3
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
 8000b34:	4613      	mov	r3, r2
 8000b36:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	095b      	lsrs	r3, r3, #5
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000b56:	887b      	ldrh	r3, [r7, #2]
 8000b58:	f003 031f 	and.w	r3, r3, #31
 8000b5c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d103      	bne.n	8000b76 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	330c      	adds	r3, #12
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e009      	b.n	8000b8a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d103      	bne.n	8000b84 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3310      	adds	r3, #16
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e002      	b.n	8000b8a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3314      	adds	r3, #20
 8000b88:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000b8a:	787b      	ldrb	r3, [r7, #1]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	6811      	ldr	r1, [r2, #0]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000b9c:	e006      	b.n	8000bac <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	6811      	ldr	r1, [r2, #0]
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	43d2      	mvns	r2, r2
 8000ba8:	400a      	ands	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
  }
}
 8000bac:	bf00      	nop
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	095b      	lsrs	r3, r3, #5
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d107      	bne.n	8000c06 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	899b      	ldrh	r3, [r3, #12]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e011      	b.n	8000c2a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d107      	bne.n	8000c1c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	8a1b      	ldrh	r3, [r3, #16]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	4013      	ands	r3, r2
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e006      	b.n	8000c2a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	8a9b      	ldrh	r3, [r3, #20]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	4013      	ands	r3, r2
 8000c28:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000c32:	2201      	movs	r2, #1
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4013      	ands	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d005      	beq.n	8000c5c <USART_GetITStatus+0xa4>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000c56:	2301      	movs	r3, #1
 8000c58:	74fb      	strb	r3, [r7, #19]
 8000c5a:	e001      	b.n	8000c60 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000c60:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	81fb      	strh	r3, [r7, #14]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000c80:	887b      	ldrh	r3, [r7, #2]
 8000c82:	0a1b      	lsrs	r3, r3, #8
 8000c84:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000c86:	89fb      	ldrh	r3, [r7, #14]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000c90:	89bb      	ldrh	r3, [r7, #12]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	801a      	strh	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

	int pwm;
	int i;
	sysClockSetup();
 8000ca8:	f000 f8ac 	bl	8000e04 <_Z13sysClockSetupv>
	vystupinitGPIO();
 8000cac:	f000 f870 	bl	8000d90 <_Z14vystupinitGPIOv>
	vystupinit2GPIO();
 8000cb0:	f000 f88a 	bl	8000dc8 <_Z15vystupinit2GPIOv>
	InitializeTimer();
 8000cb4:	f000 f808 	bl	8000cc8 <_Z15InitializeTimerv>
	InitializePWMChannel();
 8000cb8:	f000 f826 	bl	8000d08 <_Z20InitializePWMChannelv>
	InitializePWMChannel2();
 8000cbc:	f000 f846 	bl	8000d4c <_Z21InitializePWMChannel2v>
	usart_init();
 8000cc0:	f000 f8b8 	bl	8000e34 <_Z10usart_initv>


	while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <main+0x20>
 8000cc6:	bf00      	nop

08000cc8 <_Z15InitializeTimerv>:
#include <pwm.h>

uint8_t value;

void InitializeTimer()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000cce:	2101      	movs	r1, #1
 8000cd0:	2004      	movs	r0, #4
 8000cd2:	f7ff fcb5 	bl	8000640 <RCC_APB1PeriphClockCmd>

    TIM_TimeBaseInitTypeDef timerInitStructure;
    timerInitStructure.TIM_Prescaler = 160-1; //clock=16MHz
 8000cd6:	239f      	movs	r3, #159	; 0x9f
 8000cd8:	80bb      	strh	r3, [r7, #4]
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	80fb      	strh	r3, [r7, #6]
    timerInitStructure.TIM_Period = 2000-1;
 8000cde:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000ce2:	60bb      	str	r3, [r7, #8]
    timerInitStructure.TIM_ClockDivision = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInit(TIM4, &timerInitStructure);
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <_Z15InitializeTimerv+0x3c>)
 8000cee:	f7ff fcf7 	bl	80006e0 <TIM_TimeBaseInit>
    TIM_Cmd(TIM4, ENABLE);
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <_Z15InitializeTimerv+0x3c>)
 8000cf6:	f7ff fd45 	bl	8000784 <TIM_Cmd>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40000800 	.word	0x40000800

08000d08 <_Z20InitializePWMChannelv>:

void InitializePWMChannel()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
    TIM_OCInitTypeDef outputChannelInit ;
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8000d0e:	2360      	movs	r3, #96	; 0x60
 8000d10:	80bb      	strh	r3, [r7, #4]
    outputChannelInit.TIM_Pulse = 150;
 8000d12:	2396      	movs	r3, #150	; 0x96
 8000d14:	60bb      	str	r3, [r7, #8]
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 8000d16:	2301      	movs	r3, #1
 8000d18:	80fb      	strh	r3, [r7, #6]
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	81bb      	strh	r3, [r7, #12]

    TIM_OC1Init(TIM4, &outputChannelInit);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <_Z20InitializePWMChannelv+0x3c>)
 8000d24:	f7ff fd4e 	bl	80007c4 <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <_Z20InitializePWMChannelv+0x3c>)
 8000d2c:	f7ff fdce 	bl	80008cc <TIM_OC1PreloadConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4);
 8000d30:	2202      	movs	r2, #2
 8000d32:	2106      	movs	r1, #6
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <_Z20InitializePWMChannelv+0x40>)
 8000d36:	f7ff fb17 	bl	8000368 <GPIO_PinAFConfig>

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40000800 	.word	0x40000800
 8000d48:	40020400 	.word	0x40020400

08000d4c <_Z21InitializePWMChannel2v>:

void InitializePWMChannel2()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
    TIM_OCInitTypeDef outputChannelInit ;
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8000d52:	2360      	movs	r3, #96	; 0x60
 8000d54:	80bb      	strh	r3, [r7, #4]
    outputChannelInit.TIM_Pulse = 150;
 8000d56:	2396      	movs	r3, #150	; 0x96
 8000d58:	60bb      	str	r3, [r7, #8]
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	80fb      	strh	r3, [r7, #6]
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	81bb      	strh	r3, [r7, #12]

    TIM_OC3Init(TIM4, &outputChannelInit);
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <_Z21InitializePWMChannel2v+0x3c>)
 8000d68:	f7ff fd6e 	bl	8000848 <TIM_OC3Init>
    TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <_Z21InitializePWMChannel2v+0x3c>)
 8000d70:	f7ff fdc8 	bl	8000904 <TIM_OC3PreloadConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_TIM4);
 8000d74:	2202      	movs	r2, #2
 8000d76:	2108      	movs	r1, #8
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <_Z21InitializePWMChannel2v+0x40>)
 8000d7a:	f7ff faf5 	bl	8000368 <GPIO_PinAFConfig>

}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40000800 	.word	0x40000800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <_Z14vystupinitGPIOv>:

void vystupinitGPIO()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000d96:	2101      	movs	r1, #1
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f7ff fc33 	bl	8000604 <RCC_AHBPeriphClockCmd>

    GPIO_InitTypeDef gpioStructure;
    gpioStructure.GPIO_Pin = GPIO_Pin_6 ;
 8000d9e:	2340      	movs	r3, #64	; 0x40
 8000da0:	603b      	str	r3, [r7, #0]
    gpioStructure.GPIO_Mode = GPIO_Mode_AF;
 8000da2:	2302      	movs	r3, #2
 8000da4:	713b      	strb	r3, [r7, #4]
    gpioStructure.GPIO_OType = GPIO_OType_PP;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71bb      	strb	r3, [r7, #6]
    gpioStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000dae:	2303      	movs	r3, #3
 8000db0:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOB, &gpioStructure);
 8000db2:	463b      	mov	r3, r7
 8000db4:	4619      	mov	r1, r3
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <_Z14vystupinitGPIOv+0x34>)
 8000db8:	f7ff fa40 	bl	800023c <GPIO_Init>

}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <_Z15vystupinit2GPIOv>:

void vystupinit2GPIO()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff fc17 	bl	8000604 <RCC_AHBPeriphClockCmd>

    GPIO_InitTypeDef gpioStructure;
    gpioStructure.GPIO_Pin = GPIO_Pin_8 ;
 8000dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dda:	603b      	str	r3, [r7, #0]
    gpioStructure.GPIO_Mode = GPIO_Mode_AF;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	713b      	strb	r3, [r7, #4]
    gpioStructure.GPIO_OType = GPIO_OType_PP;
 8000de0:	2300      	movs	r3, #0
 8000de2:	71bb      	strb	r3, [r7, #6]
    gpioStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000de8:	2303      	movs	r3, #3
 8000dea:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOB, &gpioStructure);
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <_Z15vystupinit2GPIOv+0x38>)
 8000df2:	f7ff fa23 	bl	800023c <GPIO_Init>

}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40020400 	.word	0x40020400

08000e04 <_Z13sysClockSetupv>:



void sysClockSetup()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	RCC_HSICmd(ENABLE);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff faf5 	bl	80003f8 <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000e0e:	2021      	movs	r0, #33	; 0x21
 8000e10:	f7ff fc34 	bl	800067c <RCC_GetFlagStatus>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf0c      	ite	eq
 8000e1a:	2301      	moveq	r3, #1
 8000e1c:	2300      	movne	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d000      	beq.n	8000e26 <_Z13sysClockSetupv+0x22>
 8000e24:	e7f3      	b.n	8000e0e <_Z13sysClockSetupv+0xa>

	RCC_SYSCLKConfig(RCC_CFGR_SW_HSI);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff faf6 	bl	8000418 <RCC_SYSCLKConfig>
	SystemCoreClockUpdate();
 8000e2c:	f000 f916 	bl	800105c <SystemCoreClockUpdate>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_Z10usart_initv>:


void usart_init()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fbe1 	bl	8000604 <RCC_AHBPeriphClockCmd>

		GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000e42:	2207      	movs	r2, #7
 8000e44:	2102      	movs	r1, #2
 8000e46:	4825      	ldr	r0, [pc, #148]	; (8000edc <_Z10usart_initv+0xa8>)
 8000e48:	f7ff fa8e 	bl	8000368 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	2103      	movs	r1, #3
 8000e50:	4822      	ldr	r0, [pc, #136]	; (8000edc <_Z10usart_initv+0xa8>)
 8000e52:	f7ff fa89 	bl	8000368 <GPIO_PinAFConfig>

		GPIO_InitTypeDef GPIO_usrt;

		GPIO_usrt.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000e56:	230c      	movs	r3, #12
 8000e58:	61bb      	str	r3, [r7, #24]
		GPIO_usrt.GPIO_Mode = GPIO_Mode_AF;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	773b      	strb	r3, [r7, #28]
		GPIO_usrt.GPIO_OType = GPIO_OType_PP;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	77bb      	strb	r3, [r7, #30]
		GPIO_usrt.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	77fb      	strb	r3, [r7, #31]
		GPIO_usrt.GPIO_Speed = GPIO_Speed_40MHz;
 8000e66:	2303      	movs	r3, #3
 8000e68:	777b      	strb	r3, [r7, #29]

		GPIO_Init(GPIOA,&GPIO_usrt);
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481a      	ldr	r0, [pc, #104]	; (8000edc <_Z10usart_initv+0xa8>)
 8000e72:	f7ff f9e3 	bl	800023c <GPIO_Init>

		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000e76:	2101      	movs	r1, #1
 8000e78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e7c:	f7ff fbe0 	bl	8000640 <RCC_APB1PeriphClockCmd>

		USART_InitTypeDef USART_InitStructure;
		USART_InitStructure.USART_BaudRate = 9600;
 8000e80:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000e84:	60bb      	str	r3, [r7, #8]
		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000e86:	2300      	movs	r3, #0
 8000e88:	81bb      	strh	r3, [r7, #12]
		USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	81fb      	strh	r3, [r7, #14]
		USART_InitStructure.USART_Parity = USART_Parity_No;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	823b      	strh	r3, [r7, #16]
		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000e92:	2300      	movs	r3, #0
 8000e94:	82bb      	strh	r3, [r7, #20]
		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000e96:	230c      	movs	r3, #12
 8000e98:	827b      	strh	r3, [r7, #18]
		USART_Init(USART2, &USART_InitStructure);
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <_Z10usart_initv+0xac>)
 8000ea2:	f7ff fd4b 	bl	800093c <USART_Init>

		  /* Enable the USARTx Interrupt */
		NVIC_InitTypeDef NVIC_InitStructure;
		NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000ea6:	2326      	movs	r3, #38	; 0x26
 8000ea8:	713b      	strb	r3, [r7, #4]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	717b      	strb	r3, [r7, #5]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71bb      	strb	r3, [r7, #6]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	71fb      	strb	r3, [r7, #7]
		NVIC_Init(&NVIC_InitStructure);
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff f95f 	bl	800017c <NVIC_Init>

		//interrupt
		//USART_ITConfig(USART2, USART_IT_TC, ENABLE);
		USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f240 5125 	movw	r1, #1317	; 0x525
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <_Z10usart_initv+0xac>)
 8000ec6:	f7ff fe2f 	bl	8000b28 <USART_ITConfig>

		USART_Cmd(USART2, ENABLE);
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <_Z10usart_initv+0xac>)
 8000ece:	f7ff fde9 	bl	8000aa4 <USART_Cmd>

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <USART2_IRQHandler>:

extern "C" void USART2_IRQHandler(void){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	// this is the interrupt request handler (IRQ) for ALL USART1 interrupts

	if (USART_GetITStatus(USART2, USART_IT_RXNE)==SET) {
 8000ee8:	f240 5125 	movw	r1, #1317	; 0x525
 8000eec:	4812      	ldr	r0, [pc, #72]	; (8000f38 <USART2_IRQHandler+0x54>)
 8000eee:	f7ff fe63 	bl	8000bb8 <USART_GetITStatus>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	bf0c      	ite	eq
 8000ef8:	2301      	moveq	r3, #1
 8000efa:	2300      	movne	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d017      	beq.n	8000f32 <USART2_IRQHandler+0x4e>

		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000f02:	f240 5125 	movw	r1, #1317	; 0x525
 8000f06:	480c      	ldr	r0, [pc, #48]	; (8000f38 <USART2_IRQHandler+0x54>)
 8000f08:	f7ff feb0 	bl	8000c6c <USART_ClearITPendingBit>
		value = USART_ReceiveData(USART2);
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <USART2_IRQHandler+0x54>)
 8000f0e:	f7ff fdfb 	bl	8000b08 <USART_ReceiveData>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <USART2_IRQHandler+0x58>)
 8000f18:	701a      	strb	r2, [r3, #0]
		// Send data back for verification
		USART_SendData(USART2,value);
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <USART2_IRQHandler+0x58>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <USART2_IRQHandler+0x54>)
 8000f24:	f7ff fdde 	bl	8000ae4 <USART_SendData>

		TIM4->CCR1 = value; // pre servo, PWM = 2000, value = cca 120-180
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <USART2_IRQHandler+0x5c>)
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <USART2_IRQHandler+0x58>)
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34

	}

	return;
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
}
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	20000058 	.word	0x20000058
 8000f40:	40000800 	.word	0x40000800

08000f44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f4a:	e003      	b.n	8000f54 <LoopCopyDataInit>

08000f4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000f4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f52:	3104      	adds	r1, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000f58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f5c:	d3f6      	bcc.n	8000f4c <CopyDataInit>
  ldr r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000f60:	e002      	b.n	8000f68 <LoopFillZerobss>

08000f62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f64:	f842 3b04 	str.w	r3, [r2], #4

08000f68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000f6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f6c:	d3f9      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f6e:	f000 f841 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f000 f9af 	bl	80012d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f76:	f7ff fe95 	bl	8000ca4 <main>
  bx lr
 8000f7a:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f7c:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000f80:	08001340 	.word	0x08001340
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f88:	2000003c 	.word	0x2000003c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000f8c:	2000003c 	.word	0x2000003c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000f90:	2000005c 	.word	0x2000005c

08000f94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_IRQHandler>
	...

08000f98 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000fa8:	e7fe      	b.n	8000fa8 <HardFault_Handler+0x4>
 8000faa:	bf00      	nop

08000fac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>
 8000fb2:	bf00      	nop

08000fb4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000fb8:	e7fe      	b.n	8000fb8 <BusFault_Handler+0x4>
 8000fba:	bf00      	nop

08000fbc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>
 8000fc2:	bf00      	nop

08000fc4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <SystemInit+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <SystemInit+0x5c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001004:	4912      	ldr	r1, [pc, #72]	; (8001050 <SystemInit+0x5c>)
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <SystemInit+0x5c>)
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <SystemInit+0x60>)
 800100c:	4013      	ands	r3, r2
 800100e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <SystemInit+0x5c>)
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SystemInit+0x5c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800101a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800101e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <SystemInit+0x5c>)
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <SystemInit+0x5c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <SystemInit+0x5c>)
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SystemInit+0x5c>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001036:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SystemInit+0x5c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800103e:	f000 f8b9 	bl	80011b4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SystemInit+0x64>)
 8001044:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001048:	609a      	str	r2, [r3, #8]
#endif
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	88ffc00c 	.word	0x88ffc00c
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <SystemCoreClockUpdate+0x140>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b0c      	cmp	r3, #12
 8001084:	d864      	bhi.n	8001150 <SystemCoreClockUpdate+0xf4>
 8001086:	a201      	add	r2, pc, #4	; (adr r2, 800108c <SystemCoreClockUpdate+0x30>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	080010c1 	.word	0x080010c1
 8001090:	08001151 	.word	0x08001151
 8001094:	08001151 	.word	0x08001151
 8001098:	08001151 	.word	0x08001151
 800109c:	080010e1 	.word	0x080010e1
 80010a0:	08001151 	.word	0x08001151
 80010a4:	08001151 	.word	0x08001151
 80010a8:	08001151 	.word	0x08001151
 80010ac:	080010e9 	.word	0x080010e9
 80010b0:	08001151 	.word	0x08001151
 80010b4:	08001151 	.word	0x08001151
 80010b8:	08001151 	.word	0x08001151
 80010bc:	080010f1 	.word	0x080010f1
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <SystemCoreClockUpdate+0x140>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80010c8:	0b5b      	lsrs	r3, r3, #13
 80010ca:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3301      	adds	r3, #1
 80010d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <SystemCoreClockUpdate+0x144>)
 80010dc:	601a      	str	r2, [r3, #0]
      break;
 80010de:	e047      	b.n	8001170 <SystemCoreClockUpdate+0x114>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <SystemCoreClockUpdate+0x144>)
 80010e2:	4a30      	ldr	r2, [pc, #192]	; (80011a4 <SystemCoreClockUpdate+0x148>)
 80010e4:	601a      	str	r2, [r3, #0]
      break;
 80010e6:	e043      	b.n	8001170 <SystemCoreClockUpdate+0x114>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <SystemCoreClockUpdate+0x144>)
 80010ea:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <SystemCoreClockUpdate+0x14c>)
 80010ec:	601a      	str	r2, [r3, #0]
      break;
 80010ee:	e03f      	b.n	8001170 <SystemCoreClockUpdate+0x114>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <SystemCoreClockUpdate+0x140>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80010f8:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <SystemCoreClockUpdate+0x140>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001102:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	4a28      	ldr	r2, [pc, #160]	; (80011ac <SystemCoreClockUpdate+0x150>)
 800110a:	5cd3      	ldrb	r3, [r2, r3]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	0d9b      	lsrs	r3, r3, #22
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001118:	4b20      	ldr	r3, [pc, #128]	; (800119c <SystemCoreClockUpdate+0x140>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <SystemCoreClockUpdate+0xe0>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <SystemCoreClockUpdate+0x148>)
 800112c:	fb02 f203 	mul.w	r2, r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <SystemCoreClockUpdate+0x144>)
 8001138:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800113a:	e019      	b.n	8001170 <SystemCoreClockUpdate+0x114>
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <SystemCoreClockUpdate+0x14c>)
 8001140:	fb02 f203 	mul.w	r2, r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <SystemCoreClockUpdate+0x144>)
 800114c:	6013      	str	r3, [r2, #0]
      }
      break;
 800114e:	e00f      	b.n	8001170 <SystemCoreClockUpdate+0x114>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <SystemCoreClockUpdate+0x140>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001158:	0b5b      	lsrs	r3, r3, #13
 800115a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3301      	adds	r3, #1
 8001160:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	461a      	mov	r2, r3
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <SystemCoreClockUpdate+0x144>)
 800116c:	601a      	str	r2, [r3, #0]
      break;
 800116e:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <SystemCoreClockUpdate+0x140>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <SystemCoreClockUpdate+0x154>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <SystemCoreClockUpdate+0x144>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <SystemCoreClockUpdate+0x144>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	2000001c 	.word	0x2000001c
 80011a4:	00f42400 	.word	0x00f42400
 80011a8:	007a1200 	.word	0x007a1200
 80011ac:	20000020 	.word	0x20000020
 80011b0:	2000002c 	.word	0x2000002c

080011b4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80011c2:	4a41      	ldr	r2, [pc, #260]	; (80012c8 <SetSysClock+0x114>)
 80011c4:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <SetSysClock+0x114>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <SetSysClock+0x114>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3301      	adds	r3, #1
 80011dc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d103      	bne.n	80011ec <SetSysClock+0x38>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80011ea:	d1f0      	bne.n	80011ce <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <SetSysClock+0x114>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80011f8:	2301      	movs	r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	e001      	b.n	8001202 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d15a      	bne.n	80012be <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001208:	4a30      	ldr	r2, [pc, #192]	; (80012cc <SetSysClock+0x118>)
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <SetSysClock+0x118>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001214:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <SetSysClock+0x118>)
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <SetSysClock+0x118>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001220:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <SetSysClock+0x118>)
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <SetSysClock+0x118>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800122c:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <SetSysClock+0x114>)
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <SetSysClock+0x114>)
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001236:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <SetSysClock+0x11c>)
 800123a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800123e:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001240:	bf00      	nop
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <SetSysClock+0x11c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f9      	bne.n	8001242 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <SetSysClock+0x114>)
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <SetSysClock+0x114>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <SetSysClock+0x114>)
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <SetSysClock+0x114>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <SetSysClock+0x114>)
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <SetSysClock+0x114>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001266:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <SetSysClock+0x114>)
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <SetSysClock+0x114>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001270:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <SetSysClock+0x114>)
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <SetSysClock+0x114>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 800127c:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <SetSysClock+0x114>)
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <SetSysClock+0x114>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001288:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800128a:	bf00      	nop
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <SetSysClock+0x114>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001298:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <SetSysClock+0x114>)
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <SetSysClock+0x114>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f023 0303 	bic.w	r3, r3, #3
 80012a2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80012a4:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <SetSysClock+0x114>)
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <SetSysClock+0x114>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f043 0303 	orr.w	r3, r3, #3
 80012ae:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80012b0:	bf00      	nop
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SetSysClock+0x114>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d1f9      	bne.n	80012b2 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40023c00 	.word	0x40023c00
 80012d0:	40007000 	.word	0x40007000

080012d4 <__libc_init_array>:
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <__libc_init_array+0x3c>)
 80012d6:	b570      	push	{r4, r5, r6, lr}
 80012d8:	461e      	mov	r6, r3
 80012da:	4c0e      	ldr	r4, [pc, #56]	; (8001314 <__libc_init_array+0x40>)
 80012dc:	2500      	movs	r5, #0
 80012de:	1ae4      	subs	r4, r4, r3
 80012e0:	10a4      	asrs	r4, r4, #2
 80012e2:	42a5      	cmp	r5, r4
 80012e4:	d004      	beq.n	80012f0 <__libc_init_array+0x1c>
 80012e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012ea:	4798      	blx	r3
 80012ec:	3501      	adds	r5, #1
 80012ee:	e7f8      	b.n	80012e2 <__libc_init_array+0xe>
 80012f0:	f000 f816 	bl	8001320 <_init>
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <__libc_init_array+0x44>)
 80012f6:	4c09      	ldr	r4, [pc, #36]	; (800131c <__libc_init_array+0x48>)
 80012f8:	461e      	mov	r6, r3
 80012fa:	1ae4      	subs	r4, r4, r3
 80012fc:	10a4      	asrs	r4, r4, #2
 80012fe:	2500      	movs	r5, #0
 8001300:	42a5      	cmp	r5, r4
 8001302:	d004      	beq.n	800130e <__libc_init_array+0x3a>
 8001304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001308:	4798      	blx	r3
 800130a:	3501      	adds	r5, #1
 800130c:	e7f8      	b.n	8001300 <__libc_init_array+0x2c>
 800130e:	bd70      	pop	{r4, r5, r6, pc}
 8001310:	08001338 	.word	0x08001338
 8001314:	08001338 	.word	0x08001338
 8001318:	08001338 	.word	0x08001338
 800131c:	0800133c 	.word	0x0800133c

08001320 <_init>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	bf00      	nop
 8001324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001326:	bc08      	pop	{r3}
 8001328:	469e      	mov	lr, r3
 800132a:	4770      	bx	lr

0800132c <_fini>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	bf00      	nop
 8001330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001332:	bc08      	pop	{r3}
 8001334:	469e      	mov	lr, r3
 8001336:	4770      	bx	lr
